// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Fgp {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhJKaWxpLlByb3RvY29scy5mZ3AigAMKB1NwaW5B",
            "Y2sSLwoLUGxhdGVTeW1ib2wYASADKAsyGi5KaWxpLlByb3RvY29scy5mZ3Au",
            "Q29sdW1uEjMKDEF3YXJkRGF0YVZlYxgCIAMoCzIdLkppbGkuUHJvdG9jb2xz",
            "LmZncC5Bd2FyZERhdGESFQoNQXdhcmRUeXBlRmxhZxgDIAEoBRIQCghMaW5l",
            "TXVsdBgEIAEoARIPCgdMaW5lV2luGAUgASgBEhAKCFdoZWVsT2RkGAYgASgB",
            "EhEKCVdoZWVsTXVsdBgHIAEoARIQCghXaGVlbFdpbhgIIAEoARIQCghUb3Rh",
            "bFdpbhgJIAEoARIVCg1NdWx0U2hvd0FycmF5GAogAygBEhIKCkxpZ2h0T25Q",
            "b3MYCyADKAUSCwoDQmV0GAwgASgBEg0KBUV4dHJhGA0gASgIEhEKCVNob3dJ",
            "bmRleBgOIAEoCRIQCghOb3dNb25leRgPIAEoARIPCgdBY2tUeXBlGBAgASgF",
            "Eg8KB0lzQm9udXMYESABKAgiFQoGQ29sdW1uEgsKA0NvbBgBIAMoBSI3CglB",
            "d2FyZERhdGESDgoGU3ltYm9sGAEgASgFEg0KBUNvdW50GAIgASgFEgsKA1dp",
            "bhgDIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Fgp.SpinAck), global::Jili.Protocols.Fgp.SpinAck.Parser, new[]{ "PlateSymbol", "AwardDataVec", "AwardTypeFlag", "LineMult", "LineWin", "WheelOdd", "WheelMult", "WheelWin", "TotalWin", "MultShowArray", "LightOnPos", "Bet", "Extra", "ShowIndex", "NowMoney", "AckType", "IsBonus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Fgp.Column), global::Jili.Protocols.Fgp.Column.Parser, new[]{ "Col" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Fgp.AwardData), global::Jili.Protocols.Fgp.AwardData.Parser, new[]{ "Symbol", "Count", "Win" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Fgp.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      plateSymbol_ = other.plateSymbol_.Clone();
      awardDataVec_ = other.awardDataVec_.Clone();
      awardTypeFlag_ = other.awardTypeFlag_;
      lineMult_ = other.lineMult_;
      lineWin_ = other.lineWin_;
      wheelOdd_ = other.wheelOdd_;
      wheelMult_ = other.wheelMult_;
      wheelWin_ = other.wheelWin_;
      totalWin_ = other.totalWin_;
      multShowArray_ = other.multShowArray_.Clone();
      lightOnPos_ = other.lightOnPos_.Clone();
      bet_ = other.bet_;
      extra_ = other.extra_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      isBonus_ = other.isBonus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "PlateSymbol" field.</summary>
    public const int PlateSymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Fgp.Column> _repeated_plateSymbol_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Fgp.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Fgp.Column> plateSymbol_ = new pbc::RepeatedField<global::Jili.Protocols.Fgp.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Fgp.Column> PlateSymbol {
      get { return plateSymbol_; }
    }

    /// <summary>Field number for the "AwardDataVec" field.</summary>
    public const int AwardDataVecFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Fgp.AwardData> _repeated_awardDataVec_codec
        = pb::FieldCodec.ForMessage(18, global::Jili.Protocols.Fgp.AwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Fgp.AwardData> awardDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Fgp.AwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Fgp.AwardData> AwardDataVec {
      get { return awardDataVec_; }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 3;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "LineMult" field.</summary>
    public const int LineMultFieldNumber = 4;
    private double lineMult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LineMult {
      get { return lineMult_; }
      set {
        lineMult_ = value;
      }
    }

    /// <summary>Field number for the "LineWin" field.</summary>
    public const int LineWinFieldNumber = 5;
    private double lineWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LineWin {
      get { return lineWin_; }
      set {
        lineWin_ = value;
      }
    }

    /// <summary>Field number for the "WheelOdd" field.</summary>
    public const int WheelOddFieldNumber = 6;
    private double wheelOdd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WheelOdd {
      get { return wheelOdd_; }
      set {
        wheelOdd_ = value;
      }
    }

    /// <summary>Field number for the "WheelMult" field.</summary>
    public const int WheelMultFieldNumber = 7;
    private double wheelMult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WheelMult {
      get { return wheelMult_; }
      set {
        wheelMult_ = value;
      }
    }

    /// <summary>Field number for the "WheelWin" field.</summary>
    public const int WheelWinFieldNumber = 8;
    private double wheelWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WheelWin {
      get { return wheelWin_; }
      set {
        wheelWin_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 9;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "MultShowArray" field.</summary>
    public const int MultShowArrayFieldNumber = 10;
    private static readonly pb::FieldCodec<double> _repeated_multShowArray_codec
        = pb::FieldCodec.ForDouble(82);
    private readonly pbc::RepeatedField<double> multShowArray_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> MultShowArray {
      get { return multShowArray_; }
    }

    /// <summary>Field number for the "LightOnPos" field.</summary>
    public const int LightOnPosFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_lightOnPos_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> lightOnPos_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> LightOnPos {
      get { return lightOnPos_; }
    }

    /// <summary>Field number for the "Bet" field.</summary>
    public const int BetFieldNumber = 12;
    private double bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "Extra" field.</summary>
    public const int ExtraFieldNumber = 13;
    private bool extra_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Extra {
      get { return extra_; }
      set {
        extra_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 14;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 15;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 16;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "IsBonus" field.</summary>
    public const int IsBonusFieldNumber = 17;
    private bool isBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBonus {
      get { return isBonus_; }
      set {
        isBonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateSymbol_.Equals(other.plateSymbol_)) return false;
      if(!awardDataVec_.Equals(other.awardDataVec_)) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LineMult, other.LineMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LineWin, other.LineWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelOdd, other.WheelOdd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelMult, other.WheelMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelWin, other.WheelWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if(!multShowArray_.Equals(other.multShowArray_)) return false;
      if(!lightOnPos_.Equals(other.lightOnPos_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bet, other.Bet)) return false;
      if (Extra != other.Extra) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (IsBonus != other.IsBonus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateSymbol_.GetHashCode();
      hash ^= awardDataVec_.GetHashCode();
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (LineMult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LineMult);
      if (LineWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LineWin);
      if (WheelOdd != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelOdd);
      if (WheelMult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelMult);
      if (WheelWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelWin);
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      hash ^= multShowArray_.GetHashCode();
      hash ^= lightOnPos_.GetHashCode();
      if (Bet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bet);
      if (Extra != false) hash ^= Extra.GetHashCode();
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (IsBonus != false) hash ^= IsBonus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateSymbol_.WriteTo(output, _repeated_plateSymbol_codec);
      awardDataVec_.WriteTo(output, _repeated_awardDataVec_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AwardTypeFlag);
      }
      if (LineMult != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LineMult);
      }
      if (LineWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LineWin);
      }
      if (WheelOdd != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(WheelOdd);
      }
      if (WheelMult != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WheelMult);
      }
      if (WheelWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(WheelWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TotalWin);
      }
      multShowArray_.WriteTo(output, _repeated_multShowArray_codec);
      lightOnPos_.WriteTo(output, _repeated_lightOnPos_codec);
      if (Bet != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Bet);
      }
      if (Extra != false) {
        output.WriteRawTag(104);
        output.WriteBool(Extra);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AckType);
      }
      if (IsBonus != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsBonus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateSymbol_.WriteTo(ref output, _repeated_plateSymbol_codec);
      awardDataVec_.WriteTo(ref output, _repeated_awardDataVec_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AwardTypeFlag);
      }
      if (LineMult != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LineMult);
      }
      if (LineWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(LineWin);
      }
      if (WheelOdd != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(WheelOdd);
      }
      if (WheelMult != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(WheelMult);
      }
      if (WheelWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(WheelWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TotalWin);
      }
      multShowArray_.WriteTo(ref output, _repeated_multShowArray_codec);
      lightOnPos_.WriteTo(ref output, _repeated_lightOnPos_codec);
      if (Bet != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Bet);
      }
      if (Extra != false) {
        output.WriteRawTag(104);
        output.WriteBool(Extra);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AckType);
      }
      if (IsBonus != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsBonus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateSymbol_.CalculateSize(_repeated_plateSymbol_codec);
      size += awardDataVec_.CalculateSize(_repeated_awardDataVec_codec);
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (LineMult != 0D) {
        size += 1 + 8;
      }
      if (LineWin != 0D) {
        size += 1 + 8;
      }
      if (WheelOdd != 0D) {
        size += 1 + 8;
      }
      if (WheelMult != 0D) {
        size += 1 + 8;
      }
      if (WheelWin != 0D) {
        size += 1 + 8;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      size += multShowArray_.CalculateSize(_repeated_multShowArray_codec);
      size += lightOnPos_.CalculateSize(_repeated_lightOnPos_codec);
      if (Bet != 0D) {
        size += 1 + 8;
      }
      if (Extra != false) {
        size += 1 + 1;
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (IsBonus != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      plateSymbol_.Add(other.plateSymbol_);
      awardDataVec_.Add(other.awardDataVec_);
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.LineMult != 0D) {
        LineMult = other.LineMult;
      }
      if (other.LineWin != 0D) {
        LineWin = other.LineWin;
      }
      if (other.WheelOdd != 0D) {
        WheelOdd = other.WheelOdd;
      }
      if (other.WheelMult != 0D) {
        WheelMult = other.WheelMult;
      }
      if (other.WheelWin != 0D) {
        WheelWin = other.WheelWin;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      multShowArray_.Add(other.multShowArray_);
      lightOnPos_.Add(other.lightOnPos_);
      if (other.Bet != 0D) {
        Bet = other.Bet;
      }
      if (other.Extra != false) {
        Extra = other.Extra;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.IsBonus != false) {
        IsBonus = other.IsBonus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(input, _repeated_plateSymbol_codec);
            break;
          }
          case 18: {
            awardDataVec_.AddEntriesFrom(input, _repeated_awardDataVec_codec);
            break;
          }
          case 24: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 33: {
            LineMult = input.ReadDouble();
            break;
          }
          case 41: {
            LineWin = input.ReadDouble();
            break;
          }
          case 49: {
            WheelOdd = input.ReadDouble();
            break;
          }
          case 57: {
            WheelMult = input.ReadDouble();
            break;
          }
          case 65: {
            WheelWin = input.ReadDouble();
            break;
          }
          case 73: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 82:
          case 81: {
            multShowArray_.AddEntriesFrom(input, _repeated_multShowArray_codec);
            break;
          }
          case 90:
          case 88: {
            lightOnPos_.AddEntriesFrom(input, _repeated_lightOnPos_codec);
            break;
          }
          case 97: {
            Bet = input.ReadDouble();
            break;
          }
          case 104: {
            Extra = input.ReadBool();
            break;
          }
          case 114: {
            ShowIndex = input.ReadString();
            break;
          }
          case 121: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 128: {
            AckType = input.ReadInt32();
            break;
          }
          case 136: {
            IsBonus = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(ref input, _repeated_plateSymbol_codec);
            break;
          }
          case 18: {
            awardDataVec_.AddEntriesFrom(ref input, _repeated_awardDataVec_codec);
            break;
          }
          case 24: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 33: {
            LineMult = input.ReadDouble();
            break;
          }
          case 41: {
            LineWin = input.ReadDouble();
            break;
          }
          case 49: {
            WheelOdd = input.ReadDouble();
            break;
          }
          case 57: {
            WheelMult = input.ReadDouble();
            break;
          }
          case 65: {
            WheelWin = input.ReadDouble();
            break;
          }
          case 73: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 82:
          case 81: {
            multShowArray_.AddEntriesFrom(ref input, _repeated_multShowArray_codec);
            break;
          }
          case 90:
          case 88: {
            lightOnPos_.AddEntriesFrom(ref input, _repeated_lightOnPos_codec);
            break;
          }
          case 97: {
            Bet = input.ReadDouble();
            break;
          }
          case 104: {
            Extra = input.ReadBool();
            break;
          }
          case 114: {
            ShowIndex = input.ReadString();
            break;
          }
          case 121: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 128: {
            AckType = input.ReadInt32();
            break;
          }
          case 136: {
            IsBonus = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Fgp.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      col_ = other.col_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Col" field.</summary>
    public const int ColFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_col_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> col_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Col {
      get { return col_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!col_.Equals(other.col_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= col_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      col_.WriteTo(output, _repeated_col_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      col_.WriteTo(ref output, _repeated_col_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += col_.CalculateSize(_repeated_col_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      col_.Add(other.col_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            col_.AddEntriesFrom(input, _repeated_col_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            col_.AddEntriesFrom(ref input, _repeated_col_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardData : pb::IMessage<AwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardData> _parser = new pb::MessageParser<AwardData>(() => new AwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Fgp.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData(AwardData other) : this() {
      symbol_ = other.symbol_;
      count_ = other.count_;
      win_ = other.win_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData Clone() {
      return new AwardData(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private int symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 3;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol != 0) hash ^= Symbol.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Win != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Win != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Symbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Symbol);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardData other) {
      if (other == null) {
        return;
      }
      if (other.Symbol != 0) {
        Symbol = other.Symbol;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 25: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 25: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
