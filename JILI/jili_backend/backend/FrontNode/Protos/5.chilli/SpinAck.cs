// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Chilli {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhVKaWxpLlByb3RvY29scy5jaGlsbGkiqwIKB1Nw",
            "aW5BY2sSMwoJUGxhdGVEYXRhGAEgASgLMiAuSmlsaS5Qcm90b2NvbHMuY2hp",
            "bGxpLlBsYXRlRGF0YRJUChtBbGxGcmVlUGxhdGVEYXRhUGVyUm91bmRWZWMY",
            "AiADKAsyLy5KaWxpLlByb3RvY29scy5jaGlsbGkuQWxsRnJlZVBsYXRlRGF0",
            "YVBlclJvdW5kEhMKC0ZyZWVHYW1lV2luGAMgASgBEhAKCFRvdGFsV2luGAQg",
            "ASgBEhEKCUF3YXJkVHlwZRgFIAEoBRIRCglTaG93SW5kZXgYBiABKAkSEAoI",
            "Tm93TW9uZXkYByABKAESDwoHQWNrVHlwZRgIIAEoBRILCgNSVFAYCSABKAUS",
            "CwoDTElEGAogASgFEgsKA1JJRBgLIAEoBSKdAQoJUGxhdGVEYXRhEhAKCFBs",
            "YXRlVmVjGAEgAygFEjsKDUxpbmVBd2FyZEluZm8YAiABKAsyJC5KaWxpLlBy",
            "b3RvY29scy5jaGlsbGkuTGluZUF3YXJkSW5mbxJBChBTY2F0dGVyQXdhcmRJ",
            "bmZvGAMgASgLMicuSmlsaS5Qcm90b2NvbHMuY2hpbGxpLlNjYXR0ZXJBd2Fy",
            "ZEluZm8ivAEKGEFsbEZyZWVQbGF0ZURhdGFQZXJSb3VuZBI+ChBGcmVlUGxh",
            "dGVEYXRhVmVjGAEgAygLMiQuSmlsaS5Qcm90b2NvbHMuY2hpbGxpLkZyZWVQ",
            "bGF0ZURhdGESEwoLQ2hpbGxpQ291bnQYAiABKAUSHAoUVGhpc1JvdW5kQ2hp",
            "bGxpQ291bnQYAyABKAUSGwoTUmVtYWluRnJlZUdhbWVSb3VuZBgEIAEoBRIQ",
            "CghMb2dJbmRleBgFIAEoCSLKAQoNRnJlZVBsYXRlRGF0YRIQCghQbGF0ZVZl",
            "YxgBIAMoBRI7Cg1MaW5lQXdhcmRJbmZvGAIgASgLMiQuSmlsaS5Qcm90b2Nv",
            "bHMuY2hpbGxpLkxpbmVBd2FyZEluZm8SQQoQU2NhdHRlckF3YXJkSW5mbxgD",
            "IAEoCzInLkppbGkuUHJvdG9jb2xzLmNoaWxsaS5TY2F0dGVyQXdhcmRJbmZv",
            "EhAKCFBvc2l0aW9uGAQgASgFEhUKDVdpbGRMb2NrQ291bnQYBSABKAUiYQoN",
            "TGluZUF3YXJkSW5mbxI+ChBMaW5lQXdhcmREYXRhVmVjGAEgAygLMiQuSmls",
            "aS5Qcm90b2NvbHMuY2hpbGxpLkxpbmVBd2FyZERhdGESEAoIV2luTW9uZXkY",
            "AiABKAEiVAoNTGluZUF3YXJkRGF0YRIRCglMaW5lSW5kZXgYASABKAUSDgoG",
            "U3ltYm9sGAIgASgFEhMKC1N5bWJvbENvdW50GAMgASgFEgsKA1dpbhgEIAEo",
            "ASJ7ChBTY2F0dGVyQXdhcmRJbmZvEiwKB0dyaWRWZWMYASADKAsyGy5KaWxp",
            "LlByb3RvY29scy5jaGlsbGkuR3JpZBINCgVNb25leRgCIAEoARIVCg1GcmVl",
            "R2FtZVJvdW5kGAMgASgFEhMKC0NvbHVtbkNvdW50GAQgASgFIiMKBEdyaWQS",
            "DgoGQ29sdW1uGAEgASgFEgsKA1JvdxgCIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Chilli.SpinAck), global::Jili.Protocols.Chilli.SpinAck.Parser, new[]{ "PlateData", "AllFreePlateDataPerRoundVec", "FreeGameWin", "TotalWin", "AwardType", "ShowIndex", "NowMoney", "AckType", "RTP", "LID", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Chilli.PlateData), global::Jili.Protocols.Chilli.PlateData.Parser, new[]{ "PlateVec", "LineAwardInfo", "ScatterAwardInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Chilli.AllFreePlateDataPerRound), global::Jili.Protocols.Chilli.AllFreePlateDataPerRound.Parser, new[]{ "FreePlateDataVec", "ChilliCount", "ThisRoundChilliCount", "RemainFreeGameRound", "LogIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Chilli.FreePlateData), global::Jili.Protocols.Chilli.FreePlateData.Parser, new[]{ "PlateVec", "LineAwardInfo", "ScatterAwardInfo", "Position", "WildLockCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Chilli.LineAwardInfo), global::Jili.Protocols.Chilli.LineAwardInfo.Parser, new[]{ "LineAwardDataVec", "WinMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Chilli.LineAwardData), global::Jili.Protocols.Chilli.LineAwardData.Parser, new[]{ "LineIndex", "Symbol", "SymbolCount", "Win" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Chilli.ScatterAwardInfo), global::Jili.Protocols.Chilli.ScatterAwardInfo.Parser, new[]{ "GridVec", "Money", "FreeGameRound", "ColumnCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Chilli.Grid), global::Jili.Protocols.Chilli.Grid.Parser, new[]{ "Column", "Row" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Chilli.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      plateData_ = other.plateData_ != null ? other.plateData_.Clone() : null;
      allFreePlateDataPerRoundVec_ = other.allFreePlateDataPerRoundVec_.Clone();
      freeGameWin_ = other.freeGameWin_;
      totalWin_ = other.totalWin_;
      awardType_ = other.awardType_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "PlateData" field.</summary>
    public const int PlateDataFieldNumber = 1;
    private global::Jili.Protocols.Chilli.PlateData plateData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Chilli.PlateData PlateData {
      get { return plateData_; }
      set {
        plateData_ = value;
      }
    }

    /// <summary>Field number for the "AllFreePlateDataPerRoundVec" field.</summary>
    public const int AllFreePlateDataPerRoundVecFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Chilli.AllFreePlateDataPerRound> _repeated_allFreePlateDataPerRoundVec_codec
        = pb::FieldCodec.ForMessage(18, global::Jili.Protocols.Chilli.AllFreePlateDataPerRound.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Chilli.AllFreePlateDataPerRound> allFreePlateDataPerRoundVec_ = new pbc::RepeatedField<global::Jili.Protocols.Chilli.AllFreePlateDataPerRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Chilli.AllFreePlateDataPerRound> AllFreePlateDataPerRoundVec {
      get { return allFreePlateDataPerRoundVec_; }
    }

    /// <summary>Field number for the "FreeGameWin" field.</summary>
    public const int FreeGameWinFieldNumber = 3;
    private double freeGameWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeGameWin {
      get { return freeGameWin_; }
      set {
        freeGameWin_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 4;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "AwardType" field.</summary>
    public const int AwardTypeFieldNumber = 5;
    private int awardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardType {
      get { return awardType_; }
      set {
        awardType_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 6;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 7;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 8;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 9;
    private int rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 10;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 11;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlateData, other.PlateData)) return false;
      if(!allFreePlateDataPerRoundVec_.Equals(other.allFreePlateDataPerRoundVec_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeGameWin, other.FreeGameWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (AwardType != other.AwardType) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (RTP != other.RTP) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (plateData_ != null) hash ^= PlateData.GetHashCode();
      hash ^= allFreePlateDataPerRoundVec_.GetHashCode();
      if (FreeGameWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeGameWin);
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (AwardType != 0) hash ^= AwardType.GetHashCode();
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0) hash ^= RTP.GetHashCode();
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (plateData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlateData);
      }
      allFreePlateDataPerRoundVec_.WriteTo(output, _repeated_allFreePlateDataPerRoundVec_codec);
      if (FreeGameWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FreeGameWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AwardType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AckType);
      }
      if (RTP != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (plateData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlateData);
      }
      allFreePlateDataPerRoundVec_.WriteTo(ref output, _repeated_allFreePlateDataPerRoundVec_codec);
      if (FreeGameWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FreeGameWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AwardType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AckType);
      }
      if (RTP != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (plateData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlateData);
      }
      size += allFreePlateDataPerRoundVec_.CalculateSize(_repeated_allFreePlateDataPerRoundVec_codec);
      if (FreeGameWin != 0D) {
        size += 1 + 8;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (AwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardType);
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RTP);
      }
      if (LID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      if (other.plateData_ != null) {
        if (plateData_ == null) {
          PlateData = new global::Jili.Protocols.Chilli.PlateData();
        }
        PlateData.MergeFrom(other.PlateData);
      }
      allFreePlateDataPerRoundVec_.Add(other.allFreePlateDataPerRoundVec_);
      if (other.FreeGameWin != 0D) {
        FreeGameWin = other.FreeGameWin;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.AwardType != 0) {
        AwardType = other.AwardType;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (plateData_ == null) {
              PlateData = new global::Jili.Protocols.Chilli.PlateData();
            }
            input.ReadMessage(PlateData);
            break;
          }
          case 18: {
            allFreePlateDataPerRoundVec_.AddEntriesFrom(input, _repeated_allFreePlateDataPerRoundVec_codec);
            break;
          }
          case 25: {
            FreeGameWin = input.ReadDouble();
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 40: {
            AwardType = input.ReadInt32();
            break;
          }
          case 50: {
            ShowIndex = input.ReadString();
            break;
          }
          case 57: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 64: {
            AckType = input.ReadInt32();
            break;
          }
          case 72: {
            RTP = input.ReadInt32();
            break;
          }
          case 80: {
            LID = input.ReadInt32();
            break;
          }
          case 88: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (plateData_ == null) {
              PlateData = new global::Jili.Protocols.Chilli.PlateData();
            }
            input.ReadMessage(PlateData);
            break;
          }
          case 18: {
            allFreePlateDataPerRoundVec_.AddEntriesFrom(ref input, _repeated_allFreePlateDataPerRoundVec_codec);
            break;
          }
          case 25: {
            FreeGameWin = input.ReadDouble();
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 40: {
            AwardType = input.ReadInt32();
            break;
          }
          case 50: {
            ShowIndex = input.ReadString();
            break;
          }
          case 57: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 64: {
            AckType = input.ReadInt32();
            break;
          }
          case 72: {
            RTP = input.ReadInt32();
            break;
          }
          case 80: {
            LID = input.ReadInt32();
            break;
          }
          case 88: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlateData : pb::IMessage<PlateData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlateData> _parser = new pb::MessageParser<PlateData>(() => new PlateData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Chilli.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateData(PlateData other) : this() {
      plateVec_ = other.plateVec_.Clone();
      lineAwardInfo_ = other.lineAwardInfo_ != null ? other.lineAwardInfo_.Clone() : null;
      scatterAwardInfo_ = other.scatterAwardInfo_ != null ? other.scatterAwardInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateData Clone() {
      return new PlateData(this);
    }

    /// <summary>Field number for the "PlateVec" field.</summary>
    public const int PlateVecFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_plateVec_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> plateVec_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> PlateVec {
      get { return plateVec_; }
    }

    /// <summary>Field number for the "LineAwardInfo" field.</summary>
    public const int LineAwardInfoFieldNumber = 2;
    private global::Jili.Protocols.Chilli.LineAwardInfo lineAwardInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Chilli.LineAwardInfo LineAwardInfo {
      get { return lineAwardInfo_; }
      set {
        lineAwardInfo_ = value;
      }
    }

    /// <summary>Field number for the "ScatterAwardInfo" field.</summary>
    public const int ScatterAwardInfoFieldNumber = 3;
    private global::Jili.Protocols.Chilli.ScatterAwardInfo scatterAwardInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Chilli.ScatterAwardInfo ScatterAwardInfo {
      get { return scatterAwardInfo_; }
      set {
        scatterAwardInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateVec_.Equals(other.plateVec_)) return false;
      if (!object.Equals(LineAwardInfo, other.LineAwardInfo)) return false;
      if (!object.Equals(ScatterAwardInfo, other.ScatterAwardInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateVec_.GetHashCode();
      if (lineAwardInfo_ != null) hash ^= LineAwardInfo.GetHashCode();
      if (scatterAwardInfo_ != null) hash ^= ScatterAwardInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateVec_.WriteTo(output, _repeated_plateVec_codec);
      if (lineAwardInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LineAwardInfo);
      }
      if (scatterAwardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScatterAwardInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateVec_.WriteTo(ref output, _repeated_plateVec_codec);
      if (lineAwardInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LineAwardInfo);
      }
      if (scatterAwardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScatterAwardInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateVec_.CalculateSize(_repeated_plateVec_codec);
      if (lineAwardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LineAwardInfo);
      }
      if (scatterAwardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScatterAwardInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlateData other) {
      if (other == null) {
        return;
      }
      plateVec_.Add(other.plateVec_);
      if (other.lineAwardInfo_ != null) {
        if (lineAwardInfo_ == null) {
          LineAwardInfo = new global::Jili.Protocols.Chilli.LineAwardInfo();
        }
        LineAwardInfo.MergeFrom(other.LineAwardInfo);
      }
      if (other.scatterAwardInfo_ != null) {
        if (scatterAwardInfo_ == null) {
          ScatterAwardInfo = new global::Jili.Protocols.Chilli.ScatterAwardInfo();
        }
        ScatterAwardInfo.MergeFrom(other.ScatterAwardInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            plateVec_.AddEntriesFrom(input, _repeated_plateVec_codec);
            break;
          }
          case 18: {
            if (lineAwardInfo_ == null) {
              LineAwardInfo = new global::Jili.Protocols.Chilli.LineAwardInfo();
            }
            input.ReadMessage(LineAwardInfo);
            break;
          }
          case 26: {
            if (scatterAwardInfo_ == null) {
              ScatterAwardInfo = new global::Jili.Protocols.Chilli.ScatterAwardInfo();
            }
            input.ReadMessage(ScatterAwardInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            plateVec_.AddEntriesFrom(ref input, _repeated_plateVec_codec);
            break;
          }
          case 18: {
            if (lineAwardInfo_ == null) {
              LineAwardInfo = new global::Jili.Protocols.Chilli.LineAwardInfo();
            }
            input.ReadMessage(LineAwardInfo);
            break;
          }
          case 26: {
            if (scatterAwardInfo_ == null) {
              ScatterAwardInfo = new global::Jili.Protocols.Chilli.ScatterAwardInfo();
            }
            input.ReadMessage(ScatterAwardInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AllFreePlateDataPerRound : pb::IMessage<AllFreePlateDataPerRound>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AllFreePlateDataPerRound> _parser = new pb::MessageParser<AllFreePlateDataPerRound>(() => new AllFreePlateDataPerRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AllFreePlateDataPerRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Chilli.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AllFreePlateDataPerRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AllFreePlateDataPerRound(AllFreePlateDataPerRound other) : this() {
      freePlateDataVec_ = other.freePlateDataVec_.Clone();
      chilliCount_ = other.chilliCount_;
      thisRoundChilliCount_ = other.thisRoundChilliCount_;
      remainFreeGameRound_ = other.remainFreeGameRound_;
      logIndex_ = other.logIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AllFreePlateDataPerRound Clone() {
      return new AllFreePlateDataPerRound(this);
    }

    /// <summary>Field number for the "FreePlateDataVec" field.</summary>
    public const int FreePlateDataVecFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Chilli.FreePlateData> _repeated_freePlateDataVec_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Chilli.FreePlateData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Chilli.FreePlateData> freePlateDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Chilli.FreePlateData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Chilli.FreePlateData> FreePlateDataVec {
      get { return freePlateDataVec_; }
    }

    /// <summary>Field number for the "ChilliCount" field.</summary>
    public const int ChilliCountFieldNumber = 2;
    private int chilliCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChilliCount {
      get { return chilliCount_; }
      set {
        chilliCount_ = value;
      }
    }

    /// <summary>Field number for the "ThisRoundChilliCount" field.</summary>
    public const int ThisRoundChilliCountFieldNumber = 3;
    private int thisRoundChilliCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThisRoundChilliCount {
      get { return thisRoundChilliCount_; }
      set {
        thisRoundChilliCount_ = value;
      }
    }

    /// <summary>Field number for the "RemainFreeGameRound" field.</summary>
    public const int RemainFreeGameRoundFieldNumber = 4;
    private int remainFreeGameRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RemainFreeGameRound {
      get { return remainFreeGameRound_; }
      set {
        remainFreeGameRound_ = value;
      }
    }

    /// <summary>Field number for the "LogIndex" field.</summary>
    public const int LogIndexFieldNumber = 5;
    private string logIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LogIndex {
      get { return logIndex_; }
      set {
        logIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AllFreePlateDataPerRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AllFreePlateDataPerRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!freePlateDataVec_.Equals(other.freePlateDataVec_)) return false;
      if (ChilliCount != other.ChilliCount) return false;
      if (ThisRoundChilliCount != other.ThisRoundChilliCount) return false;
      if (RemainFreeGameRound != other.RemainFreeGameRound) return false;
      if (LogIndex != other.LogIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= freePlateDataVec_.GetHashCode();
      if (ChilliCount != 0) hash ^= ChilliCount.GetHashCode();
      if (ThisRoundChilliCount != 0) hash ^= ThisRoundChilliCount.GetHashCode();
      if (RemainFreeGameRound != 0) hash ^= RemainFreeGameRound.GetHashCode();
      if (LogIndex.Length != 0) hash ^= LogIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      freePlateDataVec_.WriteTo(output, _repeated_freePlateDataVec_codec);
      if (ChilliCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChilliCount);
      }
      if (ThisRoundChilliCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ThisRoundChilliCount);
      }
      if (RemainFreeGameRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainFreeGameRound);
      }
      if (LogIndex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LogIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      freePlateDataVec_.WriteTo(ref output, _repeated_freePlateDataVec_codec);
      if (ChilliCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChilliCount);
      }
      if (ThisRoundChilliCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ThisRoundChilliCount);
      }
      if (RemainFreeGameRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RemainFreeGameRound);
      }
      if (LogIndex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LogIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += freePlateDataVec_.CalculateSize(_repeated_freePlateDataVec_codec);
      if (ChilliCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChilliCount);
      }
      if (ThisRoundChilliCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThisRoundChilliCount);
      }
      if (RemainFreeGameRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainFreeGameRound);
      }
      if (LogIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AllFreePlateDataPerRound other) {
      if (other == null) {
        return;
      }
      freePlateDataVec_.Add(other.freePlateDataVec_);
      if (other.ChilliCount != 0) {
        ChilliCount = other.ChilliCount;
      }
      if (other.ThisRoundChilliCount != 0) {
        ThisRoundChilliCount = other.ThisRoundChilliCount;
      }
      if (other.RemainFreeGameRound != 0) {
        RemainFreeGameRound = other.RemainFreeGameRound;
      }
      if (other.LogIndex.Length != 0) {
        LogIndex = other.LogIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            freePlateDataVec_.AddEntriesFrom(input, _repeated_freePlateDataVec_codec);
            break;
          }
          case 16: {
            ChilliCount = input.ReadInt32();
            break;
          }
          case 24: {
            ThisRoundChilliCount = input.ReadInt32();
            break;
          }
          case 32: {
            RemainFreeGameRound = input.ReadInt32();
            break;
          }
          case 42: {
            LogIndex = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            freePlateDataVec_.AddEntriesFrom(ref input, _repeated_freePlateDataVec_codec);
            break;
          }
          case 16: {
            ChilliCount = input.ReadInt32();
            break;
          }
          case 24: {
            ThisRoundChilliCount = input.ReadInt32();
            break;
          }
          case 32: {
            RemainFreeGameRound = input.ReadInt32();
            break;
          }
          case 42: {
            LogIndex = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FreePlateData : pb::IMessage<FreePlateData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreePlateData> _parser = new pb::MessageParser<FreePlateData>(() => new FreePlateData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreePlateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Chilli.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreePlateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreePlateData(FreePlateData other) : this() {
      plateVec_ = other.plateVec_.Clone();
      lineAwardInfo_ = other.lineAwardInfo_ != null ? other.lineAwardInfo_.Clone() : null;
      scatterAwardInfo_ = other.scatterAwardInfo_ != null ? other.scatterAwardInfo_.Clone() : null;
      position_ = other.position_;
      wildLockCount_ = other.wildLockCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreePlateData Clone() {
      return new FreePlateData(this);
    }

    /// <summary>Field number for the "PlateVec" field.</summary>
    public const int PlateVecFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_plateVec_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> plateVec_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> PlateVec {
      get { return plateVec_; }
    }

    /// <summary>Field number for the "LineAwardInfo" field.</summary>
    public const int LineAwardInfoFieldNumber = 2;
    private global::Jili.Protocols.Chilli.LineAwardInfo lineAwardInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Chilli.LineAwardInfo LineAwardInfo {
      get { return lineAwardInfo_; }
      set {
        lineAwardInfo_ = value;
      }
    }

    /// <summary>Field number for the "ScatterAwardInfo" field.</summary>
    public const int ScatterAwardInfoFieldNumber = 3;
    private global::Jili.Protocols.Chilli.ScatterAwardInfo scatterAwardInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Chilli.ScatterAwardInfo ScatterAwardInfo {
      get { return scatterAwardInfo_; }
      set {
        scatterAwardInfo_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 4;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "WildLockCount" field.</summary>
    public const int WildLockCountFieldNumber = 5;
    private int wildLockCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WildLockCount {
      get { return wildLockCount_; }
      set {
        wildLockCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreePlateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreePlateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateVec_.Equals(other.plateVec_)) return false;
      if (!object.Equals(LineAwardInfo, other.LineAwardInfo)) return false;
      if (!object.Equals(ScatterAwardInfo, other.ScatterAwardInfo)) return false;
      if (Position != other.Position) return false;
      if (WildLockCount != other.WildLockCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateVec_.GetHashCode();
      if (lineAwardInfo_ != null) hash ^= LineAwardInfo.GetHashCode();
      if (scatterAwardInfo_ != null) hash ^= ScatterAwardInfo.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      if (WildLockCount != 0) hash ^= WildLockCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateVec_.WriteTo(output, _repeated_plateVec_codec);
      if (lineAwardInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LineAwardInfo);
      }
      if (scatterAwardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScatterAwardInfo);
      }
      if (Position != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Position);
      }
      if (WildLockCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WildLockCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateVec_.WriteTo(ref output, _repeated_plateVec_codec);
      if (lineAwardInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LineAwardInfo);
      }
      if (scatterAwardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ScatterAwardInfo);
      }
      if (Position != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Position);
      }
      if (WildLockCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WildLockCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateVec_.CalculateSize(_repeated_plateVec_codec);
      if (lineAwardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LineAwardInfo);
      }
      if (scatterAwardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ScatterAwardInfo);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (WildLockCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WildLockCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreePlateData other) {
      if (other == null) {
        return;
      }
      plateVec_.Add(other.plateVec_);
      if (other.lineAwardInfo_ != null) {
        if (lineAwardInfo_ == null) {
          LineAwardInfo = new global::Jili.Protocols.Chilli.LineAwardInfo();
        }
        LineAwardInfo.MergeFrom(other.LineAwardInfo);
      }
      if (other.scatterAwardInfo_ != null) {
        if (scatterAwardInfo_ == null) {
          ScatterAwardInfo = new global::Jili.Protocols.Chilli.ScatterAwardInfo();
        }
        ScatterAwardInfo.MergeFrom(other.ScatterAwardInfo);
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
      if (other.WildLockCount != 0) {
        WildLockCount = other.WildLockCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            plateVec_.AddEntriesFrom(input, _repeated_plateVec_codec);
            break;
          }
          case 18: {
            if (lineAwardInfo_ == null) {
              LineAwardInfo = new global::Jili.Protocols.Chilli.LineAwardInfo();
            }
            input.ReadMessage(LineAwardInfo);
            break;
          }
          case 26: {
            if (scatterAwardInfo_ == null) {
              ScatterAwardInfo = new global::Jili.Protocols.Chilli.ScatterAwardInfo();
            }
            input.ReadMessage(ScatterAwardInfo);
            break;
          }
          case 32: {
            Position = input.ReadInt32();
            break;
          }
          case 40: {
            WildLockCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            plateVec_.AddEntriesFrom(ref input, _repeated_plateVec_codec);
            break;
          }
          case 18: {
            if (lineAwardInfo_ == null) {
              LineAwardInfo = new global::Jili.Protocols.Chilli.LineAwardInfo();
            }
            input.ReadMessage(LineAwardInfo);
            break;
          }
          case 26: {
            if (scatterAwardInfo_ == null) {
              ScatterAwardInfo = new global::Jili.Protocols.Chilli.ScatterAwardInfo();
            }
            input.ReadMessage(ScatterAwardInfo);
            break;
          }
          case 32: {
            Position = input.ReadInt32();
            break;
          }
          case 40: {
            WildLockCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LineAwardInfo : pb::IMessage<LineAwardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LineAwardInfo> _parser = new pb::MessageParser<LineAwardInfo>(() => new LineAwardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LineAwardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Chilli.SpinAckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LineAwardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LineAwardInfo(LineAwardInfo other) : this() {
      lineAwardDataVec_ = other.lineAwardDataVec_.Clone();
      winMoney_ = other.winMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LineAwardInfo Clone() {
      return new LineAwardInfo(this);
    }

    /// <summary>Field number for the "LineAwardDataVec" field.</summary>
    public const int LineAwardDataVecFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Chilli.LineAwardData> _repeated_lineAwardDataVec_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Chilli.LineAwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Chilli.LineAwardData> lineAwardDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Chilli.LineAwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Chilli.LineAwardData> LineAwardDataVec {
      get { return lineAwardDataVec_; }
    }

    /// <summary>Field number for the "WinMoney" field.</summary>
    public const int WinMoneyFieldNumber = 2;
    private double winMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WinMoney {
      get { return winMoney_; }
      set {
        winMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LineAwardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LineAwardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!lineAwardDataVec_.Equals(other.lineAwardDataVec_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WinMoney, other.WinMoney)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= lineAwardDataVec_.GetHashCode();
      if (WinMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WinMoney);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      lineAwardDataVec_.WriteTo(output, _repeated_lineAwardDataVec_codec);
      if (WinMoney != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(WinMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      lineAwardDataVec_.WriteTo(ref output, _repeated_lineAwardDataVec_codec);
      if (WinMoney != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(WinMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += lineAwardDataVec_.CalculateSize(_repeated_lineAwardDataVec_codec);
      if (WinMoney != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LineAwardInfo other) {
      if (other == null) {
        return;
      }
      lineAwardDataVec_.Add(other.lineAwardDataVec_);
      if (other.WinMoney != 0D) {
        WinMoney = other.WinMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            lineAwardDataVec_.AddEntriesFrom(input, _repeated_lineAwardDataVec_codec);
            break;
          }
          case 17: {
            WinMoney = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            lineAwardDataVec_.AddEntriesFrom(ref input, _repeated_lineAwardDataVec_codec);
            break;
          }
          case 17: {
            WinMoney = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class LineAwardData : pb::IMessage<LineAwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LineAwardData> _parser = new pb::MessageParser<LineAwardData>(() => new LineAwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LineAwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Chilli.SpinAckReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LineAwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LineAwardData(LineAwardData other) : this() {
      lineIndex_ = other.lineIndex_;
      symbol_ = other.symbol_;
      symbolCount_ = other.symbolCount_;
      win_ = other.win_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LineAwardData Clone() {
      return new LineAwardData(this);
    }

    /// <summary>Field number for the "LineIndex" field.</summary>
    public const int LineIndexFieldNumber = 1;
    private int lineIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LineIndex {
      get { return lineIndex_; }
      set {
        lineIndex_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private int symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "SymbolCount" field.</summary>
    public const int SymbolCountFieldNumber = 3;
    private int symbolCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SymbolCount {
      get { return symbolCount_; }
      set {
        symbolCount_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 4;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LineAwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LineAwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LineIndex != other.LineIndex) return false;
      if (Symbol != other.Symbol) return false;
      if (SymbolCount != other.SymbolCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (LineIndex != 0) hash ^= LineIndex.GetHashCode();
      if (Symbol != 0) hash ^= Symbol.GetHashCode();
      if (SymbolCount != 0) hash ^= SymbolCount.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LineIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LineIndex);
      }
      if (Symbol != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Symbol);
      }
      if (SymbolCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SymbolCount);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LineIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LineIndex);
      }
      if (Symbol != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Symbol);
      }
      if (SymbolCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SymbolCount);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (LineIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineIndex);
      }
      if (Symbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Symbol);
      }
      if (SymbolCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SymbolCount);
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LineAwardData other) {
      if (other == null) {
        return;
      }
      if (other.LineIndex != 0) {
        LineIndex = other.LineIndex;
      }
      if (other.Symbol != 0) {
        Symbol = other.Symbol;
      }
      if (other.SymbolCount != 0) {
        SymbolCount = other.SymbolCount;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LineIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Symbol = input.ReadInt32();
            break;
          }
          case 24: {
            SymbolCount = input.ReadInt32();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LineIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Symbol = input.ReadInt32();
            break;
          }
          case 24: {
            SymbolCount = input.ReadInt32();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ScatterAwardInfo : pb::IMessage<ScatterAwardInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ScatterAwardInfo> _parser = new pb::MessageParser<ScatterAwardInfo>(() => new ScatterAwardInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ScatterAwardInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Chilli.SpinAckReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ScatterAwardInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ScatterAwardInfo(ScatterAwardInfo other) : this() {
      gridVec_ = other.gridVec_.Clone();
      money_ = other.money_;
      freeGameRound_ = other.freeGameRound_;
      columnCount_ = other.columnCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ScatterAwardInfo Clone() {
      return new ScatterAwardInfo(this);
    }

    /// <summary>Field number for the "GridVec" field.</summary>
    public const int GridVecFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Chilli.Grid> _repeated_gridVec_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Chilli.Grid.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Chilli.Grid> gridVec_ = new pbc::RepeatedField<global::Jili.Protocols.Chilli.Grid>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Chilli.Grid> GridVec {
      get { return gridVec_; }
    }

    /// <summary>Field number for the "Money" field.</summary>
    public const int MoneyFieldNumber = 2;
    private double money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "FreeGameRound" field.</summary>
    public const int FreeGameRoundFieldNumber = 3;
    private int freeGameRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeGameRound {
      get { return freeGameRound_; }
      set {
        freeGameRound_ = value;
      }
    }

    /// <summary>Field number for the "ColumnCount" field.</summary>
    public const int ColumnCountFieldNumber = 4;
    private int columnCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ColumnCount {
      get { return columnCount_; }
      set {
        columnCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ScatterAwardInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ScatterAwardInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gridVec_.Equals(other.gridVec_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Money, other.Money)) return false;
      if (FreeGameRound != other.FreeGameRound) return false;
      if (ColumnCount != other.ColumnCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gridVec_.GetHashCode();
      if (Money != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Money);
      if (FreeGameRound != 0) hash ^= FreeGameRound.GetHashCode();
      if (ColumnCount != 0) hash ^= ColumnCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gridVec_.WriteTo(output, _repeated_gridVec_codec);
      if (Money != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Money);
      }
      if (FreeGameRound != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeGameRound);
      }
      if (ColumnCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ColumnCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gridVec_.WriteTo(ref output, _repeated_gridVec_codec);
      if (Money != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Money);
      }
      if (FreeGameRound != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FreeGameRound);
      }
      if (ColumnCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ColumnCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += gridVec_.CalculateSize(_repeated_gridVec_codec);
      if (Money != 0D) {
        size += 1 + 8;
      }
      if (FreeGameRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeGameRound);
      }
      if (ColumnCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ScatterAwardInfo other) {
      if (other == null) {
        return;
      }
      gridVec_.Add(other.gridVec_);
      if (other.Money != 0D) {
        Money = other.Money;
      }
      if (other.FreeGameRound != 0) {
        FreeGameRound = other.FreeGameRound;
      }
      if (other.ColumnCount != 0) {
        ColumnCount = other.ColumnCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gridVec_.AddEntriesFrom(input, _repeated_gridVec_codec);
            break;
          }
          case 17: {
            Money = input.ReadDouble();
            break;
          }
          case 24: {
            FreeGameRound = input.ReadInt32();
            break;
          }
          case 32: {
            ColumnCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gridVec_.AddEntriesFrom(ref input, _repeated_gridVec_codec);
            break;
          }
          case 17: {
            Money = input.ReadDouble();
            break;
          }
          case 24: {
            FreeGameRound = input.ReadInt32();
            break;
          }
          case 32: {
            ColumnCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Grid : pb::IMessage<Grid>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Grid> _parser = new pb::MessageParser<Grid>(() => new Grid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Grid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Chilli.SpinAckReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Grid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Grid(Grid other) : this() {
      column_ = other.column_;
      row_ = other.row_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Grid Clone() {
      return new Grid(this);
    }

    /// <summary>Field number for the "Column" field.</summary>
    public const int ColumnFieldNumber = 1;
    private int column_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Column {
      get { return column_; }
      set {
        column_ = value;
      }
    }

    /// <summary>Field number for the "Row" field.</summary>
    public const int RowFieldNumber = 2;
    private int row_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Grid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Grid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Column != other.Column) return false;
      if (Row != other.Row) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Column != 0) hash ^= Column.GetHashCode();
      if (Row != 0) hash ^= Row.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Column != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Column);
      }
      if (Row != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Row);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Column != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Column);
      }
      if (Row != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Row);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Column != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Column);
      }
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Grid other) {
      if (other == null) {
        return;
      }
      if (other.Column != 0) {
        Column = other.Column;
      }
      if (other.Row != 0) {
        Row = other.Row;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Column = input.ReadInt32();
            break;
          }
          case 16: {
            Row = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Column = input.ReadInt32();
            break;
          }
          case 16: {
            Row = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
