// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Witch {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhRKaWxpLlByb3RvY29scy53aXRjaCLdAQoHU3Bp",
            "bkFjaxIxCghNYWluR2FtZRgBIAEoCzIfLkppbGkuUHJvdG9jb2xzLndpdGNo",
            "LlJvdW5kSW5mbxIwCghGcmVlR2FtZRgCIAEoCzIeLkppbGkuUHJvdG9jb2xz",
            "LndpdGNoLkZyZWVEYXRhEhAKCFRvdGFsV2luGAMgASgBEhEKCVNob3dJbmRl",
            "eBgEIAEoCRIQCghOb3dNb25leRgFIAEoARIPCgdBY2tUeXBlGAYgASgFEgsK",
            "A1JUUBgHIAEoARILCgNMSUQYCCABKAUSCwoDUklEGAkgASgFIo0CCglSb3Vu",
            "ZEluZm8SNQoKUGxhdGVRdWV1ZRgBIAMoCzIhLkppbGkuUHJvdG9jb2xzLndp",
            "dGNoLlNpbmdsZVBsYXRlEhAKCFJvdW5kV2luGAIgASgBEhQKDFJvdW5kTXVs",
            "U2hvdxgDIAMoARIQCghSb3VuZE11bBgEIAEoARIWCg5FbGltaW5hdGVDb3Vu",
            "dBgFIAEoBRIVCg1Bd2FyZFR5cGVGbGFnGAYgASgFEhQKDFNjYXR0ZXJDb3Vu",
            "dBgHIAEoBRISCgpTY2F0dGVyV2luGAggASgBEg8KB0dldEZyZWUYCSABKAgS",
            "FAoMR2V0RnJlZVJvdW5kGAogASgFEg8KB01heEZsYWcYCyABKAgiVAoIRnJl",
            "ZURhdGESMgoJRnJlZVF1ZXVlGAEgAygLMh8uSmlsaS5Qcm90b2NvbHMud2l0",
            "Y2guUm91bmRJbmZvEhQKDEZyZWVUb3RhbFdpbhgCIAEoASLiAQoLU2luZ2xl",
            "UGxhdGUSLAoGU3ltYm9sGAEgAygLMhwuSmlsaS5Qcm90b2NvbHMud2l0Y2gu",
            "Q29sdW1uEhEKCVNpbmdsZVdpbhgCIAEoARI1CgxBd2FyZERhdGFWZWMYAyAD",
            "KAsyHy5KaWxpLlByb3RvY29scy53aXRjaC5Bd2FyZERhdGESEwoLQ3J5c3Rh",
            "bFR5cGUYBCABKAUSFQoNTmVlZEVsaW1pbmF0ZRgFIAEoCBIvCglFbGltaW5h",
            "dGUYBiADKAsyHC5KaWxpLlByb3RvY29scy53aXRjaC5Db2x1bW4iFQoGQ29s",
            "dW1uEgsKA1JvdxgBIAMoBSI3CglBd2FyZERhdGESDgoGU3ltYm9sGAEgASgF",
            "Eg0KBUNvdW50GAIgASgFEgsKA1dpbhgDIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Witch.SpinAck), global::Jili.Protocols.Witch.SpinAck.Parser, new[]{ "MainGame", "FreeGame", "TotalWin", "ShowIndex", "NowMoney", "AckType", "RTP", "LID", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Witch.RoundInfo), global::Jili.Protocols.Witch.RoundInfo.Parser, new[]{ "PlateQueue", "RoundWin", "RoundMulShow", "RoundMul", "EliminateCount", "AwardTypeFlag", "ScatterCount", "ScatterWin", "GetFree", "GetFreeRound", "MaxFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Witch.FreeData), global::Jili.Protocols.Witch.FreeData.Parser, new[]{ "FreeQueue", "FreeTotalWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Witch.SinglePlate), global::Jili.Protocols.Witch.SinglePlate.Parser, new[]{ "Symbol", "SingleWin", "AwardDataVec", "CrystalType", "NeedEliminate", "Eliminate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Witch.Column), global::Jili.Protocols.Witch.Column.Parser, new[]{ "Row" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Witch.AwardData), global::Jili.Protocols.Witch.AwardData.Parser, new[]{ "Symbol", "Count", "Win" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Witch.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      mainGame_ = other.mainGame_ != null ? other.mainGame_.Clone() : null;
      freeGame_ = other.freeGame_ != null ? other.freeGame_.Clone() : null;
      totalWin_ = other.totalWin_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "MainGame" field.</summary>
    public const int MainGameFieldNumber = 1;
    private global::Jili.Protocols.Witch.RoundInfo mainGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Witch.RoundInfo MainGame {
      get { return mainGame_; }
      set {
        mainGame_ = value;
      }
    }

    /// <summary>Field number for the "FreeGame" field.</summary>
    public const int FreeGameFieldNumber = 2;
    private global::Jili.Protocols.Witch.FreeData freeGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Witch.FreeData FreeGame {
      get { return freeGame_; }
      set {
        freeGame_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 3;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 4;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 5;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 6;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 7;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 8;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 9;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MainGame, other.MainGame)) return false;
      if (!object.Equals(FreeGame, other.FreeGame)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (mainGame_ != null) hash ^= MainGame.GetHashCode();
      if (freeGame_ != null) hash ^= FreeGame.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (mainGame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MainGame);
      }
      if (freeGame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FreeGame);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (mainGame_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MainGame);
      }
      if (freeGame_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FreeGame);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (mainGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MainGame);
      }
      if (freeGame_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeGame);
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (LID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      if (other.mainGame_ != null) {
        if (mainGame_ == null) {
          MainGame = new global::Jili.Protocols.Witch.RoundInfo();
        }
        MainGame.MergeFrom(other.MainGame);
      }
      if (other.freeGame_ != null) {
        if (freeGame_ == null) {
          FreeGame = new global::Jili.Protocols.Witch.FreeData();
        }
        FreeGame.MergeFrom(other.FreeGame);
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (mainGame_ == null) {
              MainGame = new global::Jili.Protocols.Witch.RoundInfo();
            }
            input.ReadMessage(MainGame);
            break;
          }
          case 18: {
            if (freeGame_ == null) {
              FreeGame = new global::Jili.Protocols.Witch.FreeData();
            }
            input.ReadMessage(FreeGame);
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 34: {
            ShowIndex = input.ReadString();
            break;
          }
          case 41: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 48: {
            AckType = input.ReadInt32();
            break;
          }
          case 57: {
            RTP = input.ReadDouble();
            break;
          }
          case 64: {
            LID = input.ReadInt32();
            break;
          }
          case 72: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (mainGame_ == null) {
              MainGame = new global::Jili.Protocols.Witch.RoundInfo();
            }
            input.ReadMessage(MainGame);
            break;
          }
          case 18: {
            if (freeGame_ == null) {
              FreeGame = new global::Jili.Protocols.Witch.FreeData();
            }
            input.ReadMessage(FreeGame);
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 34: {
            ShowIndex = input.ReadString();
            break;
          }
          case 41: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 48: {
            AckType = input.ReadInt32();
            break;
          }
          case 57: {
            RTP = input.ReadDouble();
            break;
          }
          case 64: {
            LID = input.ReadInt32();
            break;
          }
          case 72: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RoundInfo : pb::IMessage<RoundInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundInfo> _parser = new pb::MessageParser<RoundInfo>(() => new RoundInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoundInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Witch.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo(RoundInfo other) : this() {
      plateQueue_ = other.plateQueue_.Clone();
      roundWin_ = other.roundWin_;
      roundMulShow_ = other.roundMulShow_.Clone();
      roundMul_ = other.roundMul_;
      eliminateCount_ = other.eliminateCount_;
      awardTypeFlag_ = other.awardTypeFlag_;
      scatterCount_ = other.scatterCount_;
      scatterWin_ = other.scatterWin_;
      getFree_ = other.getFree_;
      getFreeRound_ = other.getFreeRound_;
      maxFlag_ = other.maxFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo Clone() {
      return new RoundInfo(this);
    }

    /// <summary>Field number for the "PlateQueue" field.</summary>
    public const int PlateQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Witch.SinglePlate> _repeated_plateQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Witch.SinglePlate.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Witch.SinglePlate> plateQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Witch.SinglePlate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Witch.SinglePlate> PlateQueue {
      get { return plateQueue_; }
    }

    /// <summary>Field number for the "RoundWin" field.</summary>
    public const int RoundWinFieldNumber = 2;
    private double roundWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RoundWin {
      get { return roundWin_; }
      set {
        roundWin_ = value;
      }
    }

    /// <summary>Field number for the "RoundMulShow" field.</summary>
    public const int RoundMulShowFieldNumber = 3;
    private static readonly pb::FieldCodec<double> _repeated_roundMulShow_codec
        = pb::FieldCodec.ForDouble(26);
    private readonly pbc::RepeatedField<double> roundMulShow_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> RoundMulShow {
      get { return roundMulShow_; }
    }

    /// <summary>Field number for the "RoundMul" field.</summary>
    public const int RoundMulFieldNumber = 4;
    private double roundMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RoundMul {
      get { return roundMul_; }
      set {
        roundMul_ = value;
      }
    }

    /// <summary>Field number for the "EliminateCount" field.</summary>
    public const int EliminateCountFieldNumber = 5;
    private int eliminateCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EliminateCount {
      get { return eliminateCount_; }
      set {
        eliminateCount_ = value;
      }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 6;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "ScatterCount" field.</summary>
    public const int ScatterCountFieldNumber = 7;
    private int scatterCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScatterCount {
      get { return scatterCount_; }
      set {
        scatterCount_ = value;
      }
    }

    /// <summary>Field number for the "ScatterWin" field.</summary>
    public const int ScatterWinFieldNumber = 8;
    private double scatterWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ScatterWin {
      get { return scatterWin_; }
      set {
        scatterWin_ = value;
      }
    }

    /// <summary>Field number for the "GetFree" field.</summary>
    public const int GetFreeFieldNumber = 9;
    private bool getFree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GetFree {
      get { return getFree_; }
      set {
        getFree_ = value;
      }
    }

    /// <summary>Field number for the "GetFreeRound" field.</summary>
    public const int GetFreeRoundFieldNumber = 10;
    private int getFreeRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GetFreeRound {
      get { return getFreeRound_; }
      set {
        getFreeRound_ = value;
      }
    }

    /// <summary>Field number for the "MaxFlag" field.</summary>
    public const int MaxFlagFieldNumber = 11;
    private bool maxFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MaxFlag {
      get { return maxFlag_; }
      set {
        maxFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoundInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoundInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateQueue_.Equals(other.plateQueue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RoundWin, other.RoundWin)) return false;
      if(!roundMulShow_.Equals(other.roundMulShow_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RoundMul, other.RoundMul)) return false;
      if (EliminateCount != other.EliminateCount) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (ScatterCount != other.ScatterCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ScatterWin, other.ScatterWin)) return false;
      if (GetFree != other.GetFree) return false;
      if (GetFreeRound != other.GetFreeRound) return false;
      if (MaxFlag != other.MaxFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateQueue_.GetHashCode();
      if (RoundWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RoundWin);
      hash ^= roundMulShow_.GetHashCode();
      if (RoundMul != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RoundMul);
      if (EliminateCount != 0) hash ^= EliminateCount.GetHashCode();
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (ScatterCount != 0) hash ^= ScatterCount.GetHashCode();
      if (ScatterWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ScatterWin);
      if (GetFree != false) hash ^= GetFree.GetHashCode();
      if (GetFreeRound != 0) hash ^= GetFreeRound.GetHashCode();
      if (MaxFlag != false) hash ^= MaxFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateQueue_.WriteTo(output, _repeated_plateQueue_codec);
      if (RoundWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RoundWin);
      }
      roundMulShow_.WriteTo(output, _repeated_roundMulShow_codec);
      if (RoundMul != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RoundMul);
      }
      if (EliminateCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EliminateCount);
      }
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AwardTypeFlag);
      }
      if (ScatterCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ScatterCount);
      }
      if (ScatterWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ScatterWin);
      }
      if (GetFree != false) {
        output.WriteRawTag(72);
        output.WriteBool(GetFree);
      }
      if (GetFreeRound != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GetFreeRound);
      }
      if (MaxFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateQueue_.WriteTo(ref output, _repeated_plateQueue_codec);
      if (RoundWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(RoundWin);
      }
      roundMulShow_.WriteTo(ref output, _repeated_roundMulShow_codec);
      if (RoundMul != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(RoundMul);
      }
      if (EliminateCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EliminateCount);
      }
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AwardTypeFlag);
      }
      if (ScatterCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ScatterCount);
      }
      if (ScatterWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(ScatterWin);
      }
      if (GetFree != false) {
        output.WriteRawTag(72);
        output.WriteBool(GetFree);
      }
      if (GetFreeRound != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GetFreeRound);
      }
      if (MaxFlag != false) {
        output.WriteRawTag(88);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateQueue_.CalculateSize(_repeated_plateQueue_codec);
      if (RoundWin != 0D) {
        size += 1 + 8;
      }
      size += roundMulShow_.CalculateSize(_repeated_roundMulShow_codec);
      if (RoundMul != 0D) {
        size += 1 + 8;
      }
      if (EliminateCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EliminateCount);
      }
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (ScatterCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScatterCount);
      }
      if (ScatterWin != 0D) {
        size += 1 + 8;
      }
      if (GetFree != false) {
        size += 1 + 1;
      }
      if (GetFreeRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetFreeRound);
      }
      if (MaxFlag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoundInfo other) {
      if (other == null) {
        return;
      }
      plateQueue_.Add(other.plateQueue_);
      if (other.RoundWin != 0D) {
        RoundWin = other.RoundWin;
      }
      roundMulShow_.Add(other.roundMulShow_);
      if (other.RoundMul != 0D) {
        RoundMul = other.RoundMul;
      }
      if (other.EliminateCount != 0) {
        EliminateCount = other.EliminateCount;
      }
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.ScatterCount != 0) {
        ScatterCount = other.ScatterCount;
      }
      if (other.ScatterWin != 0D) {
        ScatterWin = other.ScatterWin;
      }
      if (other.GetFree != false) {
        GetFree = other.GetFree;
      }
      if (other.GetFreeRound != 0) {
        GetFreeRound = other.GetFreeRound;
      }
      if (other.MaxFlag != false) {
        MaxFlag = other.MaxFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateQueue_.AddEntriesFrom(input, _repeated_plateQueue_codec);
            break;
          }
          case 17: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 26:
          case 25: {
            roundMulShow_.AddEntriesFrom(input, _repeated_roundMulShow_codec);
            break;
          }
          case 33: {
            RoundMul = input.ReadDouble();
            break;
          }
          case 40: {
            EliminateCount = input.ReadInt32();
            break;
          }
          case 48: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 56: {
            ScatterCount = input.ReadInt32();
            break;
          }
          case 65: {
            ScatterWin = input.ReadDouble();
            break;
          }
          case 72: {
            GetFree = input.ReadBool();
            break;
          }
          case 80: {
            GetFreeRound = input.ReadInt32();
            break;
          }
          case 88: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateQueue_.AddEntriesFrom(ref input, _repeated_plateQueue_codec);
            break;
          }
          case 17: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 26:
          case 25: {
            roundMulShow_.AddEntriesFrom(ref input, _repeated_roundMulShow_codec);
            break;
          }
          case 33: {
            RoundMul = input.ReadDouble();
            break;
          }
          case 40: {
            EliminateCount = input.ReadInt32();
            break;
          }
          case 48: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 56: {
            ScatterCount = input.ReadInt32();
            break;
          }
          case 65: {
            ScatterWin = input.ReadDouble();
            break;
          }
          case 72: {
            GetFree = input.ReadBool();
            break;
          }
          case 80: {
            GetFreeRound = input.ReadInt32();
            break;
          }
          case 88: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FreeData : pb::IMessage<FreeData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeData> _parser = new pb::MessageParser<FreeData>(() => new FreeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Witch.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeData(FreeData other) : this() {
      freeQueue_ = other.freeQueue_.Clone();
      freeTotalWin_ = other.freeTotalWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeData Clone() {
      return new FreeData(this);
    }

    /// <summary>Field number for the "FreeQueue" field.</summary>
    public const int FreeQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Witch.RoundInfo> _repeated_freeQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Witch.RoundInfo.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Witch.RoundInfo> freeQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Witch.RoundInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Witch.RoundInfo> FreeQueue {
      get { return freeQueue_; }
    }

    /// <summary>Field number for the "FreeTotalWin" field.</summary>
    public const int FreeTotalWinFieldNumber = 2;
    private double freeTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeTotalWin {
      get { return freeTotalWin_; }
      set {
        freeTotalWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!freeQueue_.Equals(other.freeQueue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeTotalWin, other.FreeTotalWin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= freeQueue_.GetHashCode();
      if (FreeTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeTotalWin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      freeQueue_.WriteTo(output, _repeated_freeQueue_codec);
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      freeQueue_.WriteTo(ref output, _repeated_freeQueue_codec);
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += freeQueue_.CalculateSize(_repeated_freeQueue_codec);
      if (FreeTotalWin != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeData other) {
      if (other == null) {
        return;
      }
      freeQueue_.Add(other.freeQueue_);
      if (other.FreeTotalWin != 0D) {
        FreeTotalWin = other.FreeTotalWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            freeQueue_.AddEntriesFrom(input, _repeated_freeQueue_codec);
            break;
          }
          case 17: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            freeQueue_.AddEntriesFrom(ref input, _repeated_freeQueue_codec);
            break;
          }
          case 17: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SinglePlate : pb::IMessage<SinglePlate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SinglePlate> _parser = new pb::MessageParser<SinglePlate>(() => new SinglePlate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SinglePlate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Witch.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SinglePlate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SinglePlate(SinglePlate other) : this() {
      symbol_ = other.symbol_.Clone();
      singleWin_ = other.singleWin_;
      awardDataVec_ = other.awardDataVec_.Clone();
      crystalType_ = other.crystalType_;
      needEliminate_ = other.needEliminate_;
      eliminate_ = other.eliminate_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SinglePlate Clone() {
      return new SinglePlate(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Witch.Column> _repeated_symbol_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Witch.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Witch.Column> symbol_ = new pbc::RepeatedField<global::Jili.Protocols.Witch.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Witch.Column> Symbol {
      get { return symbol_; }
    }

    /// <summary>Field number for the "SingleWin" field.</summary>
    public const int SingleWinFieldNumber = 2;
    private double singleWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SingleWin {
      get { return singleWin_; }
      set {
        singleWin_ = value;
      }
    }

    /// <summary>Field number for the "AwardDataVec" field.</summary>
    public const int AwardDataVecFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Witch.AwardData> _repeated_awardDataVec_codec
        = pb::FieldCodec.ForMessage(26, global::Jili.Protocols.Witch.AwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Witch.AwardData> awardDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Witch.AwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Witch.AwardData> AwardDataVec {
      get { return awardDataVec_; }
    }

    /// <summary>Field number for the "CrystalType" field.</summary>
    public const int CrystalTypeFieldNumber = 4;
    private int crystalType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CrystalType {
      get { return crystalType_; }
      set {
        crystalType_ = value;
      }
    }

    /// <summary>Field number for the "NeedEliminate" field.</summary>
    public const int NeedEliminateFieldNumber = 5;
    private bool needEliminate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NeedEliminate {
      get { return needEliminate_; }
      set {
        needEliminate_ = value;
      }
    }

    /// <summary>Field number for the "Eliminate" field.</summary>
    public const int EliminateFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Witch.Column> _repeated_eliminate_codec
        = pb::FieldCodec.ForMessage(50, global::Jili.Protocols.Witch.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Witch.Column> eliminate_ = new pbc::RepeatedField<global::Jili.Protocols.Witch.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Witch.Column> Eliminate {
      get { return eliminate_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SinglePlate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SinglePlate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbol_.Equals(other.symbol_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SingleWin, other.SingleWin)) return false;
      if(!awardDataVec_.Equals(other.awardDataVec_)) return false;
      if (CrystalType != other.CrystalType) return false;
      if (NeedEliminate != other.NeedEliminate) return false;
      if(!eliminate_.Equals(other.eliminate_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbol_.GetHashCode();
      if (SingleWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SingleWin);
      hash ^= awardDataVec_.GetHashCode();
      if (CrystalType != 0) hash ^= CrystalType.GetHashCode();
      if (NeedEliminate != false) hash ^= NeedEliminate.GetHashCode();
      hash ^= eliminate_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbol_.WriteTo(output, _repeated_symbol_codec);
      if (SingleWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SingleWin);
      }
      awardDataVec_.WriteTo(output, _repeated_awardDataVec_codec);
      if (CrystalType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CrystalType);
      }
      if (NeedEliminate != false) {
        output.WriteRawTag(40);
        output.WriteBool(NeedEliminate);
      }
      eliminate_.WriteTo(output, _repeated_eliminate_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbol_.WriteTo(ref output, _repeated_symbol_codec);
      if (SingleWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SingleWin);
      }
      awardDataVec_.WriteTo(ref output, _repeated_awardDataVec_codec);
      if (CrystalType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CrystalType);
      }
      if (NeedEliminate != false) {
        output.WriteRawTag(40);
        output.WriteBool(NeedEliminate);
      }
      eliminate_.WriteTo(ref output, _repeated_eliminate_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += symbol_.CalculateSize(_repeated_symbol_codec);
      if (SingleWin != 0D) {
        size += 1 + 8;
      }
      size += awardDataVec_.CalculateSize(_repeated_awardDataVec_codec);
      if (CrystalType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrystalType);
      }
      if (NeedEliminate != false) {
        size += 1 + 1;
      }
      size += eliminate_.CalculateSize(_repeated_eliminate_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SinglePlate other) {
      if (other == null) {
        return;
      }
      symbol_.Add(other.symbol_);
      if (other.SingleWin != 0D) {
        SingleWin = other.SingleWin;
      }
      awardDataVec_.Add(other.awardDataVec_);
      if (other.CrystalType != 0) {
        CrystalType = other.CrystalType;
      }
      if (other.NeedEliminate != false) {
        NeedEliminate = other.NeedEliminate;
      }
      eliminate_.Add(other.eliminate_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbol_.AddEntriesFrom(input, _repeated_symbol_codec);
            break;
          }
          case 17: {
            SingleWin = input.ReadDouble();
            break;
          }
          case 26: {
            awardDataVec_.AddEntriesFrom(input, _repeated_awardDataVec_codec);
            break;
          }
          case 32: {
            CrystalType = input.ReadInt32();
            break;
          }
          case 40: {
            NeedEliminate = input.ReadBool();
            break;
          }
          case 50: {
            eliminate_.AddEntriesFrom(input, _repeated_eliminate_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbol_.AddEntriesFrom(ref input, _repeated_symbol_codec);
            break;
          }
          case 17: {
            SingleWin = input.ReadDouble();
            break;
          }
          case 26: {
            awardDataVec_.AddEntriesFrom(ref input, _repeated_awardDataVec_codec);
            break;
          }
          case 32: {
            CrystalType = input.ReadInt32();
            break;
          }
          case 40: {
            NeedEliminate = input.ReadBool();
            break;
          }
          case 50: {
            eliminate_.AddEntriesFrom(ref input, _repeated_eliminate_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Witch.SpinAckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      row_ = other.row_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Row" field.</summary>
    public const int RowFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_row_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> row_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Row {
      get { return row_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!row_.Equals(other.row_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= row_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      row_.WriteTo(output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      row_.WriteTo(ref output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += row_.CalculateSize(_repeated_row_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      row_.Add(other.row_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(input, _repeated_row_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(ref input, _repeated_row_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardData : pb::IMessage<AwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardData> _parser = new pb::MessageParser<AwardData>(() => new AwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Witch.SpinAckReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData(AwardData other) : this() {
      symbol_ = other.symbol_;
      count_ = other.count_;
      win_ = other.win_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData Clone() {
      return new AwardData(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private int symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 3;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol != 0) hash ^= Symbol.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Win != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Win != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Symbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Symbol);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardData other) {
      if (other == null) {
        return;
      }
      if (other.Symbol != 0) {
        Symbol = other.Symbol;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 25: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 25: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
