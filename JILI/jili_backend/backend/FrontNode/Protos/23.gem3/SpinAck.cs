// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Gem3 {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhNKaWxpLlByb3RvY29scy5nZW0zIoAFCgdTcGlu",
            "QWNrEi0KB0dlbUluZm8YASADKAsyHC5KaWxpLlByb3RvY29scy5nZW0zLkdl",
            "bURhdGESEwoLQ2hhbmdlUGxhdGUYAiABKAgSFwoPQ2hhbmdlUGxhdGVTaXpl",
            "GAMgASgFEhAKCEdldFdoZWVsGAQgASgIEhEKCVdoZWVsVHlwZRgFIAEoARIv",
            "CghGcmVlSW5mbxgGIAEoCzIdLkppbGkuUHJvdG9jb2xzLmdlbTMuRnJlZURh",
            "dGESMQoJQm9udXNJbmZvGAcgASgLMh4uSmlsaS5Qcm90b2NvbHMuZ2VtMy5C",
            "b251c0RhdGESMwoKQmV0TXVsSW5mbxgIIAEoCzIfLkppbGkuUHJvdG9jb2xz",
            "LmdlbTMuQmV0TXVsRGF0YRIuCglKUFdpbkluZm8YCSABKAsyGy5KaWxpLlBy",
            "b3RvY29scy5nZW0zLkpQRGF0YRIPCgdVcGNvdW50GAogASgFEhQKDFRvdGFs",
            "VXBjb3VudBgLIAEoBRIPCgdNYWlud2luGAwgASgBEhAKCFdoZWVsd2luGA0g",
            "ASgBEhAKCFRvdGFsV2luGA4gASgBEhEKCUF3YXJkVHlwZRgPIAEoBRIRCglT",
            "aG93SW5kZXgYECABKAkSEAoITm93TW9uZXkYESABKAESDwoHQWNrVHlwZRgS",
            "IAEoBRILCgNSVFAYEyABKAESCwoDTElEGBQgASgFEgsKA1JJRBgVIAEoBRIr",
            "CgZKUEluZm8YFiABKAsyGy5KaWxpLlByb3RvY29scy5nZW0zLkpQSW5mbxIx",
            "CgxKUEJlZm9yZUluZm8YFyABKAsyGy5KaWxpLlByb3RvY29scy5nZW0zLkpQ",
            "SW5mbyJsCglCb251c0RhdGESNAoKQm9udXNRdWV1ZRgBIAMoCzIgLkppbGku",
            "UHJvdG9jb2xzLmdlbTMuU2luZ2xlQm9udXMSEgoKQm9udXNDb3VudBgCIAEo",
            "BRIVCg1Cb251c1RvdGFsV2luGAMgASgBImwKC1NpbmdsZUJvbnVzEi4KCEJv",
            "bnVzR2VtGAEgASgLMhwuSmlsaS5Qcm90b2NvbHMuZ2VtMy5HZW1EYXRhEhMK",
            "C0JvbnVzU3ltYm9sGAIgASgFEhgKEEJvbnVzU3ltYm9sQ291bnQYAyABKAUi",
            "NAoKQmV0TXVsRGF0YRIOCgZCZXRNdWwYASABKAESFgoOQmV0TXVsVG90YWxX",
            "aW4YAiABKAEiLAoGSlBEYXRhEg4KBkpQVHlwZRgBIAEoBRISCgpKUFRvdGFs",
            "V2luGAIgASgBIlwKB0dlbURhdGESMgoKUGxhdGVRdWV1ZRgBIAMoCzIeLkpp",
            "bGkuUHJvdG9jb2xzLmdlbTMuU2luZ2xlR2VtEg0KBUNvdW50GAIgASgFEg4K",
            "BkdlbVdpbhgDIAEoASImCgZKUEluZm8SDAoEU2VsZhgBIAEoARIOCgZGcm9u",
            "dHMYAiADKAEiZQoIRnJlZURhdGESMgoJRnJlZVF1ZXVlGAEgAygLMh8uSmls",
            "aS5Qcm90b2NvbHMuZ2VtMy5TaW5nbGVGcmVlEg8KB0ZyZWVNdWwYAiABKAES",
            "FAoMRnJlZVRvdGFsV2luGAMgASgBInsKClNpbmdsZUZyZWUSMQoLRnJlZUdl",
            "bUluZm8YASABKAsyHC5KaWxpLlByb3RvY29scy5nZW0zLkdlbURhdGESFQoN",
            "RnJlZVNpbmdsZVdpbhgCIAEoARIRCglBd2FyZFR5cGUYAyABKAUSEAoITm93",
            "TW9uZXkYBCABKAEiiAEKCVNpbmdsZUdlbRITCgtQbGF0ZVN5bWJvbBgBIAMo",
            "CRIQCghQbGF0ZVRhZxgCIAMoCRIyCgpBd2FyZEluZm9zGAMgAygLMh4uSmls",
            "aS5Qcm90b2NvbHMuZ2VtMy5Bd2FyZERhdGESEQoJU2luZ2xlV2luGAQgASgB",
            "Eg0KBUhhc1VwGAUgASgIIkQKCUF3YXJkRGF0YRIOCgZTeW1ib2wYASABKAUS",
            "CwoDVGFnGAIgASgFEgsKA1dpbhgDIAEoARINCgVDb3VudBgEIAEoBWIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.SpinAck), global::Jili.Protocols.Gem3.SpinAck.Parser, new[]{ "GemInfo", "ChangePlate", "ChangePlateSize", "GetWheel", "WheelType", "FreeInfo", "BonusInfo", "BetMulInfo", "JPWinInfo", "Upcount", "TotalUpcount", "Mainwin", "Wheelwin", "TotalWin", "AwardType", "ShowIndex", "NowMoney", "AckType", "RTP", "LID", "RID", "JPInfo", "JPBeforeInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.BonusData), global::Jili.Protocols.Gem3.BonusData.Parser, new[]{ "BonusQueue", "BonusCount", "BonusTotalWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.SingleBonus), global::Jili.Protocols.Gem3.SingleBonus.Parser, new[]{ "BonusGem", "BonusSymbol", "BonusSymbolCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.BetMulData), global::Jili.Protocols.Gem3.BetMulData.Parser, new[]{ "BetMul", "BetMulTotalWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.JPData), global::Jili.Protocols.Gem3.JPData.Parser, new[]{ "JPType", "JPTotalWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.GemData), global::Jili.Protocols.Gem3.GemData.Parser, new[]{ "PlateQueue", "Count", "GemWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.JPInfo), global::Jili.Protocols.Gem3.JPInfo.Parser, new[]{ "Self", "Fronts" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.FreeData), global::Jili.Protocols.Gem3.FreeData.Parser, new[]{ "FreeQueue", "FreeMul", "FreeTotalWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.SingleFree), global::Jili.Protocols.Gem3.SingleFree.Parser, new[]{ "FreeGemInfo", "FreeSingleWin", "AwardType", "NowMoney" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.SingleGem), global::Jili.Protocols.Gem3.SingleGem.Parser, new[]{ "PlateSymbol", "PlateTag", "AwardInfos", "SingleWin", "HasUp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem3.AwardData), global::Jili.Protocols.Gem3.AwardData.Parser, new[]{ "Symbol", "Tag", "Win", "Count" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      gemInfo_ = other.gemInfo_.Clone();
      changePlate_ = other.changePlate_;
      changePlateSize_ = other.changePlateSize_;
      getWheel_ = other.getWheel_;
      wheelType_ = other.wheelType_;
      freeInfo_ = other.freeInfo_ != null ? other.freeInfo_.Clone() : null;
      bonusInfo_ = other.bonusInfo_ != null ? other.bonusInfo_.Clone() : null;
      betMulInfo_ = other.betMulInfo_ != null ? other.betMulInfo_.Clone() : null;
      jPWinInfo_ = other.jPWinInfo_ != null ? other.jPWinInfo_.Clone() : null;
      upcount_ = other.upcount_;
      totalUpcount_ = other.totalUpcount_;
      mainwin_ = other.mainwin_;
      wheelwin_ = other.wheelwin_;
      totalWin_ = other.totalWin_;
      awardType_ = other.awardType_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      jPInfo_ = other.jPInfo_ != null ? other.jPInfo_.Clone() : null;
      jPBeforeInfo_ = other.jPBeforeInfo_ != null ? other.jPBeforeInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "GemInfo" field.</summary>
    public const int GemInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem3.GemData> _repeated_gemInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Gem3.GemData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem3.GemData> gemInfo_ = new pbc::RepeatedField<global::Jili.Protocols.Gem3.GemData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem3.GemData> GemInfo {
      get { return gemInfo_; }
    }

    /// <summary>Field number for the "ChangePlate" field.</summary>
    public const int ChangePlateFieldNumber = 2;
    private bool changePlate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ChangePlate {
      get { return changePlate_; }
      set {
        changePlate_ = value;
      }
    }

    /// <summary>Field number for the "ChangePlateSize" field.</summary>
    public const int ChangePlateSizeFieldNumber = 3;
    private int changePlateSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChangePlateSize {
      get { return changePlateSize_; }
      set {
        changePlateSize_ = value;
      }
    }

    /// <summary>Field number for the "GetWheel" field.</summary>
    public const int GetWheelFieldNumber = 4;
    private bool getWheel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GetWheel {
      get { return getWheel_; }
      set {
        getWheel_ = value;
      }
    }

    /// <summary>Field number for the "WheelType" field.</summary>
    public const int WheelTypeFieldNumber = 5;
    private double wheelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WheelType {
      get { return wheelType_; }
      set {
        wheelType_ = value;
      }
    }

    /// <summary>Field number for the "FreeInfo" field.</summary>
    public const int FreeInfoFieldNumber = 6;
    private global::Jili.Protocols.Gem3.FreeData freeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Gem3.FreeData FreeInfo {
      get { return freeInfo_; }
      set {
        freeInfo_ = value;
      }
    }

    /// <summary>Field number for the "BonusInfo" field.</summary>
    public const int BonusInfoFieldNumber = 7;
    private global::Jili.Protocols.Gem3.BonusData bonusInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Gem3.BonusData BonusInfo {
      get { return bonusInfo_; }
      set {
        bonusInfo_ = value;
      }
    }

    /// <summary>Field number for the "BetMulInfo" field.</summary>
    public const int BetMulInfoFieldNumber = 8;
    private global::Jili.Protocols.Gem3.BetMulData betMulInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Gem3.BetMulData BetMulInfo {
      get { return betMulInfo_; }
      set {
        betMulInfo_ = value;
      }
    }

    /// <summary>Field number for the "JPWinInfo" field.</summary>
    public const int JPWinInfoFieldNumber = 9;
    private global::Jili.Protocols.Gem3.JPData jPWinInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Gem3.JPData JPWinInfo {
      get { return jPWinInfo_; }
      set {
        jPWinInfo_ = value;
      }
    }

    /// <summary>Field number for the "Upcount" field.</summary>
    public const int UpcountFieldNumber = 10;
    private int upcount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Upcount {
      get { return upcount_; }
      set {
        upcount_ = value;
      }
    }

    /// <summary>Field number for the "TotalUpcount" field.</summary>
    public const int TotalUpcountFieldNumber = 11;
    private int totalUpcount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalUpcount {
      get { return totalUpcount_; }
      set {
        totalUpcount_ = value;
      }
    }

    /// <summary>Field number for the "Mainwin" field.</summary>
    public const int MainwinFieldNumber = 12;
    private double mainwin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Mainwin {
      get { return mainwin_; }
      set {
        mainwin_ = value;
      }
    }

    /// <summary>Field number for the "Wheelwin" field.</summary>
    public const int WheelwinFieldNumber = 13;
    private double wheelwin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Wheelwin {
      get { return wheelwin_; }
      set {
        wheelwin_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 14;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "AwardType" field.</summary>
    public const int AwardTypeFieldNumber = 15;
    private int awardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardType {
      get { return awardType_; }
      set {
        awardType_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 16;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 17;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 18;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 19;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 20;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 21;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    /// <summary>Field number for the "JPInfo" field.</summary>
    public const int JPInfoFieldNumber = 22;
    private global::Jili.Protocols.Gem3.JPInfo jPInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Gem3.JPInfo JPInfo {
      get { return jPInfo_; }
      set {
        jPInfo_ = value;
      }
    }

    /// <summary>Field number for the "JPBeforeInfo" field.</summary>
    public const int JPBeforeInfoFieldNumber = 23;
    private global::Jili.Protocols.Gem3.JPInfo jPBeforeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Gem3.JPInfo JPBeforeInfo {
      get { return jPBeforeInfo_; }
      set {
        jPBeforeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!gemInfo_.Equals(other.gemInfo_)) return false;
      if (ChangePlate != other.ChangePlate) return false;
      if (ChangePlateSize != other.ChangePlateSize) return false;
      if (GetWheel != other.GetWheel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelType, other.WheelType)) return false;
      if (!object.Equals(FreeInfo, other.FreeInfo)) return false;
      if (!object.Equals(BonusInfo, other.BonusInfo)) return false;
      if (!object.Equals(BetMulInfo, other.BetMulInfo)) return false;
      if (!object.Equals(JPWinInfo, other.JPWinInfo)) return false;
      if (Upcount != other.Upcount) return false;
      if (TotalUpcount != other.TotalUpcount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mainwin, other.Mainwin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Wheelwin, other.Wheelwin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (AwardType != other.AwardType) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      if (!object.Equals(JPInfo, other.JPInfo)) return false;
      if (!object.Equals(JPBeforeInfo, other.JPBeforeInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= gemInfo_.GetHashCode();
      if (ChangePlate != false) hash ^= ChangePlate.GetHashCode();
      if (ChangePlateSize != 0) hash ^= ChangePlateSize.GetHashCode();
      if (GetWheel != false) hash ^= GetWheel.GetHashCode();
      if (WheelType != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelType);
      if (freeInfo_ != null) hash ^= FreeInfo.GetHashCode();
      if (bonusInfo_ != null) hash ^= BonusInfo.GetHashCode();
      if (betMulInfo_ != null) hash ^= BetMulInfo.GetHashCode();
      if (jPWinInfo_ != null) hash ^= JPWinInfo.GetHashCode();
      if (Upcount != 0) hash ^= Upcount.GetHashCode();
      if (TotalUpcount != 0) hash ^= TotalUpcount.GetHashCode();
      if (Mainwin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mainwin);
      if (Wheelwin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Wheelwin);
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (AwardType != 0) hash ^= AwardType.GetHashCode();
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (jPInfo_ != null) hash ^= JPInfo.GetHashCode();
      if (jPBeforeInfo_ != null) hash ^= JPBeforeInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      gemInfo_.WriteTo(output, _repeated_gemInfo_codec);
      if (ChangePlate != false) {
        output.WriteRawTag(16);
        output.WriteBool(ChangePlate);
      }
      if (ChangePlateSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChangePlateSize);
      }
      if (GetWheel != false) {
        output.WriteRawTag(32);
        output.WriteBool(GetWheel);
      }
      if (WheelType != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(WheelType);
      }
      if (freeInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FreeInfo);
      }
      if (bonusInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BonusInfo);
      }
      if (betMulInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BetMulInfo);
      }
      if (jPWinInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(JPWinInfo);
      }
      if (Upcount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Upcount);
      }
      if (TotalUpcount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TotalUpcount);
      }
      if (Mainwin != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Mainwin);
      }
      if (Wheelwin != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Wheelwin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(TotalWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AwardType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(RID);
      }
      if (jPInfo_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(JPInfo);
      }
      if (jPBeforeInfo_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(JPBeforeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      gemInfo_.WriteTo(ref output, _repeated_gemInfo_codec);
      if (ChangePlate != false) {
        output.WriteRawTag(16);
        output.WriteBool(ChangePlate);
      }
      if (ChangePlateSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChangePlateSize);
      }
      if (GetWheel != false) {
        output.WriteRawTag(32);
        output.WriteBool(GetWheel);
      }
      if (WheelType != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(WheelType);
      }
      if (freeInfo_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FreeInfo);
      }
      if (bonusInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BonusInfo);
      }
      if (betMulInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BetMulInfo);
      }
      if (jPWinInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(JPWinInfo);
      }
      if (Upcount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Upcount);
      }
      if (TotalUpcount != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TotalUpcount);
      }
      if (Mainwin != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(Mainwin);
      }
      if (Wheelwin != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Wheelwin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(TotalWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AwardType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(153, 1);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(RID);
      }
      if (jPInfo_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(JPInfo);
      }
      if (jPBeforeInfo_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(JPBeforeInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += gemInfo_.CalculateSize(_repeated_gemInfo_codec);
      if (ChangePlate != false) {
        size += 1 + 1;
      }
      if (ChangePlateSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangePlateSize);
      }
      if (GetWheel != false) {
        size += 1 + 1;
      }
      if (WheelType != 0D) {
        size += 1 + 8;
      }
      if (freeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeInfo);
      }
      if (bonusInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BonusInfo);
      }
      if (betMulInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BetMulInfo);
      }
      if (jPWinInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JPWinInfo);
      }
      if (Upcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Upcount);
      }
      if (TotalUpcount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalUpcount);
      }
      if (Mainwin != 0D) {
        size += 1 + 8;
      }
      if (Wheelwin != 0D) {
        size += 1 + 8;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (AwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardType);
      }
      if (ShowIndex.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 2 + 8;
      }
      if (AckType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0D) {
        size += 2 + 8;
      }
      if (LID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (jPInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JPInfo);
      }
      if (jPBeforeInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JPBeforeInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      gemInfo_.Add(other.gemInfo_);
      if (other.ChangePlate != false) {
        ChangePlate = other.ChangePlate;
      }
      if (other.ChangePlateSize != 0) {
        ChangePlateSize = other.ChangePlateSize;
      }
      if (other.GetWheel != false) {
        GetWheel = other.GetWheel;
      }
      if (other.WheelType != 0D) {
        WheelType = other.WheelType;
      }
      if (other.freeInfo_ != null) {
        if (freeInfo_ == null) {
          FreeInfo = new global::Jili.Protocols.Gem3.FreeData();
        }
        FreeInfo.MergeFrom(other.FreeInfo);
      }
      if (other.bonusInfo_ != null) {
        if (bonusInfo_ == null) {
          BonusInfo = new global::Jili.Protocols.Gem3.BonusData();
        }
        BonusInfo.MergeFrom(other.BonusInfo);
      }
      if (other.betMulInfo_ != null) {
        if (betMulInfo_ == null) {
          BetMulInfo = new global::Jili.Protocols.Gem3.BetMulData();
        }
        BetMulInfo.MergeFrom(other.BetMulInfo);
      }
      if (other.jPWinInfo_ != null) {
        if (jPWinInfo_ == null) {
          JPWinInfo = new global::Jili.Protocols.Gem3.JPData();
        }
        JPWinInfo.MergeFrom(other.JPWinInfo);
      }
      if (other.Upcount != 0) {
        Upcount = other.Upcount;
      }
      if (other.TotalUpcount != 0) {
        TotalUpcount = other.TotalUpcount;
      }
      if (other.Mainwin != 0D) {
        Mainwin = other.Mainwin;
      }
      if (other.Wheelwin != 0D) {
        Wheelwin = other.Wheelwin;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.AwardType != 0) {
        AwardType = other.AwardType;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      if (other.jPInfo_ != null) {
        if (jPInfo_ == null) {
          JPInfo = new global::Jili.Protocols.Gem3.JPInfo();
        }
        JPInfo.MergeFrom(other.JPInfo);
      }
      if (other.jPBeforeInfo_ != null) {
        if (jPBeforeInfo_ == null) {
          JPBeforeInfo = new global::Jili.Protocols.Gem3.JPInfo();
        }
        JPBeforeInfo.MergeFrom(other.JPBeforeInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            gemInfo_.AddEntriesFrom(input, _repeated_gemInfo_codec);
            break;
          }
          case 16: {
            ChangePlate = input.ReadBool();
            break;
          }
          case 24: {
            ChangePlateSize = input.ReadInt32();
            break;
          }
          case 32: {
            GetWheel = input.ReadBool();
            break;
          }
          case 41: {
            WheelType = input.ReadDouble();
            break;
          }
          case 50: {
            if (freeInfo_ == null) {
              FreeInfo = new global::Jili.Protocols.Gem3.FreeData();
            }
            input.ReadMessage(FreeInfo);
            break;
          }
          case 58: {
            if (bonusInfo_ == null) {
              BonusInfo = new global::Jili.Protocols.Gem3.BonusData();
            }
            input.ReadMessage(BonusInfo);
            break;
          }
          case 66: {
            if (betMulInfo_ == null) {
              BetMulInfo = new global::Jili.Protocols.Gem3.BetMulData();
            }
            input.ReadMessage(BetMulInfo);
            break;
          }
          case 74: {
            if (jPWinInfo_ == null) {
              JPWinInfo = new global::Jili.Protocols.Gem3.JPData();
            }
            input.ReadMessage(JPWinInfo);
            break;
          }
          case 80: {
            Upcount = input.ReadInt32();
            break;
          }
          case 88: {
            TotalUpcount = input.ReadInt32();
            break;
          }
          case 97: {
            Mainwin = input.ReadDouble();
            break;
          }
          case 105: {
            Wheelwin = input.ReadDouble();
            break;
          }
          case 113: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 120: {
            AwardType = input.ReadInt32();
            break;
          }
          case 130: {
            ShowIndex = input.ReadString();
            break;
          }
          case 137: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 144: {
            AckType = input.ReadInt32();
            break;
          }
          case 153: {
            RTP = input.ReadDouble();
            break;
          }
          case 160: {
            LID = input.ReadInt32();
            break;
          }
          case 168: {
            RID = input.ReadInt32();
            break;
          }
          case 178: {
            if (jPInfo_ == null) {
              JPInfo = new global::Jili.Protocols.Gem3.JPInfo();
            }
            input.ReadMessage(JPInfo);
            break;
          }
          case 186: {
            if (jPBeforeInfo_ == null) {
              JPBeforeInfo = new global::Jili.Protocols.Gem3.JPInfo();
            }
            input.ReadMessage(JPBeforeInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            gemInfo_.AddEntriesFrom(ref input, _repeated_gemInfo_codec);
            break;
          }
          case 16: {
            ChangePlate = input.ReadBool();
            break;
          }
          case 24: {
            ChangePlateSize = input.ReadInt32();
            break;
          }
          case 32: {
            GetWheel = input.ReadBool();
            break;
          }
          case 41: {
            WheelType = input.ReadDouble();
            break;
          }
          case 50: {
            if (freeInfo_ == null) {
              FreeInfo = new global::Jili.Protocols.Gem3.FreeData();
            }
            input.ReadMessage(FreeInfo);
            break;
          }
          case 58: {
            if (bonusInfo_ == null) {
              BonusInfo = new global::Jili.Protocols.Gem3.BonusData();
            }
            input.ReadMessage(BonusInfo);
            break;
          }
          case 66: {
            if (betMulInfo_ == null) {
              BetMulInfo = new global::Jili.Protocols.Gem3.BetMulData();
            }
            input.ReadMessage(BetMulInfo);
            break;
          }
          case 74: {
            if (jPWinInfo_ == null) {
              JPWinInfo = new global::Jili.Protocols.Gem3.JPData();
            }
            input.ReadMessage(JPWinInfo);
            break;
          }
          case 80: {
            Upcount = input.ReadInt32();
            break;
          }
          case 88: {
            TotalUpcount = input.ReadInt32();
            break;
          }
          case 97: {
            Mainwin = input.ReadDouble();
            break;
          }
          case 105: {
            Wheelwin = input.ReadDouble();
            break;
          }
          case 113: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 120: {
            AwardType = input.ReadInt32();
            break;
          }
          case 130: {
            ShowIndex = input.ReadString();
            break;
          }
          case 137: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 144: {
            AckType = input.ReadInt32();
            break;
          }
          case 153: {
            RTP = input.ReadDouble();
            break;
          }
          case 160: {
            LID = input.ReadInt32();
            break;
          }
          case 168: {
            RID = input.ReadInt32();
            break;
          }
          case 178: {
            if (jPInfo_ == null) {
              JPInfo = new global::Jili.Protocols.Gem3.JPInfo();
            }
            input.ReadMessage(JPInfo);
            break;
          }
          case 186: {
            if (jPBeforeInfo_ == null) {
              JPBeforeInfo = new global::Jili.Protocols.Gem3.JPInfo();
            }
            input.ReadMessage(JPBeforeInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BonusData : pb::IMessage<BonusData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BonusData> _parser = new pb::MessageParser<BonusData>(() => new BonusData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BonusData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BonusData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BonusData(BonusData other) : this() {
      bonusQueue_ = other.bonusQueue_.Clone();
      bonusCount_ = other.bonusCount_;
      bonusTotalWin_ = other.bonusTotalWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BonusData Clone() {
      return new BonusData(this);
    }

    /// <summary>Field number for the "BonusQueue" field.</summary>
    public const int BonusQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem3.SingleBonus> _repeated_bonusQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Gem3.SingleBonus.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem3.SingleBonus> bonusQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Gem3.SingleBonus>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem3.SingleBonus> BonusQueue {
      get { return bonusQueue_; }
    }

    /// <summary>Field number for the "BonusCount" field.</summary>
    public const int BonusCountFieldNumber = 2;
    private int bonusCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BonusCount {
      get { return bonusCount_; }
      set {
        bonusCount_ = value;
      }
    }

    /// <summary>Field number for the "BonusTotalWin" field.</summary>
    public const int BonusTotalWinFieldNumber = 3;
    private double bonusTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BonusTotalWin {
      get { return bonusTotalWin_; }
      set {
        bonusTotalWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BonusData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BonusData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bonusQueue_.Equals(other.bonusQueue_)) return false;
      if (BonusCount != other.BonusCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BonusTotalWin, other.BonusTotalWin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bonusQueue_.GetHashCode();
      if (BonusCount != 0) hash ^= BonusCount.GetHashCode();
      if (BonusTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BonusTotalWin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      bonusQueue_.WriteTo(output, _repeated_bonusQueue_codec);
      if (BonusCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BonusCount);
      }
      if (BonusTotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(BonusTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      bonusQueue_.WriteTo(ref output, _repeated_bonusQueue_codec);
      if (BonusCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BonusCount);
      }
      if (BonusTotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(BonusTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += bonusQueue_.CalculateSize(_repeated_bonusQueue_codec);
      if (BonusCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusCount);
      }
      if (BonusTotalWin != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BonusData other) {
      if (other == null) {
        return;
      }
      bonusQueue_.Add(other.bonusQueue_);
      if (other.BonusCount != 0) {
        BonusCount = other.BonusCount;
      }
      if (other.BonusTotalWin != 0D) {
        BonusTotalWin = other.BonusTotalWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bonusQueue_.AddEntriesFrom(input, _repeated_bonusQueue_codec);
            break;
          }
          case 16: {
            BonusCount = input.ReadInt32();
            break;
          }
          case 25: {
            BonusTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bonusQueue_.AddEntriesFrom(ref input, _repeated_bonusQueue_codec);
            break;
          }
          case 16: {
            BonusCount = input.ReadInt32();
            break;
          }
          case 25: {
            BonusTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SingleBonus : pb::IMessage<SingleBonus>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SingleBonus> _parser = new pb::MessageParser<SingleBonus>(() => new SingleBonus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SingleBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingleBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingleBonus(SingleBonus other) : this() {
      bonusGem_ = other.bonusGem_ != null ? other.bonusGem_.Clone() : null;
      bonusSymbol_ = other.bonusSymbol_;
      bonusSymbolCount_ = other.bonusSymbolCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingleBonus Clone() {
      return new SingleBonus(this);
    }

    /// <summary>Field number for the "BonusGem" field.</summary>
    public const int BonusGemFieldNumber = 1;
    private global::Jili.Protocols.Gem3.GemData bonusGem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Gem3.GemData BonusGem {
      get { return bonusGem_; }
      set {
        bonusGem_ = value;
      }
    }

    /// <summary>Field number for the "BonusSymbol" field.</summary>
    public const int BonusSymbolFieldNumber = 2;
    private int bonusSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BonusSymbol {
      get { return bonusSymbol_; }
      set {
        bonusSymbol_ = value;
      }
    }

    /// <summary>Field number for the "BonusSymbolCount" field.</summary>
    public const int BonusSymbolCountFieldNumber = 3;
    private int bonusSymbolCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BonusSymbolCount {
      get { return bonusSymbolCount_; }
      set {
        bonusSymbolCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SingleBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SingleBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BonusGem, other.BonusGem)) return false;
      if (BonusSymbol != other.BonusSymbol) return false;
      if (BonusSymbolCount != other.BonusSymbolCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (bonusGem_ != null) hash ^= BonusGem.GetHashCode();
      if (BonusSymbol != 0) hash ^= BonusSymbol.GetHashCode();
      if (BonusSymbolCount != 0) hash ^= BonusSymbolCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (bonusGem_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BonusGem);
      }
      if (BonusSymbol != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BonusSymbol);
      }
      if (BonusSymbolCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BonusSymbolCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (bonusGem_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BonusGem);
      }
      if (BonusSymbol != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BonusSymbol);
      }
      if (BonusSymbolCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BonusSymbolCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (bonusGem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BonusGem);
      }
      if (BonusSymbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusSymbol);
      }
      if (BonusSymbolCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusSymbolCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SingleBonus other) {
      if (other == null) {
        return;
      }
      if (other.bonusGem_ != null) {
        if (bonusGem_ == null) {
          BonusGem = new global::Jili.Protocols.Gem3.GemData();
        }
        BonusGem.MergeFrom(other.BonusGem);
      }
      if (other.BonusSymbol != 0) {
        BonusSymbol = other.BonusSymbol;
      }
      if (other.BonusSymbolCount != 0) {
        BonusSymbolCount = other.BonusSymbolCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (bonusGem_ == null) {
              BonusGem = new global::Jili.Protocols.Gem3.GemData();
            }
            input.ReadMessage(BonusGem);
            break;
          }
          case 16: {
            BonusSymbol = input.ReadInt32();
            break;
          }
          case 24: {
            BonusSymbolCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (bonusGem_ == null) {
              BonusGem = new global::Jili.Protocols.Gem3.GemData();
            }
            input.ReadMessage(BonusGem);
            break;
          }
          case 16: {
            BonusSymbol = input.ReadInt32();
            break;
          }
          case 24: {
            BonusSymbolCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BetMulData : pb::IMessage<BetMulData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BetMulData> _parser = new pb::MessageParser<BetMulData>(() => new BetMulData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BetMulData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BetMulData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BetMulData(BetMulData other) : this() {
      betMul_ = other.betMul_;
      betMulTotalWin_ = other.betMulTotalWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BetMulData Clone() {
      return new BetMulData(this);
    }

    /// <summary>Field number for the "BetMul" field.</summary>
    public const int BetMulFieldNumber = 1;
    private double betMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BetMul {
      get { return betMul_; }
      set {
        betMul_ = value;
      }
    }

    /// <summary>Field number for the "BetMulTotalWin" field.</summary>
    public const int BetMulTotalWinFieldNumber = 2;
    private double betMulTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BetMulTotalWin {
      get { return betMulTotalWin_; }
      set {
        betMulTotalWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BetMulData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BetMulData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BetMul, other.BetMul)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BetMulTotalWin, other.BetMulTotalWin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (BetMul != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BetMul);
      if (BetMulTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BetMulTotalWin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BetMul != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(BetMul);
      }
      if (BetMulTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BetMulTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BetMul != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(BetMul);
      }
      if (BetMulTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BetMulTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (BetMul != 0D) {
        size += 1 + 8;
      }
      if (BetMulTotalWin != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BetMulData other) {
      if (other == null) {
        return;
      }
      if (other.BetMul != 0D) {
        BetMul = other.BetMul;
      }
      if (other.BetMulTotalWin != 0D) {
        BetMulTotalWin = other.BetMulTotalWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            BetMul = input.ReadDouble();
            break;
          }
          case 17: {
            BetMulTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            BetMul = input.ReadDouble();
            break;
          }
          case 17: {
            BetMulTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class JPData : pb::IMessage<JPData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JPData> _parser = new pb::MessageParser<JPData>(() => new JPData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JPData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JPData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JPData(JPData other) : this() {
      jPType_ = other.jPType_;
      jPTotalWin_ = other.jPTotalWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JPData Clone() {
      return new JPData(this);
    }

    /// <summary>Field number for the "JPType" field.</summary>
    public const int JPTypeFieldNumber = 1;
    private int jPType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JPType {
      get { return jPType_; }
      set {
        jPType_ = value;
      }
    }

    /// <summary>Field number for the "JPTotalWin" field.</summary>
    public const int JPTotalWinFieldNumber = 2;
    private double jPTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double JPTotalWin {
      get { return jPTotalWin_; }
      set {
        jPTotalWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JPData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JPData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (JPType != other.JPType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(JPTotalWin, other.JPTotalWin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (JPType != 0) hash ^= JPType.GetHashCode();
      if (JPTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(JPTotalWin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (JPType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JPType);
      }
      if (JPTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(JPTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (JPType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(JPType);
      }
      if (JPTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(JPTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (JPType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JPType);
      }
      if (JPTotalWin != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JPData other) {
      if (other == null) {
        return;
      }
      if (other.JPType != 0) {
        JPType = other.JPType;
      }
      if (other.JPTotalWin != 0D) {
        JPTotalWin = other.JPTotalWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            JPType = input.ReadInt32();
            break;
          }
          case 17: {
            JPTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            JPType = input.ReadInt32();
            break;
          }
          case 17: {
            JPTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class GemData : pb::IMessage<GemData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GemData> _parser = new pb::MessageParser<GemData>(() => new GemData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GemData(GemData other) : this() {
      plateQueue_ = other.plateQueue_.Clone();
      count_ = other.count_;
      gemWin_ = other.gemWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GemData Clone() {
      return new GemData(this);
    }

    /// <summary>Field number for the "PlateQueue" field.</summary>
    public const int PlateQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem3.SingleGem> _repeated_plateQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Gem3.SingleGem.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem3.SingleGem> plateQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Gem3.SingleGem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem3.SingleGem> PlateQueue {
      get { return plateQueue_; }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "GemWin" field.</summary>
    public const int GemWinFieldNumber = 3;
    private double gemWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double GemWin {
      get { return gemWin_; }
      set {
        gemWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateQueue_.Equals(other.plateQueue_)) return false;
      if (Count != other.Count) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GemWin, other.GemWin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateQueue_.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (GemWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GemWin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateQueue_.WriteTo(output, _repeated_plateQueue_codec);
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (GemWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(GemWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateQueue_.WriteTo(ref output, _repeated_plateQueue_codec);
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (GemWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(GemWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateQueue_.CalculateSize(_repeated_plateQueue_codec);
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (GemWin != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GemData other) {
      if (other == null) {
        return;
      }
      plateQueue_.Add(other.plateQueue_);
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.GemWin != 0D) {
        GemWin = other.GemWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateQueue_.AddEntriesFrom(input, _repeated_plateQueue_codec);
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 25: {
            GemWin = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateQueue_.AddEntriesFrom(ref input, _repeated_plateQueue_codec);
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 25: {
            GemWin = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class JPInfo : pb::IMessage<JPInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JPInfo> _parser = new pb::MessageParser<JPInfo>(() => new JPInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JPInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JPInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JPInfo(JPInfo other) : this() {
      self_ = other.self_;
      fronts_ = other.fronts_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JPInfo Clone() {
      return new JPInfo(this);
    }

    /// <summary>Field number for the "Self" field.</summary>
    public const int SelfFieldNumber = 1;
    private double self_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Self {
      get { return self_; }
      set {
        self_ = value;
      }
    }

    /// <summary>Field number for the "Fronts" field.</summary>
    public const int FrontsFieldNumber = 2;
    private static readonly pb::FieldCodec<double> _repeated_fronts_codec
        = pb::FieldCodec.ForDouble(18);
    private readonly pbc::RepeatedField<double> fronts_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Fronts {
      get { return fronts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JPInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JPInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Self, other.Self)) return false;
      if(!fronts_.Equals(other.fronts_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Self != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Self);
      hash ^= fronts_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Self != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Self);
      }
      fronts_.WriteTo(output, _repeated_fronts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Self != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Self);
      }
      fronts_.WriteTo(ref output, _repeated_fronts_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Self != 0D) {
        size += 1 + 8;
      }
      size += fronts_.CalculateSize(_repeated_fronts_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JPInfo other) {
      if (other == null) {
        return;
      }
      if (other.Self != 0D) {
        Self = other.Self;
      }
      fronts_.Add(other.fronts_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Self = input.ReadDouble();
            break;
          }
          case 18:
          case 17: {
            fronts_.AddEntriesFrom(input, _repeated_fronts_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Self = input.ReadDouble();
            break;
          }
          case 18:
          case 17: {
            fronts_.AddEntriesFrom(ref input, _repeated_fronts_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FreeData : pb::IMessage<FreeData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeData> _parser = new pb::MessageParser<FreeData>(() => new FreeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeData(FreeData other) : this() {
      freeQueue_ = other.freeQueue_.Clone();
      freeMul_ = other.freeMul_;
      freeTotalWin_ = other.freeTotalWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeData Clone() {
      return new FreeData(this);
    }

    /// <summary>Field number for the "FreeQueue" field.</summary>
    public const int FreeQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem3.SingleFree> _repeated_freeQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Gem3.SingleFree.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem3.SingleFree> freeQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Gem3.SingleFree>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem3.SingleFree> FreeQueue {
      get { return freeQueue_; }
    }

    /// <summary>Field number for the "FreeMul" field.</summary>
    public const int FreeMulFieldNumber = 2;
    private double freeMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeMul {
      get { return freeMul_; }
      set {
        freeMul_ = value;
      }
    }

    /// <summary>Field number for the "FreeTotalWin" field.</summary>
    public const int FreeTotalWinFieldNumber = 3;
    private double freeTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeTotalWin {
      get { return freeTotalWin_; }
      set {
        freeTotalWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!freeQueue_.Equals(other.freeQueue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeMul, other.FreeMul)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeTotalWin, other.FreeTotalWin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= freeQueue_.GetHashCode();
      if (FreeMul != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeMul);
      if (FreeTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeTotalWin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      freeQueue_.WriteTo(output, _repeated_freeQueue_codec);
      if (FreeMul != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeMul);
      }
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FreeTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      freeQueue_.WriteTo(ref output, _repeated_freeQueue_codec);
      if (FreeMul != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeMul);
      }
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FreeTotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += freeQueue_.CalculateSize(_repeated_freeQueue_codec);
      if (FreeMul != 0D) {
        size += 1 + 8;
      }
      if (FreeTotalWin != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeData other) {
      if (other == null) {
        return;
      }
      freeQueue_.Add(other.freeQueue_);
      if (other.FreeMul != 0D) {
        FreeMul = other.FreeMul;
      }
      if (other.FreeTotalWin != 0D) {
        FreeTotalWin = other.FreeTotalWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            freeQueue_.AddEntriesFrom(input, _repeated_freeQueue_codec);
            break;
          }
          case 17: {
            FreeMul = input.ReadDouble();
            break;
          }
          case 25: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            freeQueue_.AddEntriesFrom(ref input, _repeated_freeQueue_codec);
            break;
          }
          case 17: {
            FreeMul = input.ReadDouble();
            break;
          }
          case 25: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SingleFree : pb::IMessage<SingleFree>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SingleFree> _parser = new pb::MessageParser<SingleFree>(() => new SingleFree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SingleFree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingleFree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingleFree(SingleFree other) : this() {
      freeGemInfo_ = other.freeGemInfo_ != null ? other.freeGemInfo_.Clone() : null;
      freeSingleWin_ = other.freeSingleWin_;
      awardType_ = other.awardType_;
      nowMoney_ = other.nowMoney_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingleFree Clone() {
      return new SingleFree(this);
    }

    /// <summary>Field number for the "FreeGemInfo" field.</summary>
    public const int FreeGemInfoFieldNumber = 1;
    private global::Jili.Protocols.Gem3.GemData freeGemInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Gem3.GemData FreeGemInfo {
      get { return freeGemInfo_; }
      set {
        freeGemInfo_ = value;
      }
    }

    /// <summary>Field number for the "FreeSingleWin" field.</summary>
    public const int FreeSingleWinFieldNumber = 2;
    private double freeSingleWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeSingleWin {
      get { return freeSingleWin_; }
      set {
        freeSingleWin_ = value;
      }
    }

    /// <summary>Field number for the "AwardType" field.</summary>
    public const int AwardTypeFieldNumber = 3;
    private int awardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardType {
      get { return awardType_; }
      set {
        awardType_ = value;
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 4;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SingleFree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SingleFree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(FreeGemInfo, other.FreeGemInfo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeSingleWin, other.FreeSingleWin)) return false;
      if (AwardType != other.AwardType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (freeGemInfo_ != null) hash ^= FreeGemInfo.GetHashCode();
      if (FreeSingleWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeSingleWin);
      if (AwardType != 0) hash ^= AwardType.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (freeGemInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FreeGemInfo);
      }
      if (FreeSingleWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeSingleWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AwardType);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(NowMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (freeGemInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FreeGemInfo);
      }
      if (FreeSingleWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeSingleWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AwardType);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(NowMoney);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (freeGemInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeGemInfo);
      }
      if (FreeSingleWin != 0D) {
        size += 1 + 8;
      }
      if (AwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardType);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SingleFree other) {
      if (other == null) {
        return;
      }
      if (other.freeGemInfo_ != null) {
        if (freeGemInfo_ == null) {
          FreeGemInfo = new global::Jili.Protocols.Gem3.GemData();
        }
        FreeGemInfo.MergeFrom(other.FreeGemInfo);
      }
      if (other.FreeSingleWin != 0D) {
        FreeSingleWin = other.FreeSingleWin;
      }
      if (other.AwardType != 0) {
        AwardType = other.AwardType;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (freeGemInfo_ == null) {
              FreeGemInfo = new global::Jili.Protocols.Gem3.GemData();
            }
            input.ReadMessage(FreeGemInfo);
            break;
          }
          case 17: {
            FreeSingleWin = input.ReadDouble();
            break;
          }
          case 24: {
            AwardType = input.ReadInt32();
            break;
          }
          case 33: {
            NowMoney = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (freeGemInfo_ == null) {
              FreeGemInfo = new global::Jili.Protocols.Gem3.GemData();
            }
            input.ReadMessage(FreeGemInfo);
            break;
          }
          case 17: {
            FreeSingleWin = input.ReadDouble();
            break;
          }
          case 24: {
            AwardType = input.ReadInt32();
            break;
          }
          case 33: {
            NowMoney = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SingleGem : pb::IMessage<SingleGem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SingleGem> _parser = new pb::MessageParser<SingleGem>(() => new SingleGem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SingleGem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingleGem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingleGem(SingleGem other) : this() {
      plateSymbol_ = other.plateSymbol_.Clone();
      plateTag_ = other.plateTag_.Clone();
      awardInfos_ = other.awardInfos_.Clone();
      singleWin_ = other.singleWin_;
      hasUp_ = other.hasUp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SingleGem Clone() {
      return new SingleGem(this);
    }

    /// <summary>Field number for the "PlateSymbol" field.</summary>
    public const int PlateSymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_plateSymbol_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> plateSymbol_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> PlateSymbol {
      get { return plateSymbol_; }
    }

    /// <summary>Field number for the "PlateTag" field.</summary>
    public const int PlateTagFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_plateTag_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> plateTag_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<string> PlateTag {
      get { return plateTag_; }
    }

    /// <summary>Field number for the "AwardInfos" field.</summary>
    public const int AwardInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem3.AwardData> _repeated_awardInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Jili.Protocols.Gem3.AwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem3.AwardData> awardInfos_ = new pbc::RepeatedField<global::Jili.Protocols.Gem3.AwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem3.AwardData> AwardInfos {
      get { return awardInfos_; }
    }

    /// <summary>Field number for the "SingleWin" field.</summary>
    public const int SingleWinFieldNumber = 4;
    private double singleWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SingleWin {
      get { return singleWin_; }
      set {
        singleWin_ = value;
      }
    }

    /// <summary>Field number for the "HasUp" field.</summary>
    public const int HasUpFieldNumber = 5;
    private bool hasUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUp {
      get { return hasUp_; }
      set {
        hasUp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SingleGem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SingleGem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateSymbol_.Equals(other.plateSymbol_)) return false;
      if(!plateTag_.Equals(other.plateTag_)) return false;
      if(!awardInfos_.Equals(other.awardInfos_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SingleWin, other.SingleWin)) return false;
      if (HasUp != other.HasUp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateSymbol_.GetHashCode();
      hash ^= plateTag_.GetHashCode();
      hash ^= awardInfos_.GetHashCode();
      if (SingleWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SingleWin);
      if (HasUp != false) hash ^= HasUp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateSymbol_.WriteTo(output, _repeated_plateSymbol_codec);
      plateTag_.WriteTo(output, _repeated_plateTag_codec);
      awardInfos_.WriteTo(output, _repeated_awardInfos_codec);
      if (SingleWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SingleWin);
      }
      if (HasUp != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateSymbol_.WriteTo(ref output, _repeated_plateSymbol_codec);
      plateTag_.WriteTo(ref output, _repeated_plateTag_codec);
      awardInfos_.WriteTo(ref output, _repeated_awardInfos_codec);
      if (SingleWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(SingleWin);
      }
      if (HasUp != false) {
        output.WriteRawTag(40);
        output.WriteBool(HasUp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateSymbol_.CalculateSize(_repeated_plateSymbol_codec);
      size += plateTag_.CalculateSize(_repeated_plateTag_codec);
      size += awardInfos_.CalculateSize(_repeated_awardInfos_codec);
      if (SingleWin != 0D) {
        size += 1 + 8;
      }
      if (HasUp != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SingleGem other) {
      if (other == null) {
        return;
      }
      plateSymbol_.Add(other.plateSymbol_);
      plateTag_.Add(other.plateTag_);
      awardInfos_.Add(other.awardInfos_);
      if (other.SingleWin != 0D) {
        SingleWin = other.SingleWin;
      }
      if (other.HasUp != false) {
        HasUp = other.HasUp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(input, _repeated_plateSymbol_codec);
            break;
          }
          case 18: {
            plateTag_.AddEntriesFrom(input, _repeated_plateTag_codec);
            break;
          }
          case 26: {
            awardInfos_.AddEntriesFrom(input, _repeated_awardInfos_codec);
            break;
          }
          case 33: {
            SingleWin = input.ReadDouble();
            break;
          }
          case 40: {
            HasUp = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(ref input, _repeated_plateSymbol_codec);
            break;
          }
          case 18: {
            plateTag_.AddEntriesFrom(ref input, _repeated_plateTag_codec);
            break;
          }
          case 26: {
            awardInfos_.AddEntriesFrom(ref input, _repeated_awardInfos_codec);
            break;
          }
          case 33: {
            SingleWin = input.ReadDouble();
            break;
          }
          case 40: {
            HasUp = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardData : pb::IMessage<AwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardData> _parser = new pb::MessageParser<AwardData>(() => new AwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem3.SpinAckReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData(AwardData other) : this() {
      symbol_ = other.symbol_;
      tag_ = other.tag_;
      win_ = other.win_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData Clone() {
      return new AwardData(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private int symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 2;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 3;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 4;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Tag != other.Tag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol != 0) hash ^= Symbol.GetHashCode();
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Tag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tag);
      }
      if (Win != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Win);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Tag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tag);
      }
      if (Win != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Win);
      }
      if (Count != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Symbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Symbol);
      }
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardData other) {
      if (other == null) {
        return;
      }
      if (other.Symbol != 0) {
        Symbol = other.Symbol;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Tag = input.ReadInt32();
            break;
          }
          case 25: {
            Win = input.ReadDouble();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Tag = input.ReadInt32();
            break;
          }
          case 25: {
            Win = input.ReadDouble();
            break;
          }
          case 32: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
