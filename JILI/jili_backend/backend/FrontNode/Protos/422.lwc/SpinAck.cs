// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Lwc {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhJKaWxpLlByb3RvY29scy5sd2MinAEKB1NwaW5B",
            "Y2sSMQoKUm91bmRRdWV1ZRgBIAMoCzIdLkppbGkuUHJvdG9jb2xzLmx3Yy5S",
            "b3VuZEluZm8SFAoMRnJlZVRvdGFsV2luGAIgASgBEhAKCFRvdGFsV2luGAMg",
            "ASgBEg8KB0Fja1R5cGUYBCABKAUSCwoDUlRQGAUgASgBEgsKA0xJRBgGIAEo",
            "BRILCgNSSUQYByABKAUi7gMKCVJvdW5kSW5mbxIqCgZTeW1ib2wYASADKAsy",
            "Gi5KaWxpLlByb3RvY29scy5sd2MuQ29sdW1uEjMKDEF3YXJkRGF0YVZlYxgC",
            "IAMoCzIdLkppbGkuUHJvdG9jb2xzLmx3Yy5Bd2FyZERhdGESEAoIUm91bmRX",
            "aW4YAyABKAESEQoJV2hlZWxUeXBlGAQgASgFEhAKCFdoZWVsTXVsGAUgASgB",
            "EhEKCVdpbGRDb3VudBgGIAEoBRIPCgdHZXRGcmVlGAcgASgIEhQKDEZyZWVO",
            "b3dSb3VuZBgIIAEoBRIWCg5GcmVlVG90YWxSb3VuZBgJIAEoBRIVCg1GcmVl",
            "V2hlZWxUeXBlGAogASgFEhcKD0ZyZWVXaGVlbENvbHVtbhgLIAMoBRIuCgpG",
            "cmVlU3ltYm9sGAwgAygLMhouSmlsaS5Qcm90b2NvbHMubHdjLkNvbHVtbhI3",
            "ChBGcmVlQXdhcmREYXRhVmVjGA0gAygLMh0uSmlsaS5Qcm90b2NvbHMubHdj",
            "LkF3YXJkRGF0YRIVCg1Bd2FyZFR5cGVGbGFnGA4gASgFEhAKCFJlZWxUeXBl",
            "GA8gASgFEg4KBklzTWFpbhgQIAEoCBIPCgdNYXhGbGFnGBEgASgIEhQKDEZy",
            "ZWVGaXJzdFdpbhgSIAEoASIYCgZDb2x1bW4SDgoGQ29sdW1uGAEgAygFIlUK",
            "CUF3YXJkRGF0YRIOCgZTeW1ib2wYASABKAUSDQoFQ291bnQYAiABKAUSDwoH",
            "TGluZU51bRgDIAEoBRILCgNXaW4YBCABKAESCwoDUG9zGAUgAygFYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Lwc.SpinAck), global::Jili.Protocols.Lwc.SpinAck.Parser, new[]{ "RoundQueue", "FreeTotalWin", "TotalWin", "AckType", "RTP", "LID", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Lwc.RoundInfo), global::Jili.Protocols.Lwc.RoundInfo.Parser, new[]{ "Symbol", "AwardDataVec", "RoundWin", "WheelType", "WheelMul", "WildCount", "GetFree", "FreeNowRound", "FreeTotalRound", "FreeWheelType", "FreeWheelColumn", "FreeSymbol", "FreeAwardDataVec", "AwardTypeFlag", "ReelType", "IsMain", "MaxFlag", "FreeFirstWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Lwc.Column), global::Jili.Protocols.Lwc.Column.Parser, new[]{ "Column_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Lwc.AwardData), global::Jili.Protocols.Lwc.AwardData.Parser, new[]{ "Symbol", "Count", "LineNum", "Win", "Pos" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Lwc.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      roundQueue_ = other.roundQueue_.Clone();
      freeTotalWin_ = other.freeTotalWin_;
      totalWin_ = other.totalWin_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "RoundQueue" field.</summary>
    public const int RoundQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Lwc.RoundInfo> _repeated_roundQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Lwc.RoundInfo.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Lwc.RoundInfo> roundQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Lwc.RoundInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Lwc.RoundInfo> RoundQueue {
      get { return roundQueue_; }
    }

    /// <summary>Field number for the "FreeTotalWin" field.</summary>
    public const int FreeTotalWinFieldNumber = 2;
    private double freeTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeTotalWin {
      get { return freeTotalWin_; }
      set {
        freeTotalWin_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 3;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 4;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 5;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 6;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 7;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundQueue_.Equals(other.roundQueue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeTotalWin, other.FreeTotalWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundQueue_.GetHashCode();
      if (FreeTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeTotalWin);
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundQueue_.WriteTo(output, _repeated_roundQueue_codec);
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      if (AckType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundQueue_.WriteTo(ref output, _repeated_roundQueue_codec);
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      if (AckType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += roundQueue_.CalculateSize(_repeated_roundQueue_codec);
      if (FreeTotalWin != 0D) {
        size += 1 + 8;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (LID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      roundQueue_.Add(other.roundQueue_);
      if (other.FreeTotalWin != 0D) {
        FreeTotalWin = other.FreeTotalWin;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(input, _repeated_roundQueue_codec);
            break;
          }
          case 17: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 32: {
            AckType = input.ReadInt32();
            break;
          }
          case 41: {
            RTP = input.ReadDouble();
            break;
          }
          case 48: {
            LID = input.ReadInt32();
            break;
          }
          case 56: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(ref input, _repeated_roundQueue_codec);
            break;
          }
          case 17: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 32: {
            AckType = input.ReadInt32();
            break;
          }
          case 41: {
            RTP = input.ReadDouble();
            break;
          }
          case 48: {
            LID = input.ReadInt32();
            break;
          }
          case 56: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RoundInfo : pb::IMessage<RoundInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundInfo> _parser = new pb::MessageParser<RoundInfo>(() => new RoundInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoundInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Lwc.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo(RoundInfo other) : this() {
      symbol_ = other.symbol_.Clone();
      awardDataVec_ = other.awardDataVec_.Clone();
      roundWin_ = other.roundWin_;
      wheelType_ = other.wheelType_;
      wheelMul_ = other.wheelMul_;
      wildCount_ = other.wildCount_;
      getFree_ = other.getFree_;
      freeNowRound_ = other.freeNowRound_;
      freeTotalRound_ = other.freeTotalRound_;
      freeWheelType_ = other.freeWheelType_;
      freeWheelColumn_ = other.freeWheelColumn_.Clone();
      freeSymbol_ = other.freeSymbol_.Clone();
      freeAwardDataVec_ = other.freeAwardDataVec_.Clone();
      awardTypeFlag_ = other.awardTypeFlag_;
      reelType_ = other.reelType_;
      isMain_ = other.isMain_;
      maxFlag_ = other.maxFlag_;
      freeFirstWin_ = other.freeFirstWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo Clone() {
      return new RoundInfo(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Lwc.Column> _repeated_symbol_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Lwc.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Lwc.Column> symbol_ = new pbc::RepeatedField<global::Jili.Protocols.Lwc.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Lwc.Column> Symbol {
      get { return symbol_; }
    }

    /// <summary>Field number for the "AwardDataVec" field.</summary>
    public const int AwardDataVecFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Lwc.AwardData> _repeated_awardDataVec_codec
        = pb::FieldCodec.ForMessage(18, global::Jili.Protocols.Lwc.AwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Lwc.AwardData> awardDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Lwc.AwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Lwc.AwardData> AwardDataVec {
      get { return awardDataVec_; }
    }

    /// <summary>Field number for the "RoundWin" field.</summary>
    public const int RoundWinFieldNumber = 3;
    private double roundWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RoundWin {
      get { return roundWin_; }
      set {
        roundWin_ = value;
      }
    }

    /// <summary>Field number for the "WheelType" field.</summary>
    public const int WheelTypeFieldNumber = 4;
    private int wheelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WheelType {
      get { return wheelType_; }
      set {
        wheelType_ = value;
      }
    }

    /// <summary>Field number for the "WheelMul" field.</summary>
    public const int WheelMulFieldNumber = 5;
    private double wheelMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WheelMul {
      get { return wheelMul_; }
      set {
        wheelMul_ = value;
      }
    }

    /// <summary>Field number for the "WildCount" field.</summary>
    public const int WildCountFieldNumber = 6;
    private int wildCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WildCount {
      get { return wildCount_; }
      set {
        wildCount_ = value;
      }
    }

    /// <summary>Field number for the "GetFree" field.</summary>
    public const int GetFreeFieldNumber = 7;
    private bool getFree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GetFree {
      get { return getFree_; }
      set {
        getFree_ = value;
      }
    }

    /// <summary>Field number for the "FreeNowRound" field.</summary>
    public const int FreeNowRoundFieldNumber = 8;
    private int freeNowRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeNowRound {
      get { return freeNowRound_; }
      set {
        freeNowRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeTotalRound" field.</summary>
    public const int FreeTotalRoundFieldNumber = 9;
    private int freeTotalRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeTotalRound {
      get { return freeTotalRound_; }
      set {
        freeTotalRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeWheelType" field.</summary>
    public const int FreeWheelTypeFieldNumber = 10;
    private int freeWheelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeWheelType {
      get { return freeWheelType_; }
      set {
        freeWheelType_ = value;
      }
    }

    /// <summary>Field number for the "FreeWheelColumn" field.</summary>
    public const int FreeWheelColumnFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_freeWheelColumn_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> freeWheelColumn_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> FreeWheelColumn {
      get { return freeWheelColumn_; }
    }

    /// <summary>Field number for the "FreeSymbol" field.</summary>
    public const int FreeSymbolFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Lwc.Column> _repeated_freeSymbol_codec
        = pb::FieldCodec.ForMessage(98, global::Jili.Protocols.Lwc.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Lwc.Column> freeSymbol_ = new pbc::RepeatedField<global::Jili.Protocols.Lwc.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Lwc.Column> FreeSymbol {
      get { return freeSymbol_; }
    }

    /// <summary>Field number for the "FreeAwardDataVec" field.</summary>
    public const int FreeAwardDataVecFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Lwc.AwardData> _repeated_freeAwardDataVec_codec
        = pb::FieldCodec.ForMessage(106, global::Jili.Protocols.Lwc.AwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Lwc.AwardData> freeAwardDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Lwc.AwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Lwc.AwardData> FreeAwardDataVec {
      get { return freeAwardDataVec_; }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 14;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "ReelType" field.</summary>
    public const int ReelTypeFieldNumber = 15;
    private int reelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReelType {
      get { return reelType_; }
      set {
        reelType_ = value;
      }
    }

    /// <summary>Field number for the "IsMain" field.</summary>
    public const int IsMainFieldNumber = 16;
    private bool isMain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMain {
      get { return isMain_; }
      set {
        isMain_ = value;
      }
    }

    /// <summary>Field number for the "MaxFlag" field.</summary>
    public const int MaxFlagFieldNumber = 17;
    private bool maxFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MaxFlag {
      get { return maxFlag_; }
      set {
        maxFlag_ = value;
      }
    }

    /// <summary>Field number for the "FreeFirstWin" field.</summary>
    public const int FreeFirstWinFieldNumber = 18;
    private double freeFirstWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeFirstWin {
      get { return freeFirstWin_; }
      set {
        freeFirstWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoundInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoundInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbol_.Equals(other.symbol_)) return false;
      if(!awardDataVec_.Equals(other.awardDataVec_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RoundWin, other.RoundWin)) return false;
      if (WheelType != other.WheelType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelMul, other.WheelMul)) return false;
      if (WildCount != other.WildCount) return false;
      if (GetFree != other.GetFree) return false;
      if (FreeNowRound != other.FreeNowRound) return false;
      if (FreeTotalRound != other.FreeTotalRound) return false;
      if (FreeWheelType != other.FreeWheelType) return false;
      if(!freeWheelColumn_.Equals(other.freeWheelColumn_)) return false;
      if(!freeSymbol_.Equals(other.freeSymbol_)) return false;
      if(!freeAwardDataVec_.Equals(other.freeAwardDataVec_)) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (ReelType != other.ReelType) return false;
      if (IsMain != other.IsMain) return false;
      if (MaxFlag != other.MaxFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeFirstWin, other.FreeFirstWin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbol_.GetHashCode();
      hash ^= awardDataVec_.GetHashCode();
      if (RoundWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RoundWin);
      if (WheelType != 0) hash ^= WheelType.GetHashCode();
      if (WheelMul != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelMul);
      if (WildCount != 0) hash ^= WildCount.GetHashCode();
      if (GetFree != false) hash ^= GetFree.GetHashCode();
      if (FreeNowRound != 0) hash ^= FreeNowRound.GetHashCode();
      if (FreeTotalRound != 0) hash ^= FreeTotalRound.GetHashCode();
      if (FreeWheelType != 0) hash ^= FreeWheelType.GetHashCode();
      hash ^= freeWheelColumn_.GetHashCode();
      hash ^= freeSymbol_.GetHashCode();
      hash ^= freeAwardDataVec_.GetHashCode();
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (ReelType != 0) hash ^= ReelType.GetHashCode();
      if (IsMain != false) hash ^= IsMain.GetHashCode();
      if (MaxFlag != false) hash ^= MaxFlag.GetHashCode();
      if (FreeFirstWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeFirstWin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbol_.WriteTo(output, _repeated_symbol_codec);
      awardDataVec_.WriteTo(output, _repeated_awardDataVec_codec);
      if (RoundWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(RoundWin);
      }
      if (WheelType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WheelType);
      }
      if (WheelMul != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(WheelMul);
      }
      if (WildCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WildCount);
      }
      if (GetFree != false) {
        output.WriteRawTag(56);
        output.WriteBool(GetFree);
      }
      if (FreeNowRound != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FreeNowRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FreeTotalRound);
      }
      if (FreeWheelType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FreeWheelType);
      }
      freeWheelColumn_.WriteTo(output, _repeated_freeWheelColumn_codec);
      freeSymbol_.WriteTo(output, _repeated_freeSymbol_codec);
      freeAwardDataVec_.WriteTo(output, _repeated_freeAwardDataVec_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AwardTypeFlag);
      }
      if (ReelType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ReelType);
      }
      if (IsMain != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsMain);
      }
      if (MaxFlag != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(MaxFlag);
      }
      if (FreeFirstWin != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(FreeFirstWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbol_.WriteTo(ref output, _repeated_symbol_codec);
      awardDataVec_.WriteTo(ref output, _repeated_awardDataVec_codec);
      if (RoundWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(RoundWin);
      }
      if (WheelType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WheelType);
      }
      if (WheelMul != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(WheelMul);
      }
      if (WildCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WildCount);
      }
      if (GetFree != false) {
        output.WriteRawTag(56);
        output.WriteBool(GetFree);
      }
      if (FreeNowRound != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FreeNowRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FreeTotalRound);
      }
      if (FreeWheelType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FreeWheelType);
      }
      freeWheelColumn_.WriteTo(ref output, _repeated_freeWheelColumn_codec);
      freeSymbol_.WriteTo(ref output, _repeated_freeSymbol_codec);
      freeAwardDataVec_.WriteTo(ref output, _repeated_freeAwardDataVec_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(AwardTypeFlag);
      }
      if (ReelType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ReelType);
      }
      if (IsMain != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsMain);
      }
      if (MaxFlag != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(MaxFlag);
      }
      if (FreeFirstWin != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(FreeFirstWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += symbol_.CalculateSize(_repeated_symbol_codec);
      size += awardDataVec_.CalculateSize(_repeated_awardDataVec_codec);
      if (RoundWin != 0D) {
        size += 1 + 8;
      }
      if (WheelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WheelType);
      }
      if (WheelMul != 0D) {
        size += 1 + 8;
      }
      if (WildCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WildCount);
      }
      if (GetFree != false) {
        size += 1 + 1;
      }
      if (FreeNowRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeNowRound);
      }
      if (FreeTotalRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTotalRound);
      }
      if (FreeWheelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeWheelType);
      }
      size += freeWheelColumn_.CalculateSize(_repeated_freeWheelColumn_codec);
      size += freeSymbol_.CalculateSize(_repeated_freeSymbol_codec);
      size += freeAwardDataVec_.CalculateSize(_repeated_freeAwardDataVec_codec);
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (ReelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReelType);
      }
      if (IsMain != false) {
        size += 2 + 1;
      }
      if (MaxFlag != false) {
        size += 2 + 1;
      }
      if (FreeFirstWin != 0D) {
        size += 2 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoundInfo other) {
      if (other == null) {
        return;
      }
      symbol_.Add(other.symbol_);
      awardDataVec_.Add(other.awardDataVec_);
      if (other.RoundWin != 0D) {
        RoundWin = other.RoundWin;
      }
      if (other.WheelType != 0) {
        WheelType = other.WheelType;
      }
      if (other.WheelMul != 0D) {
        WheelMul = other.WheelMul;
      }
      if (other.WildCount != 0) {
        WildCount = other.WildCount;
      }
      if (other.GetFree != false) {
        GetFree = other.GetFree;
      }
      if (other.FreeNowRound != 0) {
        FreeNowRound = other.FreeNowRound;
      }
      if (other.FreeTotalRound != 0) {
        FreeTotalRound = other.FreeTotalRound;
      }
      if (other.FreeWheelType != 0) {
        FreeWheelType = other.FreeWheelType;
      }
      freeWheelColumn_.Add(other.freeWheelColumn_);
      freeSymbol_.Add(other.freeSymbol_);
      freeAwardDataVec_.Add(other.freeAwardDataVec_);
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.ReelType != 0) {
        ReelType = other.ReelType;
      }
      if (other.IsMain != false) {
        IsMain = other.IsMain;
      }
      if (other.MaxFlag != false) {
        MaxFlag = other.MaxFlag;
      }
      if (other.FreeFirstWin != 0D) {
        FreeFirstWin = other.FreeFirstWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbol_.AddEntriesFrom(input, _repeated_symbol_codec);
            break;
          }
          case 18: {
            awardDataVec_.AddEntriesFrom(input, _repeated_awardDataVec_codec);
            break;
          }
          case 25: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 32: {
            WheelType = input.ReadInt32();
            break;
          }
          case 41: {
            WheelMul = input.ReadDouble();
            break;
          }
          case 48: {
            WildCount = input.ReadInt32();
            break;
          }
          case 56: {
            GetFree = input.ReadBool();
            break;
          }
          case 64: {
            FreeNowRound = input.ReadInt32();
            break;
          }
          case 72: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
          case 80: {
            FreeWheelType = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            freeWheelColumn_.AddEntriesFrom(input, _repeated_freeWheelColumn_codec);
            break;
          }
          case 98: {
            freeSymbol_.AddEntriesFrom(input, _repeated_freeSymbol_codec);
            break;
          }
          case 106: {
            freeAwardDataVec_.AddEntriesFrom(input, _repeated_freeAwardDataVec_codec);
            break;
          }
          case 112: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 120: {
            ReelType = input.ReadInt32();
            break;
          }
          case 128: {
            IsMain = input.ReadBool();
            break;
          }
          case 136: {
            MaxFlag = input.ReadBool();
            break;
          }
          case 145: {
            FreeFirstWin = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbol_.AddEntriesFrom(ref input, _repeated_symbol_codec);
            break;
          }
          case 18: {
            awardDataVec_.AddEntriesFrom(ref input, _repeated_awardDataVec_codec);
            break;
          }
          case 25: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 32: {
            WheelType = input.ReadInt32();
            break;
          }
          case 41: {
            WheelMul = input.ReadDouble();
            break;
          }
          case 48: {
            WildCount = input.ReadInt32();
            break;
          }
          case 56: {
            GetFree = input.ReadBool();
            break;
          }
          case 64: {
            FreeNowRound = input.ReadInt32();
            break;
          }
          case 72: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
          case 80: {
            FreeWheelType = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            freeWheelColumn_.AddEntriesFrom(ref input, _repeated_freeWheelColumn_codec);
            break;
          }
          case 98: {
            freeSymbol_.AddEntriesFrom(ref input, _repeated_freeSymbol_codec);
            break;
          }
          case 106: {
            freeAwardDataVec_.AddEntriesFrom(ref input, _repeated_freeAwardDataVec_codec);
            break;
          }
          case 112: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 120: {
            ReelType = input.ReadInt32();
            break;
          }
          case 128: {
            IsMain = input.ReadBool();
            break;
          }
          case 136: {
            MaxFlag = input.ReadBool();
            break;
          }
          case 145: {
            FreeFirstWin = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Lwc.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      column_ = other.column_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Column" field.</summary>
    public const int Column_FieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_column_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> column_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Column_ {
      get { return column_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!column_.Equals(other.column_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= column_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      column_.WriteTo(output, _repeated_column_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      column_.WriteTo(ref output, _repeated_column_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += column_.CalculateSize(_repeated_column_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      column_.Add(other.column_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            column_.AddEntriesFrom(input, _repeated_column_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            column_.AddEntriesFrom(ref input, _repeated_column_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardData : pb::IMessage<AwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardData> _parser = new pb::MessageParser<AwardData>(() => new AwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Lwc.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData(AwardData other) : this() {
      symbol_ = other.symbol_;
      count_ = other.count_;
      lineNum_ = other.lineNum_;
      win_ = other.win_;
      pos_ = other.pos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData Clone() {
      return new AwardData(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private int symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "LineNum" field.</summary>
    public const int LineNumFieldNumber = 3;
    private int lineNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LineNum {
      get { return lineNum_; }
      set {
        lineNum_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 4;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_pos_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> pos_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Pos {
      get { return pos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Count != other.Count) return false;
      if (LineNum != other.LineNum) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      if(!pos_.Equals(other.pos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol != 0) hash ^= Symbol.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (LineNum != 0) hash ^= LineNum.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      hash ^= pos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (LineNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineNum);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      pos_.WriteTo(output, _repeated_pos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (LineNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineNum);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      pos_.WriteTo(ref output, _repeated_pos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Symbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Symbol);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (LineNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineNum);
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      size += pos_.CalculateSize(_repeated_pos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardData other) {
      if (other == null) {
        return;
      }
      if (other.Symbol != 0) {
        Symbol = other.Symbol;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.LineNum != 0) {
        LineNum = other.LineNum;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      pos_.Add(other.pos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            LineNum = input.ReadInt32();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
          case 42:
          case 40: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            LineNum = input.ReadInt32();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
          case 42:
          case 40: {
            pos_.AddEntriesFrom(ref input, _repeated_pos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
