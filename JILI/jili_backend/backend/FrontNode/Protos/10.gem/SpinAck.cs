// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Gem {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhJKaWxpLlByb3RvY29scy5nZW0iqgIKB1NwaW5B",
            "Y2sSMwoJUGxhdGVJbmZvGAEgAygLMiAuSmlsaS5Qcm90b2NvbHMuZ2VtLlNp",
            "bmlnbGVQbGF0ZRINCgVDb3VudBgCIAEoBRIRCglJc1VwZ3JhZGUYAyABKAgS",
            "DgoGSXNGcmVlGAQgASgIEhEKCUlzUmFpbkJvdxgFIAEoCBIQCghUb3RhbFdp",
            "bhgGIAEoARIRCglTaG93SW5kZXgYByABKAkSEAoITm93TW9uZXkYCCABKAES",
            "DwoHQWNrVHlwZRgJIAEoBRILCgNSVFAYCiABKAESCwoDTElEGAsgASgFEgsK",
            "A1JJRBgMIAEoBRI2Cg1GcmVlUGxhdGVJbmZvGA0gAygLMh8uSmlsaS5Qcm90",
            "b2NvbHMuZ2VtLkZyZWVTcGluQWNrIq8CCgxTaW5pZ2xlUGxhdGUSLwoLUGxh",
            "dGVTeW1ib2wYASADKAsyGi5KaWxpLlByb3RvY29scy5nZW0uQ29sdW1uEiwK",
            "CFBsYXRlVGFnGAIgAygLMhouSmlsaS5Qcm90b2NvbHMuZ2VtLkNvbHVtbhIv",
            "CgtQbGF0ZUNoYW5nZRgDIAMoCzIaLkppbGkuUHJvdG9jb2xzLmdlbS5Db2x1",
            "bW4SMAoJQXdhcmRJbmZvGAQgAygLMh0uSmlsaS5Qcm90b2NvbHMuZ2VtLkF3",
            "YXJkRGF0YRIRCglBd2FyZFR5cGUYBSABKAUSFAoMTWF4RnJlZVJvdW5kGAYg",
            "ASgFEhEKCUZyZWVSb3VuZBgHIAEoBRIQCghQbGF0ZVdpbhgIIAEoARIPCgdS",
            "YWluQm93GAkgASgFIpkBCgtGcmVlU3BpbkFjaxIzCglQbGF0ZUluZm8YASAD",
            "KAsyIC5KaWxpLlByb3RvY29scy5nZW0uU2luaWdsZVBsYXRlEg0KBUNvdW50",
            "GAIgASgFEhEKCUlzVXBncmFkZRgDIAEoCBIOCgZJc0ZyZWUYBCABKAgSEQoJ",
            "SXNSYWluQm93GAUgASgIEhAKCFRvdGFsV2luGAYgASgBIhUKBkNvbHVtbhIL",
            "CgNSb3cYASADKAUiZAoJQXdhcmREYXRhEg4KBnN5bWJvbBgBIAEoBRILCgNU",
            "YWcYAiABKAUSDwoHRlJFRU11bBgDIAEoARILCgNXaW4YBCABKAESDQoFQ291",
            "bnQYBSABKAUSDQoFT2RkbHYYBiABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem.SpinAck), global::Jili.Protocols.Gem.SpinAck.Parser, new[]{ "PlateInfo", "Count", "IsUpgrade", "IsFree", "IsRainBow", "TotalWin", "ShowIndex", "NowMoney", "AckType", "RTP", "LID", "RID", "FreePlateInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem.SiniglePlate), global::Jili.Protocols.Gem.SiniglePlate.Parser, new[]{ "PlateSymbol", "PlateTag", "PlateChange", "AwardInfo", "AwardType", "MaxFreeRound", "FreeRound", "PlateWin", "RainBow" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem.FreeSpinAck), global::Jili.Protocols.Gem.FreeSpinAck.Parser, new[]{ "PlateInfo", "Count", "IsUpgrade", "IsFree", "IsRainBow", "TotalWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem.Column), global::Jili.Protocols.Gem.Column.Parser, new[]{ "Row" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Gem.AwardData), global::Jili.Protocols.Gem.AwardData.Parser, new[]{ "Symbol", "Tag", "FREEMul", "Win", "Count", "Oddlv" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      plateInfo_ = other.plateInfo_.Clone();
      count_ = other.count_;
      isUpgrade_ = other.isUpgrade_;
      isFree_ = other.isFree_;
      isRainBow_ = other.isRainBow_;
      totalWin_ = other.totalWin_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      freePlateInfo_ = other.freePlateInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "PlateInfo" field.</summary>
    public const int PlateInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem.SiniglePlate> _repeated_plateInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Gem.SiniglePlate.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem.SiniglePlate> plateInfo_ = new pbc::RepeatedField<global::Jili.Protocols.Gem.SiniglePlate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem.SiniglePlate> PlateInfo {
      get { return plateInfo_; }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "IsUpgrade" field.</summary>
    public const int IsUpgradeFieldNumber = 3;
    private bool isUpgrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUpgrade {
      get { return isUpgrade_; }
      set {
        isUpgrade_ = value;
      }
    }

    /// <summary>Field number for the "IsFree" field.</summary>
    public const int IsFreeFieldNumber = 4;
    private bool isFree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFree {
      get { return isFree_; }
      set {
        isFree_ = value;
      }
    }

    /// <summary>Field number for the "IsRainBow" field.</summary>
    public const int IsRainBowFieldNumber = 5;
    private bool isRainBow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRainBow {
      get { return isRainBow_; }
      set {
        isRainBow_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 6;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 7;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 8;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 9;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 10;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 11;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 12;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    /// <summary>Field number for the "FreePlateInfo" field.</summary>
    public const int FreePlateInfoFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem.FreeSpinAck> _repeated_freePlateInfo_codec
        = pb::FieldCodec.ForMessage(106, global::Jili.Protocols.Gem.FreeSpinAck.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem.FreeSpinAck> freePlateInfo_ = new pbc::RepeatedField<global::Jili.Protocols.Gem.FreeSpinAck>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem.FreeSpinAck> FreePlateInfo {
      get { return freePlateInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateInfo_.Equals(other.plateInfo_)) return false;
      if (Count != other.Count) return false;
      if (IsUpgrade != other.IsUpgrade) return false;
      if (IsFree != other.IsFree) return false;
      if (IsRainBow != other.IsRainBow) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      if(!freePlateInfo_.Equals(other.freePlateInfo_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateInfo_.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (IsUpgrade != false) hash ^= IsUpgrade.GetHashCode();
      if (IsFree != false) hash ^= IsFree.GetHashCode();
      if (IsRainBow != false) hash ^= IsRainBow.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      hash ^= freePlateInfo_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateInfo_.WriteTo(output, _repeated_plateInfo_codec);
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (IsUpgrade != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUpgrade);
      }
      if (IsFree != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFree);
      }
      if (IsRainBow != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRainBow);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RID);
      }
      freePlateInfo_.WriteTo(output, _repeated_freePlateInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateInfo_.WriteTo(ref output, _repeated_plateInfo_codec);
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (IsUpgrade != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUpgrade);
      }
      if (IsFree != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFree);
      }
      if (IsRainBow != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRainBow);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(RID);
      }
      freePlateInfo_.WriteTo(ref output, _repeated_freePlateInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateInfo_.CalculateSize(_repeated_plateInfo_codec);
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (IsUpgrade != false) {
        size += 1 + 1;
      }
      if (IsFree != false) {
        size += 1 + 1;
      }
      if (IsRainBow != false) {
        size += 1 + 1;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (LID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      size += freePlateInfo_.CalculateSize(_repeated_freePlateInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      plateInfo_.Add(other.plateInfo_);
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.IsUpgrade != false) {
        IsUpgrade = other.IsUpgrade;
      }
      if (other.IsFree != false) {
        IsFree = other.IsFree;
      }
      if (other.IsRainBow != false) {
        IsRainBow = other.IsRainBow;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      freePlateInfo_.Add(other.freePlateInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateInfo_.AddEntriesFrom(input, _repeated_plateInfo_codec);
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            IsUpgrade = input.ReadBool();
            break;
          }
          case 32: {
            IsFree = input.ReadBool();
            break;
          }
          case 40: {
            IsRainBow = input.ReadBool();
            break;
          }
          case 49: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 58: {
            ShowIndex = input.ReadString();
            break;
          }
          case 65: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 72: {
            AckType = input.ReadInt32();
            break;
          }
          case 81: {
            RTP = input.ReadDouble();
            break;
          }
          case 88: {
            LID = input.ReadInt32();
            break;
          }
          case 96: {
            RID = input.ReadInt32();
            break;
          }
          case 106: {
            freePlateInfo_.AddEntriesFrom(input, _repeated_freePlateInfo_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateInfo_.AddEntriesFrom(ref input, _repeated_plateInfo_codec);
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            IsUpgrade = input.ReadBool();
            break;
          }
          case 32: {
            IsFree = input.ReadBool();
            break;
          }
          case 40: {
            IsRainBow = input.ReadBool();
            break;
          }
          case 49: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 58: {
            ShowIndex = input.ReadString();
            break;
          }
          case 65: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 72: {
            AckType = input.ReadInt32();
            break;
          }
          case 81: {
            RTP = input.ReadDouble();
            break;
          }
          case 88: {
            LID = input.ReadInt32();
            break;
          }
          case 96: {
            RID = input.ReadInt32();
            break;
          }
          case 106: {
            freePlateInfo_.AddEntriesFrom(ref input, _repeated_freePlateInfo_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SiniglePlate : pb::IMessage<SiniglePlate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SiniglePlate> _parser = new pb::MessageParser<SiniglePlate>(() => new SiniglePlate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SiniglePlate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SiniglePlate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SiniglePlate(SiniglePlate other) : this() {
      plateSymbol_ = other.plateSymbol_.Clone();
      plateTag_ = other.plateTag_.Clone();
      plateChange_ = other.plateChange_.Clone();
      awardInfo_ = other.awardInfo_.Clone();
      awardType_ = other.awardType_;
      maxFreeRound_ = other.maxFreeRound_;
      freeRound_ = other.freeRound_;
      plateWin_ = other.plateWin_;
      rainBow_ = other.rainBow_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SiniglePlate Clone() {
      return new SiniglePlate(this);
    }

    /// <summary>Field number for the "PlateSymbol" field.</summary>
    public const int PlateSymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem.Column> _repeated_plateSymbol_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Gem.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem.Column> plateSymbol_ = new pbc::RepeatedField<global::Jili.Protocols.Gem.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem.Column> PlateSymbol {
      get { return plateSymbol_; }
    }

    /// <summary>Field number for the "PlateTag" field.</summary>
    public const int PlateTagFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem.Column> _repeated_plateTag_codec
        = pb::FieldCodec.ForMessage(18, global::Jili.Protocols.Gem.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem.Column> plateTag_ = new pbc::RepeatedField<global::Jili.Protocols.Gem.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem.Column> PlateTag {
      get { return plateTag_; }
    }

    /// <summary>Field number for the "PlateChange" field.</summary>
    public const int PlateChangeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem.Column> _repeated_plateChange_codec
        = pb::FieldCodec.ForMessage(26, global::Jili.Protocols.Gem.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem.Column> plateChange_ = new pbc::RepeatedField<global::Jili.Protocols.Gem.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem.Column> PlateChange {
      get { return plateChange_; }
    }

    /// <summary>Field number for the "AwardInfo" field.</summary>
    public const int AwardInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem.AwardData> _repeated_awardInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Jili.Protocols.Gem.AwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem.AwardData> awardInfo_ = new pbc::RepeatedField<global::Jili.Protocols.Gem.AwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem.AwardData> AwardInfo {
      get { return awardInfo_; }
    }

    /// <summary>Field number for the "AwardType" field.</summary>
    public const int AwardTypeFieldNumber = 5;
    private int awardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardType {
      get { return awardType_; }
      set {
        awardType_ = value;
      }
    }

    /// <summary>Field number for the "MaxFreeRound" field.</summary>
    public const int MaxFreeRoundFieldNumber = 6;
    private int maxFreeRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxFreeRound {
      get { return maxFreeRound_; }
      set {
        maxFreeRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeRound" field.</summary>
    public const int FreeRoundFieldNumber = 7;
    private int freeRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeRound {
      get { return freeRound_; }
      set {
        freeRound_ = value;
      }
    }

    /// <summary>Field number for the "PlateWin" field.</summary>
    public const int PlateWinFieldNumber = 8;
    private double plateWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PlateWin {
      get { return plateWin_; }
      set {
        plateWin_ = value;
      }
    }

    /// <summary>Field number for the "RainBow" field.</summary>
    public const int RainBowFieldNumber = 9;
    private int rainBow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RainBow {
      get { return rainBow_; }
      set {
        rainBow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SiniglePlate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SiniglePlate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateSymbol_.Equals(other.plateSymbol_)) return false;
      if(!plateTag_.Equals(other.plateTag_)) return false;
      if(!plateChange_.Equals(other.plateChange_)) return false;
      if(!awardInfo_.Equals(other.awardInfo_)) return false;
      if (AwardType != other.AwardType) return false;
      if (MaxFreeRound != other.MaxFreeRound) return false;
      if (FreeRound != other.FreeRound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlateWin, other.PlateWin)) return false;
      if (RainBow != other.RainBow) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateSymbol_.GetHashCode();
      hash ^= plateTag_.GetHashCode();
      hash ^= plateChange_.GetHashCode();
      hash ^= awardInfo_.GetHashCode();
      if (AwardType != 0) hash ^= AwardType.GetHashCode();
      if (MaxFreeRound != 0) hash ^= MaxFreeRound.GetHashCode();
      if (FreeRound != 0) hash ^= FreeRound.GetHashCode();
      if (PlateWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlateWin);
      if (RainBow != 0) hash ^= RainBow.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateSymbol_.WriteTo(output, _repeated_plateSymbol_codec);
      plateTag_.WriteTo(output, _repeated_plateTag_codec);
      plateChange_.WriteTo(output, _repeated_plateChange_codec);
      awardInfo_.WriteTo(output, _repeated_awardInfo_codec);
      if (AwardType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AwardType);
      }
      if (MaxFreeRound != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxFreeRound);
      }
      if (FreeRound != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeRound);
      }
      if (PlateWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(PlateWin);
      }
      if (RainBow != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RainBow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateSymbol_.WriteTo(ref output, _repeated_plateSymbol_codec);
      plateTag_.WriteTo(ref output, _repeated_plateTag_codec);
      plateChange_.WriteTo(ref output, _repeated_plateChange_codec);
      awardInfo_.WriteTo(ref output, _repeated_awardInfo_codec);
      if (AwardType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AwardType);
      }
      if (MaxFreeRound != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MaxFreeRound);
      }
      if (FreeRound != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeRound);
      }
      if (PlateWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(PlateWin);
      }
      if (RainBow != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RainBow);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateSymbol_.CalculateSize(_repeated_plateSymbol_codec);
      size += plateTag_.CalculateSize(_repeated_plateTag_codec);
      size += plateChange_.CalculateSize(_repeated_plateChange_codec);
      size += awardInfo_.CalculateSize(_repeated_awardInfo_codec);
      if (AwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardType);
      }
      if (MaxFreeRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxFreeRound);
      }
      if (FreeRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeRound);
      }
      if (PlateWin != 0D) {
        size += 1 + 8;
      }
      if (RainBow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RainBow);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SiniglePlate other) {
      if (other == null) {
        return;
      }
      plateSymbol_.Add(other.plateSymbol_);
      plateTag_.Add(other.plateTag_);
      plateChange_.Add(other.plateChange_);
      awardInfo_.Add(other.awardInfo_);
      if (other.AwardType != 0) {
        AwardType = other.AwardType;
      }
      if (other.MaxFreeRound != 0) {
        MaxFreeRound = other.MaxFreeRound;
      }
      if (other.FreeRound != 0) {
        FreeRound = other.FreeRound;
      }
      if (other.PlateWin != 0D) {
        PlateWin = other.PlateWin;
      }
      if (other.RainBow != 0) {
        RainBow = other.RainBow;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(input, _repeated_plateSymbol_codec);
            break;
          }
          case 18: {
            plateTag_.AddEntriesFrom(input, _repeated_plateTag_codec);
            break;
          }
          case 26: {
            plateChange_.AddEntriesFrom(input, _repeated_plateChange_codec);
            break;
          }
          case 34: {
            awardInfo_.AddEntriesFrom(input, _repeated_awardInfo_codec);
            break;
          }
          case 40: {
            AwardType = input.ReadInt32();
            break;
          }
          case 48: {
            MaxFreeRound = input.ReadInt32();
            break;
          }
          case 56: {
            FreeRound = input.ReadInt32();
            break;
          }
          case 65: {
            PlateWin = input.ReadDouble();
            break;
          }
          case 72: {
            RainBow = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(ref input, _repeated_plateSymbol_codec);
            break;
          }
          case 18: {
            plateTag_.AddEntriesFrom(ref input, _repeated_plateTag_codec);
            break;
          }
          case 26: {
            plateChange_.AddEntriesFrom(ref input, _repeated_plateChange_codec);
            break;
          }
          case 34: {
            awardInfo_.AddEntriesFrom(ref input, _repeated_awardInfo_codec);
            break;
          }
          case 40: {
            AwardType = input.ReadInt32();
            break;
          }
          case 48: {
            MaxFreeRound = input.ReadInt32();
            break;
          }
          case 56: {
            FreeRound = input.ReadInt32();
            break;
          }
          case 65: {
            PlateWin = input.ReadDouble();
            break;
          }
          case 72: {
            RainBow = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FreeSpinAck : pb::IMessage<FreeSpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeSpinAck> _parser = new pb::MessageParser<FreeSpinAck>(() => new FreeSpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeSpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeSpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeSpinAck(FreeSpinAck other) : this() {
      plateInfo_ = other.plateInfo_.Clone();
      count_ = other.count_;
      isUpgrade_ = other.isUpgrade_;
      isFree_ = other.isFree_;
      isRainBow_ = other.isRainBow_;
      totalWin_ = other.totalWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeSpinAck Clone() {
      return new FreeSpinAck(this);
    }

    /// <summary>Field number for the "PlateInfo" field.</summary>
    public const int PlateInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Gem.SiniglePlate> _repeated_plateInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Gem.SiniglePlate.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Gem.SiniglePlate> plateInfo_ = new pbc::RepeatedField<global::Jili.Protocols.Gem.SiniglePlate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Gem.SiniglePlate> PlateInfo {
      get { return plateInfo_; }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "IsUpgrade" field.</summary>
    public const int IsUpgradeFieldNumber = 3;
    private bool isUpgrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUpgrade {
      get { return isUpgrade_; }
      set {
        isUpgrade_ = value;
      }
    }

    /// <summary>Field number for the "IsFree" field.</summary>
    public const int IsFreeFieldNumber = 4;
    private bool isFree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFree {
      get { return isFree_; }
      set {
        isFree_ = value;
      }
    }

    /// <summary>Field number for the "IsRainBow" field.</summary>
    public const int IsRainBowFieldNumber = 5;
    private bool isRainBow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsRainBow {
      get { return isRainBow_; }
      set {
        isRainBow_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 6;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeSpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeSpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateInfo_.Equals(other.plateInfo_)) return false;
      if (Count != other.Count) return false;
      if (IsUpgrade != other.IsUpgrade) return false;
      if (IsFree != other.IsFree) return false;
      if (IsRainBow != other.IsRainBow) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateInfo_.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (IsUpgrade != false) hash ^= IsUpgrade.GetHashCode();
      if (IsFree != false) hash ^= IsFree.GetHashCode();
      if (IsRainBow != false) hash ^= IsRainBow.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateInfo_.WriteTo(output, _repeated_plateInfo_codec);
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (IsUpgrade != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUpgrade);
      }
      if (IsFree != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFree);
      }
      if (IsRainBow != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRainBow);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateInfo_.WriteTo(ref output, _repeated_plateInfo_codec);
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (IsUpgrade != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsUpgrade);
      }
      if (IsFree != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsFree);
      }
      if (IsRainBow != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRainBow);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(TotalWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateInfo_.CalculateSize(_repeated_plateInfo_codec);
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (IsUpgrade != false) {
        size += 1 + 1;
      }
      if (IsFree != false) {
        size += 1 + 1;
      }
      if (IsRainBow != false) {
        size += 1 + 1;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeSpinAck other) {
      if (other == null) {
        return;
      }
      plateInfo_.Add(other.plateInfo_);
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.IsUpgrade != false) {
        IsUpgrade = other.IsUpgrade;
      }
      if (other.IsFree != false) {
        IsFree = other.IsFree;
      }
      if (other.IsRainBow != false) {
        IsRainBow = other.IsRainBow;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateInfo_.AddEntriesFrom(input, _repeated_plateInfo_codec);
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            IsUpgrade = input.ReadBool();
            break;
          }
          case 32: {
            IsFree = input.ReadBool();
            break;
          }
          case 40: {
            IsRainBow = input.ReadBool();
            break;
          }
          case 49: {
            TotalWin = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateInfo_.AddEntriesFrom(ref input, _repeated_plateInfo_codec);
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            IsUpgrade = input.ReadBool();
            break;
          }
          case 32: {
            IsFree = input.ReadBool();
            break;
          }
          case 40: {
            IsRainBow = input.ReadBool();
            break;
          }
          case 49: {
            TotalWin = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      row_ = other.row_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Row" field.</summary>
    public const int RowFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_row_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> row_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Row {
      get { return row_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!row_.Equals(other.row_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= row_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      row_.WriteTo(output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      row_.WriteTo(ref output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += row_.CalculateSize(_repeated_row_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      row_.Add(other.row_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(input, _repeated_row_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(ref input, _repeated_row_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardData : pb::IMessage<AwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardData> _parser = new pb::MessageParser<AwardData>(() => new AwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Gem.SpinAckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData(AwardData other) : this() {
      symbol_ = other.symbol_;
      tag_ = other.tag_;
      fREEMul_ = other.fREEMul_;
      win_ = other.win_;
      count_ = other.count_;
      oddlv_ = other.oddlv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData Clone() {
      return new AwardData(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private int symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "Tag" field.</summary>
    public const int TagFieldNumber = 2;
    private int tag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Tag {
      get { return tag_; }
      set {
        tag_ = value;
      }
    }

    /// <summary>Field number for the "FREEMul" field.</summary>
    public const int FREEMulFieldNumber = 3;
    private double fREEMul_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FREEMul {
      get { return fREEMul_; }
      set {
        fREEMul_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 4;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 5;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Oddlv" field.</summary>
    public const int OddlvFieldNumber = 6;
    private int oddlv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Oddlv {
      get { return oddlv_; }
      set {
        oddlv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Tag != other.Tag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FREEMul, other.FREEMul)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      if (Count != other.Count) return false;
      if (Oddlv != other.Oddlv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol != 0) hash ^= Symbol.GetHashCode();
      if (Tag != 0) hash ^= Tag.GetHashCode();
      if (FREEMul != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FREEMul);
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Oddlv != 0) hash ^= Oddlv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Tag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tag);
      }
      if (FREEMul != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FREEMul);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
      if (Oddlv != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Oddlv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Tag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tag);
      }
      if (FREEMul != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FREEMul);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Count);
      }
      if (Oddlv != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Oddlv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Symbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Symbol);
      }
      if (Tag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tag);
      }
      if (FREEMul != 0D) {
        size += 1 + 8;
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Oddlv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oddlv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardData other) {
      if (other == null) {
        return;
      }
      if (other.Symbol != 0) {
        Symbol = other.Symbol;
      }
      if (other.Tag != 0) {
        Tag = other.Tag;
      }
      if (other.FREEMul != 0D) {
        FREEMul = other.FREEMul;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Oddlv != 0) {
        Oddlv = other.Oddlv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Tag = input.ReadInt32();
            break;
          }
          case 25: {
            FREEMul = input.ReadDouble();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
          case 48: {
            Oddlv = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Tag = input.ReadInt32();
            break;
          }
          case 25: {
            FREEMul = input.ReadDouble();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
          case 40: {
            Count = input.ReadInt32();
            break;
          }
          case 48: {
            Oddlv = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
