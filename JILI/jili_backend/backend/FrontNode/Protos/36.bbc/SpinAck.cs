// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Bbc {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhJKaWxpLlByb3RvY29scy5CYmMioAIKB1NwaW5B",
            "Y2sSMwoJUGxhdGVJbmZvGAEgASgLMiAuSmlsaS5Qcm90b2NvbHMuQmJjLlBs",
            "YXRlSW5mb0JhbxIQCghUb3RhbFdpbhgCIAEoARIPCgdBY2tUeXBlGAMgASgF",
            "EhEKCVNob3dJbmRleBgEIAEoCRIRCglza2lwVHlwZTEYBSABKAUSEQoJc2tp",
            "cFR5cGUyGAYgASgFEhEKCXNraXBUeXBlMxgHIAEoBRIRCglza2lwVHlwZTQY",
            "CCABKAUSEQoJc2tpcFR5cGU1GAkgASgFEhEKCXNraXBUeXBlNhgKIAEoBRIR",
            "Cglza2lwVHlwZTcYCyABKAUSCwoDUlRQGAwgASgBEgsKA0xJRBgNIAEoBRIL",
            "CgNSSUQYDiABKAUiuQIKDFBsYXRlSW5mb0JhbxItCglCYW9QbGF0ZVQYASAD",
            "KAsyGi5KaWxpLlByb3RvY29scy5CYmMuQ29sdW1uEhUKDUJhb0V2ZW50UGxh",
            "dGUYAiADKAUSLQoKQXdhcmRJbmZvcxgDIAMoCzIZLkppbGkuUHJvdG9jb2xz",
            "LkJiYy5Bd2FyZBIQCghTY2F0dGVycxgEIAEoBRIRCglUb3RhbFdpbGQYBSAB",
            "KAUSEQoJVG90YWxPZGRzGAYgASgFEg8KB01haW5XaW4YByABKAESDQoFRkdX",
            "aW4YCCABKAESOQoPRnJlZUdhbWVQYWNrYWdlGAkgASgLMiAuSmlsaS5Qcm90",
            "b2NvbHMuQmJjLkZyZWVHYW1lRGF0YRIQCghOb3dNb25leRgKIAEoARIPCgdM",
            "aW5lQmV0GAsgASgBIhUKBkNvbHVtbhILCgNSb3cYASADKAUiYQoFQXdhcmQS",
            "EQoJQXdhcmRMaW5rGAEgASgFEhMKC0F3YXJkU3ltYm9sGAIgASgFEhEKCUxp",
            "bmVJbmRleBgDIAEoBRIPCgdIYXNXaWxkGAQgASgIEgwKBE9kZHMYBSABKAUi",
            "nwEKDEZyZWVHYW1lRGF0YRJAChFGcmVlR2FtZVBsYXRlSW5mbxgBIAMoCzIl",
            "LkppbGkuUHJvdG9jb2xzLkJiYy5GcmVlR2FtZVBsYXRlSW5mbxISCgpUb3Rh",
            "bFByaXplGAIgASgBEhoKElRvdGFsRnVsbFdpbGRDb3VudBgDIAEoBRINCgVU",
            "aW1lcxgEIAEoBRIOCgZNdWx0aVgYBSABKAUi9QEKEUZyZWVHYW1lUGxhdGVJ",
            "bmZvEioKBlBsYXRlVBgBIAMoCzIaLkppbGkuUHJvdG9jb2xzLkJiYy5Db2x1",
            "bW4SEgoKRXZlbnRQbGF0ZRgCIAMoBRItCgpBd2FyZEluZm9zGAMgAygLMhku",
            "SmlsaS5Qcm90b2NvbHMuQmJjLkF3YXJkEhUKDUZ1bGxXaWxkQ291bnQYBCAB",
            "KAUSEgoKQXdhcmRQcml6ZRgFIAEoARIRCglTaG93SW5kZXgYBiABKAkSEAoI",
            "Tm93TW9uZXkYByABKAESEAoITG9nSW5kZXgYCCABKAMSDwoHTGluZUJldBgJ",
            "IAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bbc.SpinAck), global::Jili.Protocols.Bbc.SpinAck.Parser, new[]{ "PlateInfo", "TotalWin", "AckType", "ShowIndex", "SkipType1", "SkipType2", "SkipType3", "SkipType4", "SkipType5", "SkipType6", "SkipType7", "RTP", "LID", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bbc.PlateInfoBao), global::Jili.Protocols.Bbc.PlateInfoBao.Parser, new[]{ "BaoPlateT", "BaoEventPlate", "AwardInfos", "Scatters", "TotalWild", "TotalOdds", "MainWin", "FGWin", "FreeGamePackage", "NowMoney", "LineBet" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bbc.Column), global::Jili.Protocols.Bbc.Column.Parser, new[]{ "Row" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bbc.Award), global::Jili.Protocols.Bbc.Award.Parser, new[]{ "AwardLink", "AwardSymbol", "LineIndex", "HasWild", "Odds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bbc.FreeGameData), global::Jili.Protocols.Bbc.FreeGameData.Parser, new[]{ "FreeGamePlateInfo", "TotalPrize", "TotalFullWildCount", "Times", "MultiX" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bbc.FreeGamePlateInfo), global::Jili.Protocols.Bbc.FreeGamePlateInfo.Parser, new[]{ "PlateT", "EventPlate", "AwardInfos", "FullWildCount", "AwardPrize", "ShowIndex", "NowMoney", "LogIndex", "LineBet" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bbc.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      plateInfo_ = other.plateInfo_ != null ? other.plateInfo_.Clone() : null;
      totalWin_ = other.totalWin_;
      ackType_ = other.ackType_;
      showIndex_ = other.showIndex_;
      skipType1_ = other.skipType1_;
      skipType2_ = other.skipType2_;
      skipType3_ = other.skipType3_;
      skipType4_ = other.skipType4_;
      skipType5_ = other.skipType5_;
      skipType6_ = other.skipType6_;
      skipType7_ = other.skipType7_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "PlateInfo" field.</summary>
    public const int PlateInfoFieldNumber = 1;
    private global::Jili.Protocols.Bbc.PlateInfoBao plateInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Bbc.PlateInfoBao PlateInfo {
      get { return plateInfo_; }
      set {
        plateInfo_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 2;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 3;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 4;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skipType1" field.</summary>
    public const int SkipType1FieldNumber = 5;
    private int skipType1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipType1 {
      get { return skipType1_; }
      set {
        skipType1_ = value;
      }
    }

    /// <summary>Field number for the "skipType2" field.</summary>
    public const int SkipType2FieldNumber = 6;
    private int skipType2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipType2 {
      get { return skipType2_; }
      set {
        skipType2_ = value;
      }
    }

    /// <summary>Field number for the "skipType3" field.</summary>
    public const int SkipType3FieldNumber = 7;
    private int skipType3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipType3 {
      get { return skipType3_; }
      set {
        skipType3_ = value;
      }
    }

    /// <summary>Field number for the "skipType4" field.</summary>
    public const int SkipType4FieldNumber = 8;
    private int skipType4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipType4 {
      get { return skipType4_; }
      set {
        skipType4_ = value;
      }
    }

    /// <summary>Field number for the "skipType5" field.</summary>
    public const int SkipType5FieldNumber = 9;
    private int skipType5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipType5 {
      get { return skipType5_; }
      set {
        skipType5_ = value;
      }
    }

    /// <summary>Field number for the "skipType6" field.</summary>
    public const int SkipType6FieldNumber = 10;
    private int skipType6_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipType6 {
      get { return skipType6_; }
      set {
        skipType6_ = value;
      }
    }

    /// <summary>Field number for the "skipType7" field.</summary>
    public const int SkipType7FieldNumber = 11;
    private int skipType7_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipType7 {
      get { return skipType7_; }
      set {
        skipType7_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 12;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 13;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 14;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlateInfo, other.PlateInfo)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (AckType != other.AckType) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (SkipType1 != other.SkipType1) return false;
      if (SkipType2 != other.SkipType2) return false;
      if (SkipType3 != other.SkipType3) return false;
      if (SkipType4 != other.SkipType4) return false;
      if (SkipType5 != other.SkipType5) return false;
      if (SkipType6 != other.SkipType6) return false;
      if (SkipType7 != other.SkipType7) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (plateInfo_ != null) hash ^= PlateInfo.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (SkipType1 != 0) hash ^= SkipType1.GetHashCode();
      if (SkipType2 != 0) hash ^= SkipType2.GetHashCode();
      if (SkipType3 != 0) hash ^= SkipType3.GetHashCode();
      if (SkipType4 != 0) hash ^= SkipType4.GetHashCode();
      if (SkipType5 != 0) hash ^= SkipType5.GetHashCode();
      if (SkipType6 != 0) hash ^= SkipType6.GetHashCode();
      if (SkipType7 != 0) hash ^= SkipType7.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (plateInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlateInfo);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalWin);
      }
      if (AckType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AckType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShowIndex);
      }
      if (SkipType1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkipType1);
      }
      if (SkipType2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SkipType2);
      }
      if (SkipType3 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SkipType3);
      }
      if (SkipType4 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SkipType4);
      }
      if (SkipType5 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SkipType5);
      }
      if (SkipType6 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SkipType6);
      }
      if (SkipType7 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SkipType7);
      }
      if (RTP != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (plateInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlateInfo);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalWin);
      }
      if (AckType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AckType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShowIndex);
      }
      if (SkipType1 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkipType1);
      }
      if (SkipType2 != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SkipType2);
      }
      if (SkipType3 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SkipType3);
      }
      if (SkipType4 != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SkipType4);
      }
      if (SkipType5 != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SkipType5);
      }
      if (SkipType6 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SkipType6);
      }
      if (SkipType7 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SkipType7);
      }
      if (RTP != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (plateInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlateInfo);
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (SkipType1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipType1);
      }
      if (SkipType2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipType2);
      }
      if (SkipType3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipType3);
      }
      if (SkipType4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipType4);
      }
      if (SkipType5 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipType5);
      }
      if (SkipType6 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipType6);
      }
      if (SkipType7 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipType7);
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (LID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      if (other.plateInfo_ != null) {
        if (plateInfo_ == null) {
          PlateInfo = new global::Jili.Protocols.Bbc.PlateInfoBao();
        }
        PlateInfo.MergeFrom(other.PlateInfo);
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.SkipType1 != 0) {
        SkipType1 = other.SkipType1;
      }
      if (other.SkipType2 != 0) {
        SkipType2 = other.SkipType2;
      }
      if (other.SkipType3 != 0) {
        SkipType3 = other.SkipType3;
      }
      if (other.SkipType4 != 0) {
        SkipType4 = other.SkipType4;
      }
      if (other.SkipType5 != 0) {
        SkipType5 = other.SkipType5;
      }
      if (other.SkipType6 != 0) {
        SkipType6 = other.SkipType6;
      }
      if (other.SkipType7 != 0) {
        SkipType7 = other.SkipType7;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (plateInfo_ == null) {
              PlateInfo = new global::Jili.Protocols.Bbc.PlateInfoBao();
            }
            input.ReadMessage(PlateInfo);
            break;
          }
          case 17: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 24: {
            AckType = input.ReadInt32();
            break;
          }
          case 34: {
            ShowIndex = input.ReadString();
            break;
          }
          case 40: {
            SkipType1 = input.ReadInt32();
            break;
          }
          case 48: {
            SkipType2 = input.ReadInt32();
            break;
          }
          case 56: {
            SkipType3 = input.ReadInt32();
            break;
          }
          case 64: {
            SkipType4 = input.ReadInt32();
            break;
          }
          case 72: {
            SkipType5 = input.ReadInt32();
            break;
          }
          case 80: {
            SkipType6 = input.ReadInt32();
            break;
          }
          case 88: {
            SkipType7 = input.ReadInt32();
            break;
          }
          case 97: {
            RTP = input.ReadDouble();
            break;
          }
          case 104: {
            LID = input.ReadInt32();
            break;
          }
          case 112: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (plateInfo_ == null) {
              PlateInfo = new global::Jili.Protocols.Bbc.PlateInfoBao();
            }
            input.ReadMessage(PlateInfo);
            break;
          }
          case 17: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 24: {
            AckType = input.ReadInt32();
            break;
          }
          case 34: {
            ShowIndex = input.ReadString();
            break;
          }
          case 40: {
            SkipType1 = input.ReadInt32();
            break;
          }
          case 48: {
            SkipType2 = input.ReadInt32();
            break;
          }
          case 56: {
            SkipType3 = input.ReadInt32();
            break;
          }
          case 64: {
            SkipType4 = input.ReadInt32();
            break;
          }
          case 72: {
            SkipType5 = input.ReadInt32();
            break;
          }
          case 80: {
            SkipType6 = input.ReadInt32();
            break;
          }
          case 88: {
            SkipType7 = input.ReadInt32();
            break;
          }
          case 97: {
            RTP = input.ReadDouble();
            break;
          }
          case 104: {
            LID = input.ReadInt32();
            break;
          }
          case 112: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlateInfoBao : pb::IMessage<PlateInfoBao>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlateInfoBao> _parser = new pb::MessageParser<PlateInfoBao>(() => new PlateInfoBao());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlateInfoBao> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bbc.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateInfoBao() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateInfoBao(PlateInfoBao other) : this() {
      baoPlateT_ = other.baoPlateT_.Clone();
      baoEventPlate_ = other.baoEventPlate_.Clone();
      awardInfos_ = other.awardInfos_.Clone();
      scatters_ = other.scatters_;
      totalWild_ = other.totalWild_;
      totalOdds_ = other.totalOdds_;
      mainWin_ = other.mainWin_;
      fGWin_ = other.fGWin_;
      freeGamePackage_ = other.freeGamePackage_ != null ? other.freeGamePackage_.Clone() : null;
      nowMoney_ = other.nowMoney_;
      lineBet_ = other.lineBet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateInfoBao Clone() {
      return new PlateInfoBao(this);
    }

    /// <summary>Field number for the "BaoPlateT" field.</summary>
    public const int BaoPlateTFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Bbc.Column> _repeated_baoPlateT_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Bbc.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Bbc.Column> baoPlateT_ = new pbc::RepeatedField<global::Jili.Protocols.Bbc.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Bbc.Column> BaoPlateT {
      get { return baoPlateT_; }
    }

    /// <summary>Field number for the "BaoEventPlate" field.</summary>
    public const int BaoEventPlateFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_baoEventPlate_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> baoEventPlate_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> BaoEventPlate {
      get { return baoEventPlate_; }
    }

    /// <summary>Field number for the "AwardInfos" field.</summary>
    public const int AwardInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Bbc.Award> _repeated_awardInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Jili.Protocols.Bbc.Award.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Bbc.Award> awardInfos_ = new pbc::RepeatedField<global::Jili.Protocols.Bbc.Award>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Bbc.Award> AwardInfos {
      get { return awardInfos_; }
    }

    /// <summary>Field number for the "Scatters" field.</summary>
    public const int ScattersFieldNumber = 4;
    private int scatters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Scatters {
      get { return scatters_; }
      set {
        scatters_ = value;
      }
    }

    /// <summary>Field number for the "TotalWild" field.</summary>
    public const int TotalWildFieldNumber = 5;
    private int totalWild_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalWild {
      get { return totalWild_; }
      set {
        totalWild_ = value;
      }
    }

    /// <summary>Field number for the "TotalOdds" field.</summary>
    public const int TotalOddsFieldNumber = 6;
    private int totalOdds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalOdds {
      get { return totalOdds_; }
      set {
        totalOdds_ = value;
      }
    }

    /// <summary>Field number for the "MainWin" field.</summary>
    public const int MainWinFieldNumber = 7;
    private double mainWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MainWin {
      get { return mainWin_; }
      set {
        mainWin_ = value;
      }
    }

    /// <summary>Field number for the "FGWin" field.</summary>
    public const int FGWinFieldNumber = 8;
    private double fGWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FGWin {
      get { return fGWin_; }
      set {
        fGWin_ = value;
      }
    }

    /// <summary>Field number for the "FreeGamePackage" field.</summary>
    public const int FreeGamePackageFieldNumber = 9;
    private global::Jili.Protocols.Bbc.FreeGameData freeGamePackage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Bbc.FreeGameData FreeGamePackage {
      get { return freeGamePackage_; }
      set {
        freeGamePackage_ = value;
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 10;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "LineBet" field.</summary>
    public const int LineBetFieldNumber = 11;
    private double lineBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LineBet {
      get { return lineBet_; }
      set {
        lineBet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlateInfoBao);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlateInfoBao other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!baoPlateT_.Equals(other.baoPlateT_)) return false;
      if(!baoEventPlate_.Equals(other.baoEventPlate_)) return false;
      if(!awardInfos_.Equals(other.awardInfos_)) return false;
      if (Scatters != other.Scatters) return false;
      if (TotalWild != other.TotalWild) return false;
      if (TotalOdds != other.TotalOdds) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MainWin, other.MainWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FGWin, other.FGWin)) return false;
      if (!object.Equals(FreeGamePackage, other.FreeGamePackage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LineBet, other.LineBet)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= baoPlateT_.GetHashCode();
      hash ^= baoEventPlate_.GetHashCode();
      hash ^= awardInfos_.GetHashCode();
      if (Scatters != 0) hash ^= Scatters.GetHashCode();
      if (TotalWild != 0) hash ^= TotalWild.GetHashCode();
      if (TotalOdds != 0) hash ^= TotalOdds.GetHashCode();
      if (MainWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MainWin);
      if (FGWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FGWin);
      if (freeGamePackage_ != null) hash ^= FreeGamePackage.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (LineBet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LineBet);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      baoPlateT_.WriteTo(output, _repeated_baoPlateT_codec);
      baoEventPlate_.WriteTo(output, _repeated_baoEventPlate_codec);
      awardInfos_.WriteTo(output, _repeated_awardInfos_codec);
      if (Scatters != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Scatters);
      }
      if (TotalWild != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalWild);
      }
      if (TotalOdds != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalOdds);
      }
      if (MainWin != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MainWin);
      }
      if (FGWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(FGWin);
      }
      if (freeGamePackage_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FreeGamePackage);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(NowMoney);
      }
      if (LineBet != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(LineBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      baoPlateT_.WriteTo(ref output, _repeated_baoPlateT_codec);
      baoEventPlate_.WriteTo(ref output, _repeated_baoEventPlate_codec);
      awardInfos_.WriteTo(ref output, _repeated_awardInfos_codec);
      if (Scatters != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Scatters);
      }
      if (TotalWild != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(TotalWild);
      }
      if (TotalOdds != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TotalOdds);
      }
      if (MainWin != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MainWin);
      }
      if (FGWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(FGWin);
      }
      if (freeGamePackage_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(FreeGamePackage);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(NowMoney);
      }
      if (LineBet != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(LineBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += baoPlateT_.CalculateSize(_repeated_baoPlateT_codec);
      size += baoEventPlate_.CalculateSize(_repeated_baoEventPlate_codec);
      size += awardInfos_.CalculateSize(_repeated_awardInfos_codec);
      if (Scatters != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Scatters);
      }
      if (TotalWild != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalWild);
      }
      if (TotalOdds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalOdds);
      }
      if (MainWin != 0D) {
        size += 1 + 8;
      }
      if (FGWin != 0D) {
        size += 1 + 8;
      }
      if (freeGamePackage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeGamePackage);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (LineBet != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlateInfoBao other) {
      if (other == null) {
        return;
      }
      baoPlateT_.Add(other.baoPlateT_);
      baoEventPlate_.Add(other.baoEventPlate_);
      awardInfos_.Add(other.awardInfos_);
      if (other.Scatters != 0) {
        Scatters = other.Scatters;
      }
      if (other.TotalWild != 0) {
        TotalWild = other.TotalWild;
      }
      if (other.TotalOdds != 0) {
        TotalOdds = other.TotalOdds;
      }
      if (other.MainWin != 0D) {
        MainWin = other.MainWin;
      }
      if (other.FGWin != 0D) {
        FGWin = other.FGWin;
      }
      if (other.freeGamePackage_ != null) {
        if (freeGamePackage_ == null) {
          FreeGamePackage = new global::Jili.Protocols.Bbc.FreeGameData();
        }
        FreeGamePackage.MergeFrom(other.FreeGamePackage);
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.LineBet != 0D) {
        LineBet = other.LineBet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            baoPlateT_.AddEntriesFrom(input, _repeated_baoPlateT_codec);
            break;
          }
          case 18:
          case 16: {
            baoEventPlate_.AddEntriesFrom(input, _repeated_baoEventPlate_codec);
            break;
          }
          case 26: {
            awardInfos_.AddEntriesFrom(input, _repeated_awardInfos_codec);
            break;
          }
          case 32: {
            Scatters = input.ReadInt32();
            break;
          }
          case 40: {
            TotalWild = input.ReadInt32();
            break;
          }
          case 48: {
            TotalOdds = input.ReadInt32();
            break;
          }
          case 57: {
            MainWin = input.ReadDouble();
            break;
          }
          case 65: {
            FGWin = input.ReadDouble();
            break;
          }
          case 74: {
            if (freeGamePackage_ == null) {
              FreeGamePackage = new global::Jili.Protocols.Bbc.FreeGameData();
            }
            input.ReadMessage(FreeGamePackage);
            break;
          }
          case 81: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 89: {
            LineBet = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            baoPlateT_.AddEntriesFrom(ref input, _repeated_baoPlateT_codec);
            break;
          }
          case 18:
          case 16: {
            baoEventPlate_.AddEntriesFrom(ref input, _repeated_baoEventPlate_codec);
            break;
          }
          case 26: {
            awardInfos_.AddEntriesFrom(ref input, _repeated_awardInfos_codec);
            break;
          }
          case 32: {
            Scatters = input.ReadInt32();
            break;
          }
          case 40: {
            TotalWild = input.ReadInt32();
            break;
          }
          case 48: {
            TotalOdds = input.ReadInt32();
            break;
          }
          case 57: {
            MainWin = input.ReadDouble();
            break;
          }
          case 65: {
            FGWin = input.ReadDouble();
            break;
          }
          case 74: {
            if (freeGamePackage_ == null) {
              FreeGamePackage = new global::Jili.Protocols.Bbc.FreeGameData();
            }
            input.ReadMessage(FreeGamePackage);
            break;
          }
          case 81: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 89: {
            LineBet = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bbc.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      row_ = other.row_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Row" field.</summary>
    public const int RowFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_row_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> row_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Row {
      get { return row_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!row_.Equals(other.row_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= row_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      row_.WriteTo(output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      row_.WriteTo(ref output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += row_.CalculateSize(_repeated_row_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      row_.Add(other.row_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(input, _repeated_row_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(ref input, _repeated_row_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Award : pb::IMessage<Award>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Award> _parser = new pb::MessageParser<Award>(() => new Award());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bbc.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Award(Award other) : this() {
      awardLink_ = other.awardLink_;
      awardSymbol_ = other.awardSymbol_;
      lineIndex_ = other.lineIndex_;
      hasWild_ = other.hasWild_;
      odds_ = other.odds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Award Clone() {
      return new Award(this);
    }

    /// <summary>Field number for the "AwardLink" field.</summary>
    public const int AwardLinkFieldNumber = 1;
    private int awardLink_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardLink {
      get { return awardLink_; }
      set {
        awardLink_ = value;
      }
    }

    /// <summary>Field number for the "AwardSymbol" field.</summary>
    public const int AwardSymbolFieldNumber = 2;
    private int awardSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardSymbol {
      get { return awardSymbol_; }
      set {
        awardSymbol_ = value;
      }
    }

    /// <summary>Field number for the "LineIndex" field.</summary>
    public const int LineIndexFieldNumber = 3;
    private int lineIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LineIndex {
      get { return lineIndex_; }
      set {
        lineIndex_ = value;
      }
    }

    /// <summary>Field number for the "HasWild" field.</summary>
    public const int HasWildFieldNumber = 4;
    private bool hasWild_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWild {
      get { return hasWild_; }
      set {
        hasWild_ = value;
      }
    }

    /// <summary>Field number for the "Odds" field.</summary>
    public const int OddsFieldNumber = 5;
    private int odds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Odds {
      get { return odds_; }
      set {
        odds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AwardLink != other.AwardLink) return false;
      if (AwardSymbol != other.AwardSymbol) return false;
      if (LineIndex != other.LineIndex) return false;
      if (HasWild != other.HasWild) return false;
      if (Odds != other.Odds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AwardLink != 0) hash ^= AwardLink.GetHashCode();
      if (AwardSymbol != 0) hash ^= AwardSymbol.GetHashCode();
      if (LineIndex != 0) hash ^= LineIndex.GetHashCode();
      if (HasWild != false) hash ^= HasWild.GetHashCode();
      if (Odds != 0) hash ^= Odds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AwardLink != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AwardLink);
      }
      if (AwardSymbol != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AwardSymbol);
      }
      if (LineIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineIndex);
      }
      if (HasWild != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasWild);
      }
      if (Odds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Odds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AwardLink != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AwardLink);
      }
      if (AwardSymbol != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AwardSymbol);
      }
      if (LineIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineIndex);
      }
      if (HasWild != false) {
        output.WriteRawTag(32);
        output.WriteBool(HasWild);
      }
      if (Odds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Odds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AwardLink != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardLink);
      }
      if (AwardSymbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardSymbol);
      }
      if (LineIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineIndex);
      }
      if (HasWild != false) {
        size += 1 + 1;
      }
      if (Odds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Odds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Award other) {
      if (other == null) {
        return;
      }
      if (other.AwardLink != 0) {
        AwardLink = other.AwardLink;
      }
      if (other.AwardSymbol != 0) {
        AwardSymbol = other.AwardSymbol;
      }
      if (other.LineIndex != 0) {
        LineIndex = other.LineIndex;
      }
      if (other.HasWild != false) {
        HasWild = other.HasWild;
      }
      if (other.Odds != 0) {
        Odds = other.Odds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AwardLink = input.ReadInt32();
            break;
          }
          case 16: {
            AwardSymbol = input.ReadInt32();
            break;
          }
          case 24: {
            LineIndex = input.ReadInt32();
            break;
          }
          case 32: {
            HasWild = input.ReadBool();
            break;
          }
          case 40: {
            Odds = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AwardLink = input.ReadInt32();
            break;
          }
          case 16: {
            AwardSymbol = input.ReadInt32();
            break;
          }
          case 24: {
            LineIndex = input.ReadInt32();
            break;
          }
          case 32: {
            HasWild = input.ReadBool();
            break;
          }
          case 40: {
            Odds = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FreeGameData : pb::IMessage<FreeGameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeGameData> _parser = new pb::MessageParser<FreeGameData>(() => new FreeGameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeGameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bbc.SpinAckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGameData(FreeGameData other) : this() {
      freeGamePlateInfo_ = other.freeGamePlateInfo_.Clone();
      totalPrize_ = other.totalPrize_;
      totalFullWildCount_ = other.totalFullWildCount_;
      times_ = other.times_;
      multiX_ = other.multiX_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGameData Clone() {
      return new FreeGameData(this);
    }

    /// <summary>Field number for the "FreeGamePlateInfo" field.</summary>
    public const int FreeGamePlateInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Bbc.FreeGamePlateInfo> _repeated_freeGamePlateInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Bbc.FreeGamePlateInfo.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Bbc.FreeGamePlateInfo> freeGamePlateInfo_ = new pbc::RepeatedField<global::Jili.Protocols.Bbc.FreeGamePlateInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Bbc.FreeGamePlateInfo> FreeGamePlateInfo {
      get { return freeGamePlateInfo_; }
    }

    /// <summary>Field number for the "TotalPrize" field.</summary>
    public const int TotalPrizeFieldNumber = 2;
    private double totalPrize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalPrize {
      get { return totalPrize_; }
      set {
        totalPrize_ = value;
      }
    }

    /// <summary>Field number for the "TotalFullWildCount" field.</summary>
    public const int TotalFullWildCountFieldNumber = 3;
    private int totalFullWildCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalFullWildCount {
      get { return totalFullWildCount_; }
      set {
        totalFullWildCount_ = value;
      }
    }

    /// <summary>Field number for the "Times" field.</summary>
    public const int TimesFieldNumber = 4;
    private int times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "MultiX" field.</summary>
    public const int MultiXFieldNumber = 5;
    private int multiX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MultiX {
      get { return multiX_; }
      set {
        multiX_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeGameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeGameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!freeGamePlateInfo_.Equals(other.freeGamePlateInfo_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalPrize, other.TotalPrize)) return false;
      if (TotalFullWildCount != other.TotalFullWildCount) return false;
      if (Times != other.Times) return false;
      if (MultiX != other.MultiX) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= freeGamePlateInfo_.GetHashCode();
      if (TotalPrize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalPrize);
      if (TotalFullWildCount != 0) hash ^= TotalFullWildCount.GetHashCode();
      if (Times != 0) hash ^= Times.GetHashCode();
      if (MultiX != 0) hash ^= MultiX.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      freeGamePlateInfo_.WriteTo(output, _repeated_freeGamePlateInfo_codec);
      if (TotalPrize != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalPrize);
      }
      if (TotalFullWildCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalFullWildCount);
      }
      if (Times != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Times);
      }
      if (MultiX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MultiX);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      freeGamePlateInfo_.WriteTo(ref output, _repeated_freeGamePlateInfo_codec);
      if (TotalPrize != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalPrize);
      }
      if (TotalFullWildCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalFullWildCount);
      }
      if (Times != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Times);
      }
      if (MultiX != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MultiX);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += freeGamePlateInfo_.CalculateSize(_repeated_freeGamePlateInfo_codec);
      if (TotalPrize != 0D) {
        size += 1 + 8;
      }
      if (TotalFullWildCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalFullWildCount);
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (MultiX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MultiX);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeGameData other) {
      if (other == null) {
        return;
      }
      freeGamePlateInfo_.Add(other.freeGamePlateInfo_);
      if (other.TotalPrize != 0D) {
        TotalPrize = other.TotalPrize;
      }
      if (other.TotalFullWildCount != 0) {
        TotalFullWildCount = other.TotalFullWildCount;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.MultiX != 0) {
        MultiX = other.MultiX;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            freeGamePlateInfo_.AddEntriesFrom(input, _repeated_freeGamePlateInfo_codec);
            break;
          }
          case 17: {
            TotalPrize = input.ReadDouble();
            break;
          }
          case 24: {
            TotalFullWildCount = input.ReadInt32();
            break;
          }
          case 32: {
            Times = input.ReadInt32();
            break;
          }
          case 40: {
            MultiX = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            freeGamePlateInfo_.AddEntriesFrom(ref input, _repeated_freeGamePlateInfo_codec);
            break;
          }
          case 17: {
            TotalPrize = input.ReadDouble();
            break;
          }
          case 24: {
            TotalFullWildCount = input.ReadInt32();
            break;
          }
          case 32: {
            Times = input.ReadInt32();
            break;
          }
          case 40: {
            MultiX = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FreeGamePlateInfo : pb::IMessage<FreeGamePlateInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeGamePlateInfo> _parser = new pb::MessageParser<FreeGamePlateInfo>(() => new FreeGamePlateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeGamePlateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bbc.SpinAckReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGamePlateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGamePlateInfo(FreeGamePlateInfo other) : this() {
      plateT_ = other.plateT_.Clone();
      eventPlate_ = other.eventPlate_.Clone();
      awardInfos_ = other.awardInfos_.Clone();
      fullWildCount_ = other.fullWildCount_;
      awardPrize_ = other.awardPrize_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      logIndex_ = other.logIndex_;
      lineBet_ = other.lineBet_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGamePlateInfo Clone() {
      return new FreeGamePlateInfo(this);
    }

    /// <summary>Field number for the "PlateT" field.</summary>
    public const int PlateTFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Bbc.Column> _repeated_plateT_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Bbc.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Bbc.Column> plateT_ = new pbc::RepeatedField<global::Jili.Protocols.Bbc.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Bbc.Column> PlateT {
      get { return plateT_; }
    }

    /// <summary>Field number for the "EventPlate" field.</summary>
    public const int EventPlateFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_eventPlate_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> eventPlate_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> EventPlate {
      get { return eventPlate_; }
    }

    /// <summary>Field number for the "AwardInfos" field.</summary>
    public const int AwardInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Bbc.Award> _repeated_awardInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Jili.Protocols.Bbc.Award.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Bbc.Award> awardInfos_ = new pbc::RepeatedField<global::Jili.Protocols.Bbc.Award>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Bbc.Award> AwardInfos {
      get { return awardInfos_; }
    }

    /// <summary>Field number for the "FullWildCount" field.</summary>
    public const int FullWildCountFieldNumber = 4;
    private int fullWildCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FullWildCount {
      get { return fullWildCount_; }
      set {
        fullWildCount_ = value;
      }
    }

    /// <summary>Field number for the "AwardPrize" field.</summary>
    public const int AwardPrizeFieldNumber = 5;
    private double awardPrize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AwardPrize {
      get { return awardPrize_; }
      set {
        awardPrize_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 6;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 7;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "LogIndex" field.</summary>
    public const int LogIndexFieldNumber = 8;
    private long logIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LogIndex {
      get { return logIndex_; }
      set {
        logIndex_ = value;
      }
    }

    /// <summary>Field number for the "LineBet" field.</summary>
    public const int LineBetFieldNumber = 9;
    private double lineBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LineBet {
      get { return lineBet_; }
      set {
        lineBet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeGamePlateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeGamePlateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateT_.Equals(other.plateT_)) return false;
      if(!eventPlate_.Equals(other.eventPlate_)) return false;
      if(!awardInfos_.Equals(other.awardInfos_)) return false;
      if (FullWildCount != other.FullWildCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AwardPrize, other.AwardPrize)) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (LogIndex != other.LogIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LineBet, other.LineBet)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateT_.GetHashCode();
      hash ^= eventPlate_.GetHashCode();
      hash ^= awardInfos_.GetHashCode();
      if (FullWildCount != 0) hash ^= FullWildCount.GetHashCode();
      if (AwardPrize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AwardPrize);
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (LogIndex != 0L) hash ^= LogIndex.GetHashCode();
      if (LineBet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LineBet);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateT_.WriteTo(output, _repeated_plateT_codec);
      eventPlate_.WriteTo(output, _repeated_eventPlate_codec);
      awardInfos_.WriteTo(output, _repeated_awardInfos_codec);
      if (FullWildCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FullWildCount);
      }
      if (AwardPrize != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AwardPrize);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(NowMoney);
      }
      if (LogIndex != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LogIndex);
      }
      if (LineBet != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(LineBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateT_.WriteTo(ref output, _repeated_plateT_codec);
      eventPlate_.WriteTo(ref output, _repeated_eventPlate_codec);
      awardInfos_.WriteTo(ref output, _repeated_awardInfos_codec);
      if (FullWildCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FullWildCount);
      }
      if (AwardPrize != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(AwardPrize);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(NowMoney);
      }
      if (LogIndex != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(LogIndex);
      }
      if (LineBet != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(LineBet);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateT_.CalculateSize(_repeated_plateT_codec);
      size += eventPlate_.CalculateSize(_repeated_eventPlate_codec);
      size += awardInfos_.CalculateSize(_repeated_awardInfos_codec);
      if (FullWildCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FullWildCount);
      }
      if (AwardPrize != 0D) {
        size += 1 + 8;
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (LogIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LogIndex);
      }
      if (LineBet != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeGamePlateInfo other) {
      if (other == null) {
        return;
      }
      plateT_.Add(other.plateT_);
      eventPlate_.Add(other.eventPlate_);
      awardInfos_.Add(other.awardInfos_);
      if (other.FullWildCount != 0) {
        FullWildCount = other.FullWildCount;
      }
      if (other.AwardPrize != 0D) {
        AwardPrize = other.AwardPrize;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.LogIndex != 0L) {
        LogIndex = other.LogIndex;
      }
      if (other.LineBet != 0D) {
        LineBet = other.LineBet;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateT_.AddEntriesFrom(input, _repeated_plateT_codec);
            break;
          }
          case 18:
          case 16: {
            eventPlate_.AddEntriesFrom(input, _repeated_eventPlate_codec);
            break;
          }
          case 26: {
            awardInfos_.AddEntriesFrom(input, _repeated_awardInfos_codec);
            break;
          }
          case 32: {
            FullWildCount = input.ReadInt32();
            break;
          }
          case 41: {
            AwardPrize = input.ReadDouble();
            break;
          }
          case 50: {
            ShowIndex = input.ReadString();
            break;
          }
          case 57: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 64: {
            LogIndex = input.ReadInt64();
            break;
          }
          case 73: {
            LineBet = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateT_.AddEntriesFrom(ref input, _repeated_plateT_codec);
            break;
          }
          case 18:
          case 16: {
            eventPlate_.AddEntriesFrom(ref input, _repeated_eventPlate_codec);
            break;
          }
          case 26: {
            awardInfos_.AddEntriesFrom(ref input, _repeated_awardInfos_codec);
            break;
          }
          case 32: {
            FullWildCount = input.ReadInt32();
            break;
          }
          case 41: {
            AwardPrize = input.ReadDouble();
            break;
          }
          case 50: {
            ShowIndex = input.ReadString();
            break;
          }
          case 57: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 64: {
            LogIndex = input.ReadInt64();
            break;
          }
          case 73: {
            LineBet = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
