// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Luckytree {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhhKaWxpLlByb3RvY29scy5MdWNreXRyZWUi0gIK",
            "B1NwaW5BY2sSNgoJUGxhdGVEYXRhGAEgASgLMiMuSmlsaS5Qcm90b2NvbHMu",
            "THVja3l0cmVlLlBsYXRlRGF0YRI+Cg1Cb251c0dhbWVEYXRhGAIgASgLMicu",
            "SmlsaS5Qcm90b2NvbHMuTHVja3l0cmVlLkJvbnVzR2FtZURhdGESPAoMRnJl",
            "ZUdhbWVEYXRhGAMgASgLMiYuSmlsaS5Qcm90b2NvbHMuTHVja3l0cmVlLkZy",
            "ZWVHYW1lRGF0YRIQCghUb3RhbFdpbhgEIAEoARIRCglBd2FyZFR5cGUYBSAB",
            "KAUSEQoJU2hvd0luZGV4GAYgASgJEhAKCE5vd01vbmV5GAcgASgBEg8KB0Fj",
            "a1R5cGUYCCABKAUSCwoDUlRQGAkgASgBEgsKA0xJRBgKIAEoBRILCgNSSUQY",
            "CyABKAUSDwoHTWF4RmxhZxgMIAEoCCK1AQoJUGxhdGVEYXRhEhEKCUhpdFBv",
            "c1ZlYxgBIAMoBRIUCgxMdWNreVRyZWVWZWMYAiADKAUSMQoIQXdhcmRWZWMY",
            "AyADKAsyHy5KaWxpLlByb3RvY29scy5MdWNreXRyZWUuQXdhcmQSDQoFUGxh",
            "dGUYBCADKAUSEAoIV2luTW9uZXkYBSABKAESFQoNQXdhcmRUeXBlRmxhZxgG",
            "IAEoBRIUCgxGcmVlR2FtZVRpbWUYByABKAUiUwoFQXdhcmQSFQoNQXdhcmRU",
            "eXBlRmxhZxgBIAEoBRITCgtBd2FyZFN5bWJvbBgCIAEoBRIRCglBd2FyZExp",
            "bmUYAyABKAUSCwoDV2luGAQgASgBIrUBCg1Cb251c0dhbWVEYXRhEhIKClRv",
            "dGFsUm91bmQYASABKAUSCwoDQmV0GAIgASgBEjsKCUhpdFJlY29yZBgDIAMo",
            "CzIoLkppbGkuUHJvdG9jb2xzLkx1Y2t5dHJlZS5Cb251c0hpdFJlY29yZBIN",
            "CgVPdGhlchgEIAMoBRIQCghUb3RhbFdpbhgFIAEoARIQCghIaXRDb3VudBgG",
            "IAMoBRITCgtIaXRDb3VudFdpbhgHIAMoASIvCg5Cb251c0hpdFJlY29yZBIL",
            "CgNTeW0YASABKAUSEAoISGl0Q291bnQYAiABKAUigwEKDEZyZWVHYW1lRGF0",
            "YRI5CgxQbGF0ZURhdGFWZWMYASADKAsyIy5KaWxpLlByb3RvY29scy5MdWNr",
            "eXRyZWUuUGxhdGVEYXRhEhAKCFRvdGFsV2luGAIgASgBEhIKClRvdGFsVGlt",
            "ZXMYAyABKAUSEgoKQmVnaW5UaW1lcxgEIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Luckytree.SpinAck), global::Jili.Protocols.Luckytree.SpinAck.Parser, new[]{ "PlateData", "BonusGameData", "FreeGameData", "TotalWin", "AwardType", "ShowIndex", "NowMoney", "AckType", "RTP", "LID", "RID", "MaxFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Luckytree.PlateData), global::Jili.Protocols.Luckytree.PlateData.Parser, new[]{ "HitPosVec", "LuckyTreeVec", "AwardVec", "Plate", "WinMoney", "AwardTypeFlag", "FreeGameTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Luckytree.Award), global::Jili.Protocols.Luckytree.Award.Parser, new[]{ "AwardTypeFlag", "AwardSymbol", "AwardLine", "Win" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Luckytree.BonusGameData), global::Jili.Protocols.Luckytree.BonusGameData.Parser, new[]{ "TotalRound", "Bet", "HitRecord", "Other", "TotalWin", "HitCount", "HitCountWin" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Luckytree.BonusHitRecord), global::Jili.Protocols.Luckytree.BonusHitRecord.Parser, new[]{ "Sym", "HitCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Luckytree.FreeGameData), global::Jili.Protocols.Luckytree.FreeGameData.Parser, new[]{ "PlateDataVec", "TotalWin", "TotalTimes", "BeginTimes" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Luckytree.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      plateData_ = other.plateData_ != null ? other.plateData_.Clone() : null;
      bonusGameData_ = other.bonusGameData_ != null ? other.bonusGameData_.Clone() : null;
      freeGameData_ = other.freeGameData_ != null ? other.freeGameData_.Clone() : null;
      totalWin_ = other.totalWin_;
      awardType_ = other.awardType_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      maxFlag_ = other.maxFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "PlateData" field.</summary>
    public const int PlateDataFieldNumber = 1;
    private global::Jili.Protocols.Luckytree.PlateData plateData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Luckytree.PlateData PlateData {
      get { return plateData_; }
      set {
        plateData_ = value;
      }
    }

    /// <summary>Field number for the "BonusGameData" field.</summary>
    public const int BonusGameDataFieldNumber = 2;
    private global::Jili.Protocols.Luckytree.BonusGameData bonusGameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Luckytree.BonusGameData BonusGameData {
      get { return bonusGameData_; }
      set {
        bonusGameData_ = value;
      }
    }

    /// <summary>Field number for the "FreeGameData" field.</summary>
    public const int FreeGameDataFieldNumber = 3;
    private global::Jili.Protocols.Luckytree.FreeGameData freeGameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Luckytree.FreeGameData FreeGameData {
      get { return freeGameData_; }
      set {
        freeGameData_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 4;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "AwardType" field.</summary>
    public const int AwardTypeFieldNumber = 5;
    private int awardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardType {
      get { return awardType_; }
      set {
        awardType_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 6;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 7;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 8;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 9;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 10;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 11;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    /// <summary>Field number for the "MaxFlag" field.</summary>
    public const int MaxFlagFieldNumber = 12;
    private bool maxFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MaxFlag {
      get { return maxFlag_; }
      set {
        maxFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlateData, other.PlateData)) return false;
      if (!object.Equals(BonusGameData, other.BonusGameData)) return false;
      if (!object.Equals(FreeGameData, other.FreeGameData)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (AwardType != other.AwardType) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      if (MaxFlag != other.MaxFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (plateData_ != null) hash ^= PlateData.GetHashCode();
      if (bonusGameData_ != null) hash ^= BonusGameData.GetHashCode();
      if (freeGameData_ != null) hash ^= FreeGameData.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (AwardType != 0) hash ^= AwardType.GetHashCode();
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (MaxFlag != false) hash ^= MaxFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (plateData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlateData);
      }
      if (bonusGameData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BonusGameData);
      }
      if (freeGameData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FreeGameData);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AwardType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RID);
      }
      if (MaxFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (plateData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlateData);
      }
      if (bonusGameData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BonusGameData);
      }
      if (freeGameData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FreeGameData);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AwardType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RID);
      }
      if (MaxFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (plateData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlateData);
      }
      if (bonusGameData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BonusGameData);
      }
      if (freeGameData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeGameData);
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (AwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardType);
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (LID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (MaxFlag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      if (other.plateData_ != null) {
        if (plateData_ == null) {
          PlateData = new global::Jili.Protocols.Luckytree.PlateData();
        }
        PlateData.MergeFrom(other.PlateData);
      }
      if (other.bonusGameData_ != null) {
        if (bonusGameData_ == null) {
          BonusGameData = new global::Jili.Protocols.Luckytree.BonusGameData();
        }
        BonusGameData.MergeFrom(other.BonusGameData);
      }
      if (other.freeGameData_ != null) {
        if (freeGameData_ == null) {
          FreeGameData = new global::Jili.Protocols.Luckytree.FreeGameData();
        }
        FreeGameData.MergeFrom(other.FreeGameData);
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.AwardType != 0) {
        AwardType = other.AwardType;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      if (other.MaxFlag != false) {
        MaxFlag = other.MaxFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (plateData_ == null) {
              PlateData = new global::Jili.Protocols.Luckytree.PlateData();
            }
            input.ReadMessage(PlateData);
            break;
          }
          case 18: {
            if (bonusGameData_ == null) {
              BonusGameData = new global::Jili.Protocols.Luckytree.BonusGameData();
            }
            input.ReadMessage(BonusGameData);
            break;
          }
          case 26: {
            if (freeGameData_ == null) {
              FreeGameData = new global::Jili.Protocols.Luckytree.FreeGameData();
            }
            input.ReadMessage(FreeGameData);
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 40: {
            AwardType = input.ReadInt32();
            break;
          }
          case 50: {
            ShowIndex = input.ReadString();
            break;
          }
          case 57: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 64: {
            AckType = input.ReadInt32();
            break;
          }
          case 73: {
            RTP = input.ReadDouble();
            break;
          }
          case 80: {
            LID = input.ReadInt32();
            break;
          }
          case 88: {
            RID = input.ReadInt32();
            break;
          }
          case 96: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (plateData_ == null) {
              PlateData = new global::Jili.Protocols.Luckytree.PlateData();
            }
            input.ReadMessage(PlateData);
            break;
          }
          case 18: {
            if (bonusGameData_ == null) {
              BonusGameData = new global::Jili.Protocols.Luckytree.BonusGameData();
            }
            input.ReadMessage(BonusGameData);
            break;
          }
          case 26: {
            if (freeGameData_ == null) {
              FreeGameData = new global::Jili.Protocols.Luckytree.FreeGameData();
            }
            input.ReadMessage(FreeGameData);
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 40: {
            AwardType = input.ReadInt32();
            break;
          }
          case 50: {
            ShowIndex = input.ReadString();
            break;
          }
          case 57: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 64: {
            AckType = input.ReadInt32();
            break;
          }
          case 73: {
            RTP = input.ReadDouble();
            break;
          }
          case 80: {
            LID = input.ReadInt32();
            break;
          }
          case 88: {
            RID = input.ReadInt32();
            break;
          }
          case 96: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlateData : pb::IMessage<PlateData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlateData> _parser = new pb::MessageParser<PlateData>(() => new PlateData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlateData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Luckytree.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateData(PlateData other) : this() {
      hitPosVec_ = other.hitPosVec_.Clone();
      luckyTreeVec_ = other.luckyTreeVec_.Clone();
      awardVec_ = other.awardVec_.Clone();
      plate_ = other.plate_.Clone();
      winMoney_ = other.winMoney_;
      awardTypeFlag_ = other.awardTypeFlag_;
      freeGameTime_ = other.freeGameTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateData Clone() {
      return new PlateData(this);
    }

    /// <summary>Field number for the "HitPosVec" field.</summary>
    public const int HitPosVecFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_hitPosVec_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> hitPosVec_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> HitPosVec {
      get { return hitPosVec_; }
    }

    /// <summary>Field number for the "LuckyTreeVec" field.</summary>
    public const int LuckyTreeVecFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_luckyTreeVec_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> luckyTreeVec_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> LuckyTreeVec {
      get { return luckyTreeVec_; }
    }

    /// <summary>Field number for the "AwardVec" field.</summary>
    public const int AwardVecFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Luckytree.Award> _repeated_awardVec_codec
        = pb::FieldCodec.ForMessage(26, global::Jili.Protocols.Luckytree.Award.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Luckytree.Award> awardVec_ = new pbc::RepeatedField<global::Jili.Protocols.Luckytree.Award>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Luckytree.Award> AwardVec {
      get { return awardVec_; }
    }

    /// <summary>Field number for the "Plate" field.</summary>
    public const int PlateFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_plate_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> plate_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Plate {
      get { return plate_; }
    }

    /// <summary>Field number for the "WinMoney" field.</summary>
    public const int WinMoneyFieldNumber = 5;
    private double winMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WinMoney {
      get { return winMoney_; }
      set {
        winMoney_ = value;
      }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 6;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "FreeGameTime" field.</summary>
    public const int FreeGameTimeFieldNumber = 7;
    private int freeGameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeGameTime {
      get { return freeGameTime_; }
      set {
        freeGameTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlateData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlateData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hitPosVec_.Equals(other.hitPosVec_)) return false;
      if(!luckyTreeVec_.Equals(other.luckyTreeVec_)) return false;
      if(!awardVec_.Equals(other.awardVec_)) return false;
      if(!plate_.Equals(other.plate_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WinMoney, other.WinMoney)) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (FreeGameTime != other.FreeGameTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hitPosVec_.GetHashCode();
      hash ^= luckyTreeVec_.GetHashCode();
      hash ^= awardVec_.GetHashCode();
      hash ^= plate_.GetHashCode();
      if (WinMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WinMoney);
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (FreeGameTime != 0) hash ^= FreeGameTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      hitPosVec_.WriteTo(output, _repeated_hitPosVec_codec);
      luckyTreeVec_.WriteTo(output, _repeated_luckyTreeVec_codec);
      awardVec_.WriteTo(output, _repeated_awardVec_codec);
      plate_.WriteTo(output, _repeated_plate_codec);
      if (WinMoney != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(WinMoney);
      }
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AwardTypeFlag);
      }
      if (FreeGameTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeGameTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      hitPosVec_.WriteTo(ref output, _repeated_hitPosVec_codec);
      luckyTreeVec_.WriteTo(ref output, _repeated_luckyTreeVec_codec);
      awardVec_.WriteTo(ref output, _repeated_awardVec_codec);
      plate_.WriteTo(ref output, _repeated_plate_codec);
      if (WinMoney != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(WinMoney);
      }
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AwardTypeFlag);
      }
      if (FreeGameTime != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FreeGameTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += hitPosVec_.CalculateSize(_repeated_hitPosVec_codec);
      size += luckyTreeVec_.CalculateSize(_repeated_luckyTreeVec_codec);
      size += awardVec_.CalculateSize(_repeated_awardVec_codec);
      size += plate_.CalculateSize(_repeated_plate_codec);
      if (WinMoney != 0D) {
        size += 1 + 8;
      }
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (FreeGameTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeGameTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlateData other) {
      if (other == null) {
        return;
      }
      hitPosVec_.Add(other.hitPosVec_);
      luckyTreeVec_.Add(other.luckyTreeVec_);
      awardVec_.Add(other.awardVec_);
      plate_.Add(other.plate_);
      if (other.WinMoney != 0D) {
        WinMoney = other.WinMoney;
      }
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.FreeGameTime != 0) {
        FreeGameTime = other.FreeGameTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            hitPosVec_.AddEntriesFrom(input, _repeated_hitPosVec_codec);
            break;
          }
          case 18:
          case 16: {
            luckyTreeVec_.AddEntriesFrom(input, _repeated_luckyTreeVec_codec);
            break;
          }
          case 26: {
            awardVec_.AddEntriesFrom(input, _repeated_awardVec_codec);
            break;
          }
          case 34:
          case 32: {
            plate_.AddEntriesFrom(input, _repeated_plate_codec);
            break;
          }
          case 41: {
            WinMoney = input.ReadDouble();
            break;
          }
          case 48: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 56: {
            FreeGameTime = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            hitPosVec_.AddEntriesFrom(ref input, _repeated_hitPosVec_codec);
            break;
          }
          case 18:
          case 16: {
            luckyTreeVec_.AddEntriesFrom(ref input, _repeated_luckyTreeVec_codec);
            break;
          }
          case 26: {
            awardVec_.AddEntriesFrom(ref input, _repeated_awardVec_codec);
            break;
          }
          case 34:
          case 32: {
            plate_.AddEntriesFrom(ref input, _repeated_plate_codec);
            break;
          }
          case 41: {
            WinMoney = input.ReadDouble();
            break;
          }
          case 48: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 56: {
            FreeGameTime = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Award : pb::IMessage<Award>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Award> _parser = new pb::MessageParser<Award>(() => new Award());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Luckytree.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Award(Award other) : this() {
      awardTypeFlag_ = other.awardTypeFlag_;
      awardSymbol_ = other.awardSymbol_;
      awardLine_ = other.awardLine_;
      win_ = other.win_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Award Clone() {
      return new Award(this);
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 1;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "AwardSymbol" field.</summary>
    public const int AwardSymbolFieldNumber = 2;
    private int awardSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardSymbol {
      get { return awardSymbol_; }
      set {
        awardSymbol_ = value;
      }
    }

    /// <summary>Field number for the "AwardLine" field.</summary>
    public const int AwardLineFieldNumber = 3;
    private int awardLine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardLine {
      get { return awardLine_; }
      set {
        awardLine_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 4;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (AwardSymbol != other.AwardSymbol) return false;
      if (AwardLine != other.AwardLine) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (AwardSymbol != 0) hash ^= AwardSymbol.GetHashCode();
      if (AwardLine != 0) hash ^= AwardLine.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AwardTypeFlag);
      }
      if (AwardSymbol != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AwardSymbol);
      }
      if (AwardLine != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AwardLine);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AwardTypeFlag);
      }
      if (AwardSymbol != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AwardSymbol);
      }
      if (AwardLine != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AwardLine);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (AwardSymbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardSymbol);
      }
      if (AwardLine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardLine);
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Award other) {
      if (other == null) {
        return;
      }
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.AwardSymbol != 0) {
        AwardSymbol = other.AwardSymbol;
      }
      if (other.AwardLine != 0) {
        AwardLine = other.AwardLine;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 16: {
            AwardSymbol = input.ReadInt32();
            break;
          }
          case 24: {
            AwardLine = input.ReadInt32();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 16: {
            AwardSymbol = input.ReadInt32();
            break;
          }
          case 24: {
            AwardLine = input.ReadInt32();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BonusGameData : pb::IMessage<BonusGameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BonusGameData> _parser = new pb::MessageParser<BonusGameData>(() => new BonusGameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BonusGameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Luckytree.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BonusGameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BonusGameData(BonusGameData other) : this() {
      totalRound_ = other.totalRound_;
      bet_ = other.bet_;
      hitRecord_ = other.hitRecord_.Clone();
      other_ = other.other_.Clone();
      totalWin_ = other.totalWin_;
      hitCount_ = other.hitCount_.Clone();
      hitCountWin_ = other.hitCountWin_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BonusGameData Clone() {
      return new BonusGameData(this);
    }

    /// <summary>Field number for the "TotalRound" field.</summary>
    public const int TotalRoundFieldNumber = 1;
    private int totalRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalRound {
      get { return totalRound_; }
      set {
        totalRound_ = value;
      }
    }

    /// <summary>Field number for the "Bet" field.</summary>
    public const int BetFieldNumber = 2;
    private double bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "HitRecord" field.</summary>
    public const int HitRecordFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Luckytree.BonusHitRecord> _repeated_hitRecord_codec
        = pb::FieldCodec.ForMessage(26, global::Jili.Protocols.Luckytree.BonusHitRecord.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Luckytree.BonusHitRecord> hitRecord_ = new pbc::RepeatedField<global::Jili.Protocols.Luckytree.BonusHitRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Luckytree.BonusHitRecord> HitRecord {
      get { return hitRecord_; }
    }

    /// <summary>Field number for the "Other" field.</summary>
    public const int OtherFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_other_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> other_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Other {
      get { return other_; }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 5;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "HitCount" field.</summary>
    public const int HitCountFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_hitCount_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> hitCount_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> HitCount {
      get { return hitCount_; }
    }

    /// <summary>Field number for the "HitCountWin" field.</summary>
    public const int HitCountWinFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_hitCountWin_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> hitCountWin_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> HitCountWin {
      get { return hitCountWin_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BonusGameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BonusGameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalRound != other.TotalRound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bet, other.Bet)) return false;
      if(!hitRecord_.Equals(other.hitRecord_)) return false;
      if(!other_.Equals(other.other_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if(!hitCount_.Equals(other.hitCount_)) return false;
      if(!hitCountWin_.Equals(other.hitCountWin_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalRound != 0) hash ^= TotalRound.GetHashCode();
      if (Bet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bet);
      hash ^= hitRecord_.GetHashCode();
      hash ^= other_.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      hash ^= hitCount_.GetHashCode();
      hash ^= hitCountWin_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalRound != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalRound);
      }
      if (Bet != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Bet);
      }
      hitRecord_.WriteTo(output, _repeated_hitRecord_codec);
      other_.WriteTo(output, _repeated_other_codec);
      if (TotalWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(TotalWin);
      }
      hitCount_.WriteTo(output, _repeated_hitCount_codec);
      hitCountWin_.WriteTo(output, _repeated_hitCountWin_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalRound != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalRound);
      }
      if (Bet != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Bet);
      }
      hitRecord_.WriteTo(ref output, _repeated_hitRecord_codec);
      other_.WriteTo(ref output, _repeated_other_codec);
      if (TotalWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(TotalWin);
      }
      hitCount_.WriteTo(ref output, _repeated_hitCount_codec);
      hitCountWin_.WriteTo(ref output, _repeated_hitCountWin_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TotalRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRound);
      }
      if (Bet != 0D) {
        size += 1 + 8;
      }
      size += hitRecord_.CalculateSize(_repeated_hitRecord_codec);
      size += other_.CalculateSize(_repeated_other_codec);
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      size += hitCount_.CalculateSize(_repeated_hitCount_codec);
      size += hitCountWin_.CalculateSize(_repeated_hitCountWin_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BonusGameData other) {
      if (other == null) {
        return;
      }
      if (other.TotalRound != 0) {
        TotalRound = other.TotalRound;
      }
      if (other.Bet != 0D) {
        Bet = other.Bet;
      }
      hitRecord_.Add(other.hitRecord_);
      other_.Add(other.other_);
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      hitCount_.Add(other.hitCount_);
      hitCountWin_.Add(other.hitCountWin_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalRound = input.ReadInt32();
            break;
          }
          case 17: {
            Bet = input.ReadDouble();
            break;
          }
          case 26: {
            hitRecord_.AddEntriesFrom(input, _repeated_hitRecord_codec);
            break;
          }
          case 34:
          case 32: {
            other_.AddEntriesFrom(input, _repeated_other_codec);
            break;
          }
          case 41: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 50:
          case 48: {
            hitCount_.AddEntriesFrom(input, _repeated_hitCount_codec);
            break;
          }
          case 58:
          case 57: {
            hitCountWin_.AddEntriesFrom(input, _repeated_hitCountWin_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalRound = input.ReadInt32();
            break;
          }
          case 17: {
            Bet = input.ReadDouble();
            break;
          }
          case 26: {
            hitRecord_.AddEntriesFrom(ref input, _repeated_hitRecord_codec);
            break;
          }
          case 34:
          case 32: {
            other_.AddEntriesFrom(ref input, _repeated_other_codec);
            break;
          }
          case 41: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 50:
          case 48: {
            hitCount_.AddEntriesFrom(ref input, _repeated_hitCount_codec);
            break;
          }
          case 58:
          case 57: {
            hitCountWin_.AddEntriesFrom(ref input, _repeated_hitCountWin_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BonusHitRecord : pb::IMessage<BonusHitRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BonusHitRecord> _parser = new pb::MessageParser<BonusHitRecord>(() => new BonusHitRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BonusHitRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Luckytree.SpinAckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BonusHitRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BonusHitRecord(BonusHitRecord other) : this() {
      sym_ = other.sym_;
      hitCount_ = other.hitCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BonusHitRecord Clone() {
      return new BonusHitRecord(this);
    }

    /// <summary>Field number for the "Sym" field.</summary>
    public const int SymFieldNumber = 1;
    private int sym_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Sym {
      get { return sym_; }
      set {
        sym_ = value;
      }
    }

    /// <summary>Field number for the "HitCount" field.</summary>
    public const int HitCountFieldNumber = 2;
    private int hitCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitCount {
      get { return hitCount_; }
      set {
        hitCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BonusHitRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BonusHitRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sym != other.Sym) return false;
      if (HitCount != other.HitCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Sym != 0) hash ^= Sym.GetHashCode();
      if (HitCount != 0) hash ^= HitCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sym != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sym);
      }
      if (HitCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sym != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Sym);
      }
      if (HitCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HitCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Sym != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sym);
      }
      if (HitCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BonusHitRecord other) {
      if (other == null) {
        return;
      }
      if (other.Sym != 0) {
        Sym = other.Sym;
      }
      if (other.HitCount != 0) {
        HitCount = other.HitCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sym = input.ReadInt32();
            break;
          }
          case 16: {
            HitCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Sym = input.ReadInt32();
            break;
          }
          case 16: {
            HitCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FreeGameData : pb::IMessage<FreeGameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeGameData> _parser = new pb::MessageParser<FreeGameData>(() => new FreeGameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeGameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Luckytree.SpinAckReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGameData(FreeGameData other) : this() {
      plateDataVec_ = other.plateDataVec_.Clone();
      totalWin_ = other.totalWin_;
      totalTimes_ = other.totalTimes_;
      beginTimes_ = other.beginTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGameData Clone() {
      return new FreeGameData(this);
    }

    /// <summary>Field number for the "PlateDataVec" field.</summary>
    public const int PlateDataVecFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Luckytree.PlateData> _repeated_plateDataVec_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Luckytree.PlateData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Luckytree.PlateData> plateDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Luckytree.PlateData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Luckytree.PlateData> PlateDataVec {
      get { return plateDataVec_; }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 2;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "TotalTimes" field.</summary>
    public const int TotalTimesFieldNumber = 3;
    private int totalTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TotalTimes {
      get { return totalTimes_; }
      set {
        totalTimes_ = value;
      }
    }

    /// <summary>Field number for the "BeginTimes" field.</summary>
    public const int BeginTimesFieldNumber = 4;
    private int beginTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BeginTimes {
      get { return beginTimes_; }
      set {
        beginTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeGameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeGameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateDataVec_.Equals(other.plateDataVec_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (TotalTimes != other.TotalTimes) return false;
      if (BeginTimes != other.BeginTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateDataVec_.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (TotalTimes != 0) hash ^= TotalTimes.GetHashCode();
      if (BeginTimes != 0) hash ^= BeginTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateDataVec_.WriteTo(output, _repeated_plateDataVec_codec);
      if (TotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalWin);
      }
      if (TotalTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalTimes);
      }
      if (BeginTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BeginTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateDataVec_.WriteTo(ref output, _repeated_plateDataVec_codec);
      if (TotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalWin);
      }
      if (TotalTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalTimes);
      }
      if (BeginTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BeginTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateDataVec_.CalculateSize(_repeated_plateDataVec_codec);
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (TotalTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTimes);
      }
      if (BeginTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeGameData other) {
      if (other == null) {
        return;
      }
      plateDataVec_.Add(other.plateDataVec_);
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.TotalTimes != 0) {
        TotalTimes = other.TotalTimes;
      }
      if (other.BeginTimes != 0) {
        BeginTimes = other.BeginTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateDataVec_.AddEntriesFrom(input, _repeated_plateDataVec_codec);
            break;
          }
          case 17: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 24: {
            TotalTimes = input.ReadInt32();
            break;
          }
          case 32: {
            BeginTimes = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateDataVec_.AddEntriesFrom(ref input, _repeated_plateDataVec_codec);
            break;
          }
          case 17: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 24: {
            TotalTimes = input.ReadInt32();
            break;
          }
          case 32: {
            BeginTimes = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
