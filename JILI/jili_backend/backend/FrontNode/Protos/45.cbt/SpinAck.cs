// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Cbt {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhJKaWxpLlByb3RvY29scy5DYnQiwgEKB1NwaW5B",
            "Y2sSMQoIQWNrUXVldWUYASADKAsyHy5KaWxpLlByb3RvY29scy5DYnQuU2lu",
            "Z2xlUGxhdGUSFQoNQm9udXNUb3RhbFdpbhgCIAEoARIQCghUb3RhbFdpbhgD",
            "IAEoARIRCglTaG93SW5kZXgYBCABKAkSEAoITm93TW9uZXkYBSABKAESDwoH",
            "QWNrVHlwZRgGIAEoBRILCgNSVFAYDCABKAESCwoDTElEGA0gASgFEgsKA1JJ",
            "RBgOIAEoBSL0AgoLU2luZ2xlUGxhdGUSLwoLUGxhdGVTeW1ib2wYASADKAsy",
            "Gi5KaWxpLlByb3RvY29scy5DYnQuQ29sdW1uEhUKDUF3YXJkVHlwZUZsYWcY",
            "AiABKAUSEAoIUGxhdGVXaW4YAyABKAESDwoHTGluZVdpbhgEIAEoARIRCglT",
            "eW1ib2xXaW4YBSABKAESDwoHUG9vbFdpbhgGIAEoARIuCgpQb29sRGV0YWls",
            "GAcgAygLMhouSmlsaS5Qcm90b2NvbHMuQ2J0LkRldGFpbBIMCgRNdWx0GAgg",
            "ASgBEgwKBFBvb2wYCSADKAESLgoKU2hvd0RldGFpbBgKIAMoCzIaLkppbGku",
            "UHJvdG9jb2xzLkNidC5EZXRhaWwSDAoEUGx1cxgLIAEoBRINCgVMaWdodBgM",
            "IAEoBRIMCgRMaW5lGA0gASgFEhcKD0ZyZWVSZW1haW5Sb3VuZBgOIAEoBRIW",
            "Cg5GcmVlVG90YWxSb3VuZBgPIAEoBSIVCgZDb2x1bW4SCwoDQ29sGAEgAygF",
            "IhgKBkRldGFpbBIOCgZEZXRhaWwYASADKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cbt.SpinAck), global::Jili.Protocols.Cbt.SpinAck.Parser, new[]{ "AckQueue", "BonusTotalWin", "TotalWin", "ShowIndex", "NowMoney", "AckType", "RTP", "LID", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cbt.SinglePlate), global::Jili.Protocols.Cbt.SinglePlate.Parser, new[]{ "PlateSymbol", "AwardTypeFlag", "PlateWin", "LineWin", "SymbolWin", "PoolWin", "PoolDetail", "Mult", "Pool", "ShowDetail", "Plus", "Light", "Line", "FreeRemainRound", "FreeTotalRound" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cbt.Column), global::Jili.Protocols.Cbt.Column.Parser, new[]{ "Col" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cbt.Detail), global::Jili.Protocols.Cbt.Detail.Parser, new[]{ "Detail_" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cbt.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      ackQueue_ = other.ackQueue_.Clone();
      bonusTotalWin_ = other.bonusTotalWin_;
      totalWin_ = other.totalWin_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "AckQueue" field.</summary>
    public const int AckQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cbt.SinglePlate> _repeated_ackQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Cbt.SinglePlate.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cbt.SinglePlate> ackQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Cbt.SinglePlate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cbt.SinglePlate> AckQueue {
      get { return ackQueue_; }
    }

    /// <summary>Field number for the "BonusTotalWin" field.</summary>
    public const int BonusTotalWinFieldNumber = 2;
    private double bonusTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BonusTotalWin {
      get { return bonusTotalWin_; }
      set {
        bonusTotalWin_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 3;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 4;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 5;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 6;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 12;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 13;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 14;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ackQueue_.Equals(other.ackQueue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BonusTotalWin, other.BonusTotalWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ackQueue_.GetHashCode();
      if (BonusTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BonusTotalWin);
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      ackQueue_.WriteTo(output, _repeated_ackQueue_codec);
      if (BonusTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BonusTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      ackQueue_.WriteTo(ref output, _repeated_ackQueue_codec);
      if (BonusTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BonusTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += ackQueue_.CalculateSize(_repeated_ackQueue_codec);
      if (BonusTotalWin != 0D) {
        size += 1 + 8;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (LID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      ackQueue_.Add(other.ackQueue_);
      if (other.BonusTotalWin != 0D) {
        BonusTotalWin = other.BonusTotalWin;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ackQueue_.AddEntriesFrom(input, _repeated_ackQueue_codec);
            break;
          }
          case 17: {
            BonusTotalWin = input.ReadDouble();
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 34: {
            ShowIndex = input.ReadString();
            break;
          }
          case 41: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 48: {
            AckType = input.ReadInt32();
            break;
          }
          case 97: {
            RTP = input.ReadDouble();
            break;
          }
          case 104: {
            LID = input.ReadInt32();
            break;
          }
          case 112: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ackQueue_.AddEntriesFrom(ref input, _repeated_ackQueue_codec);
            break;
          }
          case 17: {
            BonusTotalWin = input.ReadDouble();
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 34: {
            ShowIndex = input.ReadString();
            break;
          }
          case 41: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 48: {
            AckType = input.ReadInt32();
            break;
          }
          case 97: {
            RTP = input.ReadDouble();
            break;
          }
          case 104: {
            LID = input.ReadInt32();
            break;
          }
          case 112: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SinglePlate : pb::IMessage<SinglePlate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SinglePlate> _parser = new pb::MessageParser<SinglePlate>(() => new SinglePlate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SinglePlate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cbt.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SinglePlate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SinglePlate(SinglePlate other) : this() {
      plateSymbol_ = other.plateSymbol_.Clone();
      awardTypeFlag_ = other.awardTypeFlag_;
      plateWin_ = other.plateWin_;
      lineWin_ = other.lineWin_;
      symbolWin_ = other.symbolWin_;
      poolWin_ = other.poolWin_;
      poolDetail_ = other.poolDetail_.Clone();
      mult_ = other.mult_;
      pool_ = other.pool_.Clone();
      showDetail_ = other.showDetail_.Clone();
      plus_ = other.plus_;
      light_ = other.light_;
      line_ = other.line_;
      freeRemainRound_ = other.freeRemainRound_;
      freeTotalRound_ = other.freeTotalRound_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SinglePlate Clone() {
      return new SinglePlate(this);
    }

    /// <summary>Field number for the "PlateSymbol" field.</summary>
    public const int PlateSymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cbt.Column> _repeated_plateSymbol_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Cbt.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cbt.Column> plateSymbol_ = new pbc::RepeatedField<global::Jili.Protocols.Cbt.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cbt.Column> PlateSymbol {
      get { return plateSymbol_; }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 2;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "PlateWin" field.</summary>
    public const int PlateWinFieldNumber = 3;
    private double plateWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PlateWin {
      get { return plateWin_; }
      set {
        plateWin_ = value;
      }
    }

    /// <summary>Field number for the "LineWin" field.</summary>
    public const int LineWinFieldNumber = 4;
    private double lineWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double LineWin {
      get { return lineWin_; }
      set {
        lineWin_ = value;
      }
    }

    /// <summary>Field number for the "SymbolWin" field.</summary>
    public const int SymbolWinFieldNumber = 5;
    private double symbolWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SymbolWin {
      get { return symbolWin_; }
      set {
        symbolWin_ = value;
      }
    }

    /// <summary>Field number for the "PoolWin" field.</summary>
    public const int PoolWinFieldNumber = 6;
    private double poolWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PoolWin {
      get { return poolWin_; }
      set {
        poolWin_ = value;
      }
    }

    /// <summary>Field number for the "PoolDetail" field.</summary>
    public const int PoolDetailFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cbt.Detail> _repeated_poolDetail_codec
        = pb::FieldCodec.ForMessage(58, global::Jili.Protocols.Cbt.Detail.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cbt.Detail> poolDetail_ = new pbc::RepeatedField<global::Jili.Protocols.Cbt.Detail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cbt.Detail> PoolDetail {
      get { return poolDetail_; }
    }

    /// <summary>Field number for the "Mult" field.</summary>
    public const int MultFieldNumber = 8;
    private double mult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Mult {
      get { return mult_; }
      set {
        mult_ = value;
      }
    }

    /// <summary>Field number for the "Pool" field.</summary>
    public const int PoolFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_pool_codec
        = pb::FieldCodec.ForDouble(74);
    private readonly pbc::RepeatedField<double> pool_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Pool {
      get { return pool_; }
    }

    /// <summary>Field number for the "ShowDetail" field.</summary>
    public const int ShowDetailFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cbt.Detail> _repeated_showDetail_codec
        = pb::FieldCodec.ForMessage(82, global::Jili.Protocols.Cbt.Detail.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cbt.Detail> showDetail_ = new pbc::RepeatedField<global::Jili.Protocols.Cbt.Detail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cbt.Detail> ShowDetail {
      get { return showDetail_; }
    }

    /// <summary>Field number for the "Plus" field.</summary>
    public const int PlusFieldNumber = 11;
    private int plus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Plus {
      get { return plus_; }
      set {
        plus_ = value;
      }
    }

    /// <summary>Field number for the "Light" field.</summary>
    public const int LightFieldNumber = 12;
    private int light_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Light {
      get { return light_; }
      set {
        light_ = value;
      }
    }

    /// <summary>Field number for the "Line" field.</summary>
    public const int LineFieldNumber = 13;
    private int line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "FreeRemainRound" field.</summary>
    public const int FreeRemainRoundFieldNumber = 14;
    private int freeRemainRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeRemainRound {
      get { return freeRemainRound_; }
      set {
        freeRemainRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeTotalRound" field.</summary>
    public const int FreeTotalRoundFieldNumber = 15;
    private int freeTotalRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeTotalRound {
      get { return freeTotalRound_; }
      set {
        freeTotalRound_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SinglePlate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SinglePlate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateSymbol_.Equals(other.plateSymbol_)) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlateWin, other.PlateWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LineWin, other.LineWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SymbolWin, other.SymbolWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PoolWin, other.PoolWin)) return false;
      if(!poolDetail_.Equals(other.poolDetail_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mult, other.Mult)) return false;
      if(!pool_.Equals(other.pool_)) return false;
      if(!showDetail_.Equals(other.showDetail_)) return false;
      if (Plus != other.Plus) return false;
      if (Light != other.Light) return false;
      if (Line != other.Line) return false;
      if (FreeRemainRound != other.FreeRemainRound) return false;
      if (FreeTotalRound != other.FreeTotalRound) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateSymbol_.GetHashCode();
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (PlateWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlateWin);
      if (LineWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LineWin);
      if (SymbolWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SymbolWin);
      if (PoolWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PoolWin);
      hash ^= poolDetail_.GetHashCode();
      if (Mult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mult);
      hash ^= pool_.GetHashCode();
      hash ^= showDetail_.GetHashCode();
      if (Plus != 0) hash ^= Plus.GetHashCode();
      if (Light != 0) hash ^= Light.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      if (FreeRemainRound != 0) hash ^= FreeRemainRound.GetHashCode();
      if (FreeTotalRound != 0) hash ^= FreeTotalRound.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateSymbol_.WriteTo(output, _repeated_plateSymbol_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AwardTypeFlag);
      }
      if (PlateWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PlateWin);
      }
      if (LineWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LineWin);
      }
      if (SymbolWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SymbolWin);
      }
      if (PoolWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PoolWin);
      }
      poolDetail_.WriteTo(output, _repeated_poolDetail_codec);
      if (Mult != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Mult);
      }
      pool_.WriteTo(output, _repeated_pool_codec);
      showDetail_.WriteTo(output, _repeated_showDetail_codec);
      if (Plus != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Plus);
      }
      if (Light != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Light);
      }
      if (Line != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Line);
      }
      if (FreeRemainRound != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FreeRemainRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(FreeTotalRound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateSymbol_.WriteTo(ref output, _repeated_plateSymbol_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AwardTypeFlag);
      }
      if (PlateWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PlateWin);
      }
      if (LineWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(LineWin);
      }
      if (SymbolWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SymbolWin);
      }
      if (PoolWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PoolWin);
      }
      poolDetail_.WriteTo(ref output, _repeated_poolDetail_codec);
      if (Mult != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Mult);
      }
      pool_.WriteTo(ref output, _repeated_pool_codec);
      showDetail_.WriteTo(ref output, _repeated_showDetail_codec);
      if (Plus != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Plus);
      }
      if (Light != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Light);
      }
      if (Line != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Line);
      }
      if (FreeRemainRound != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FreeRemainRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(FreeTotalRound);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateSymbol_.CalculateSize(_repeated_plateSymbol_codec);
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (PlateWin != 0D) {
        size += 1 + 8;
      }
      if (LineWin != 0D) {
        size += 1 + 8;
      }
      if (SymbolWin != 0D) {
        size += 1 + 8;
      }
      if (PoolWin != 0D) {
        size += 1 + 8;
      }
      size += poolDetail_.CalculateSize(_repeated_poolDetail_codec);
      if (Mult != 0D) {
        size += 1 + 8;
      }
      size += pool_.CalculateSize(_repeated_pool_codec);
      size += showDetail_.CalculateSize(_repeated_showDetail_codec);
      if (Plus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Plus);
      }
      if (Light != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Light);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      if (FreeRemainRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeRemainRound);
      }
      if (FreeTotalRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTotalRound);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SinglePlate other) {
      if (other == null) {
        return;
      }
      plateSymbol_.Add(other.plateSymbol_);
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.PlateWin != 0D) {
        PlateWin = other.PlateWin;
      }
      if (other.LineWin != 0D) {
        LineWin = other.LineWin;
      }
      if (other.SymbolWin != 0D) {
        SymbolWin = other.SymbolWin;
      }
      if (other.PoolWin != 0D) {
        PoolWin = other.PoolWin;
      }
      poolDetail_.Add(other.poolDetail_);
      if (other.Mult != 0D) {
        Mult = other.Mult;
      }
      pool_.Add(other.pool_);
      showDetail_.Add(other.showDetail_);
      if (other.Plus != 0) {
        Plus = other.Plus;
      }
      if (other.Light != 0) {
        Light = other.Light;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.FreeRemainRound != 0) {
        FreeRemainRound = other.FreeRemainRound;
      }
      if (other.FreeTotalRound != 0) {
        FreeTotalRound = other.FreeTotalRound;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(input, _repeated_plateSymbol_codec);
            break;
          }
          case 16: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 25: {
            PlateWin = input.ReadDouble();
            break;
          }
          case 33: {
            LineWin = input.ReadDouble();
            break;
          }
          case 41: {
            SymbolWin = input.ReadDouble();
            break;
          }
          case 49: {
            PoolWin = input.ReadDouble();
            break;
          }
          case 58: {
            poolDetail_.AddEntriesFrom(input, _repeated_poolDetail_codec);
            break;
          }
          case 65: {
            Mult = input.ReadDouble();
            break;
          }
          case 74:
          case 73: {
            pool_.AddEntriesFrom(input, _repeated_pool_codec);
            break;
          }
          case 82: {
            showDetail_.AddEntriesFrom(input, _repeated_showDetail_codec);
            break;
          }
          case 88: {
            Plus = input.ReadInt32();
            break;
          }
          case 96: {
            Light = input.ReadInt32();
            break;
          }
          case 104: {
            Line = input.ReadInt32();
            break;
          }
          case 112: {
            FreeRemainRound = input.ReadInt32();
            break;
          }
          case 120: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(ref input, _repeated_plateSymbol_codec);
            break;
          }
          case 16: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 25: {
            PlateWin = input.ReadDouble();
            break;
          }
          case 33: {
            LineWin = input.ReadDouble();
            break;
          }
          case 41: {
            SymbolWin = input.ReadDouble();
            break;
          }
          case 49: {
            PoolWin = input.ReadDouble();
            break;
          }
          case 58: {
            poolDetail_.AddEntriesFrom(ref input, _repeated_poolDetail_codec);
            break;
          }
          case 65: {
            Mult = input.ReadDouble();
            break;
          }
          case 74:
          case 73: {
            pool_.AddEntriesFrom(ref input, _repeated_pool_codec);
            break;
          }
          case 82: {
            showDetail_.AddEntriesFrom(ref input, _repeated_showDetail_codec);
            break;
          }
          case 88: {
            Plus = input.ReadInt32();
            break;
          }
          case 96: {
            Light = input.ReadInt32();
            break;
          }
          case 104: {
            Line = input.ReadInt32();
            break;
          }
          case 112: {
            FreeRemainRound = input.ReadInt32();
            break;
          }
          case 120: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cbt.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      col_ = other.col_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Col" field.</summary>
    public const int ColFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_col_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> col_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Col {
      get { return col_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!col_.Equals(other.col_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= col_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      col_.WriteTo(output, _repeated_col_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      col_.WriteTo(ref output, _repeated_col_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += col_.CalculateSize(_repeated_col_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      col_.Add(other.col_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            col_.AddEntriesFrom(input, _repeated_col_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            col_.AddEntriesFrom(ref input, _repeated_col_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Detail : pb::IMessage<Detail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Detail> _parser = new pb::MessageParser<Detail>(() => new Detail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Detail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cbt.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Detail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Detail(Detail other) : this() {
      detail_ = other.detail_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Detail Clone() {
      return new Detail(this);
    }

    /// <summary>Field number for the "Detail" field.</summary>
    public const int Detail_FieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_detail_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> detail_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Detail_ {
      get { return detail_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Detail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Detail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!detail_.Equals(other.detail_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= detail_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      detail_.WriteTo(output, _repeated_detail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      detail_.WriteTo(ref output, _repeated_detail_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += detail_.CalculateSize(_repeated_detail_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Detail other) {
      if (other == null) {
        return;
      }
      detail_.Add(other.detail_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            detail_.AddEntriesFrom(input, _repeated_detail_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            detail_.AddEntriesFrom(ref input, _repeated_detail_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
