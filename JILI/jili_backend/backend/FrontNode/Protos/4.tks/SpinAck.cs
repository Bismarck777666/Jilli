// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Tks {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhJKaWxpLlByb3RvY29scy5Ua3Mi0QIKB1NwaW5B",
            "Y2sSDQoFUGxhdGUYASADKAUSMAoJQXdhcmREYXRhGAIgASgLMh0uSmlsaS5Q",
            "cm90b2NvbHMuVGtzLkF3YXJkRGF0YRINCgVNR1dpbhgDIAEoARI5Cg9GcmVl",
            "R2FtZVBhY2thZ2UYBCADKAsyIC5KaWxpLlByb3RvY29scy5Ua3MuRnJlZUdh",
            "bWVEYXRhEg8KB05vd01vZGUYBSABKAgSFgoOSXNIaWdoUmF0ZU1vZGUYBiAB",
            "KAgSEAoIR2FtZVR5cGUYByABKAUSEAoIVG90YWxXaW4YCCABKAESEQoJQXdh",
            "cmRUeXBlGAkgASgFEhEKCVNob3dJbmRleBgKIAEoCRIQCghOb3dNb25leRgL",
            "IAEoARIPCgdBY2tUeXBlGAwgASgFEgsKA1JUUBgNIAEoARILCgNMSUQYDiAB",
            "KAUSCwoDUklEGA8gASgFIl0KCUF3YXJkRGF0YRIoCgVBd2FyZBgBIAMoCzIZ",
            "LkppbGkuUHJvdG9jb2xzLlRrcy5Bd2FyZBISCgpBd2FyZFByaXplGAIgASgB",
            "EhIKCklzRnJlZUdhbWUYAyABKAgiXAoFQXdhcmQSEQoJQXdhcmRNb2RlGAEg",
            "ASgFEhEKCUF3YXJkSXRlbRgCIAEoBRIMCgRTaWRlGAMgASgFEhEKCUxpbmVJ",
            "bmRleBgEIAEoBRIMCgRPZGRzGAUgASgBIsMBCgxGcmVlR2FtZURhdGESQAoR",
            "RnJlZUdhbWVQbGF0ZUluZm8YASADKAsyJS5KaWxpLlByb3RvY29scy5Ua3Mu",
            "RnJlZUdhbWVQbGF0ZUluZm8SEgoKVG90YWxQcml6ZRgCIAEoARINCgVUaW1l",
            "cxgDIAEoBRISCgpCZWdpblRpbWVzGAQgASgFEhUKDVBhY2thZ2VGaW5pc2gY",
            "BSABKAgSEAoITG9nSW5kZXgYBiABKAkSEQoJU2hvd0luZGV4GAcgASgJIlQK",
            "EUZyZWVHYW1lUGxhdGVJbmZvEg0KBVBsYXRlGAEgAygFEjAKCUF3YXJkRGF0",
            "YRgCIAEoCzIdLkppbGkuUHJvdG9jb2xzLlRrcy5Bd2FyZERhdGFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tks.SpinAck), global::Jili.Protocols.Tks.SpinAck.Parser, new[]{ "Plate", "AwardData", "MGWin", "FreeGamePackage", "NowMode", "IsHighRateMode", "GameType", "TotalWin", "AwardType", "ShowIndex", "NowMoney", "AckType", "RTP", "LID", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tks.AwardData), global::Jili.Protocols.Tks.AwardData.Parser, new[]{ "Award", "AwardPrize", "IsFreeGame" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tks.Award), global::Jili.Protocols.Tks.Award.Parser, new[]{ "AwardMode", "AwardItem", "Side", "LineIndex", "Odds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tks.FreeGameData), global::Jili.Protocols.Tks.FreeGameData.Parser, new[]{ "FreeGamePlateInfo", "TotalPrize", "Times", "BeginTimes", "PackageFinish", "LogIndex", "ShowIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tks.FreeGamePlateInfo), global::Jili.Protocols.Tks.FreeGamePlateInfo.Parser, new[]{ "Plate", "AwardData" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tks.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      plate_ = other.plate_.Clone();
      awardData_ = other.awardData_ != null ? other.awardData_.Clone() : null;
      mGWin_ = other.mGWin_;
      freeGamePackage_ = other.freeGamePackage_.Clone();
      nowMode_ = other.nowMode_;
      isHighRateMode_ = other.isHighRateMode_;
      gameType_ = other.gameType_;
      totalWin_ = other.totalWin_;
      awardType_ = other.awardType_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "Plate" field.</summary>
    public const int PlateFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_plate_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> plate_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Plate {
      get { return plate_; }
    }

    /// <summary>Field number for the "AwardData" field.</summary>
    public const int AwardDataFieldNumber = 2;
    private global::Jili.Protocols.Tks.AwardData awardData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Tks.AwardData AwardData {
      get { return awardData_; }
      set {
        awardData_ = value;
      }
    }

    /// <summary>Field number for the "MGWin" field.</summary>
    public const int MGWinFieldNumber = 3;
    private double mGWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MGWin {
      get { return mGWin_; }
      set {
        mGWin_ = value;
      }
    }

    /// <summary>Field number for the "FreeGamePackage" field.</summary>
    public const int FreeGamePackageFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tks.FreeGameData> _repeated_freeGamePackage_codec
        = pb::FieldCodec.ForMessage(34, global::Jili.Protocols.Tks.FreeGameData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tks.FreeGameData> freeGamePackage_ = new pbc::RepeatedField<global::Jili.Protocols.Tks.FreeGameData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tks.FreeGameData> FreeGamePackage {
      get { return freeGamePackage_; }
    }

    /// <summary>Field number for the "NowMode" field.</summary>
    public const int NowModeFieldNumber = 5;
    private bool nowMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NowMode {
      get { return nowMode_; }
      set {
        nowMode_ = value;
      }
    }

    /// <summary>Field number for the "IsHighRateMode" field.</summary>
    public const int IsHighRateModeFieldNumber = 6;
    private bool isHighRateMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsHighRateMode {
      get { return isHighRateMode_; }
      set {
        isHighRateMode_ = value;
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 7;
    private int gameType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 8;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "AwardType" field.</summary>
    public const int AwardTypeFieldNumber = 9;
    private int awardType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardType {
      get { return awardType_; }
      set {
        awardType_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 10;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 11;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 12;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 13;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 14;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 15;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plate_.Equals(other.plate_)) return false;
      if (!object.Equals(AwardData, other.AwardData)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MGWin, other.MGWin)) return false;
      if(!freeGamePackage_.Equals(other.freeGamePackage_)) return false;
      if (NowMode != other.NowMode) return false;
      if (IsHighRateMode != other.IsHighRateMode) return false;
      if (GameType != other.GameType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (AwardType != other.AwardType) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plate_.GetHashCode();
      if (awardData_ != null) hash ^= AwardData.GetHashCode();
      if (MGWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MGWin);
      hash ^= freeGamePackage_.GetHashCode();
      if (NowMode != false) hash ^= NowMode.GetHashCode();
      if (IsHighRateMode != false) hash ^= IsHighRateMode.GetHashCode();
      if (GameType != 0) hash ^= GameType.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (AwardType != 0) hash ^= AwardType.GetHashCode();
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plate_.WriteTo(output, _repeated_plate_codec);
      if (awardData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AwardData);
      }
      if (MGWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MGWin);
      }
      freeGamePackage_.WriteTo(output, _repeated_freeGamePackage_codec);
      if (NowMode != false) {
        output.WriteRawTag(40);
        output.WriteBool(NowMode);
      }
      if (IsHighRateMode != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsHighRateMode);
      }
      if (GameType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GameType);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(TotalWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AwardType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plate_.WriteTo(ref output, _repeated_plate_codec);
      if (awardData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AwardData);
      }
      if (MGWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MGWin);
      }
      freeGamePackage_.WriteTo(ref output, _repeated_freeGamePackage_codec);
      if (NowMode != false) {
        output.WriteRawTag(40);
        output.WriteBool(NowMode);
      }
      if (IsHighRateMode != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsHighRateMode);
      }
      if (GameType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GameType);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(TotalWin);
      }
      if (AwardType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AwardType);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plate_.CalculateSize(_repeated_plate_codec);
      if (awardData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwardData);
      }
      if (MGWin != 0D) {
        size += 1 + 8;
      }
      size += freeGamePackage_.CalculateSize(_repeated_freeGamePackage_codec);
      if (NowMode != false) {
        size += 1 + 1;
      }
      if (IsHighRateMode != false) {
        size += 1 + 1;
      }
      if (GameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (AwardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardType);
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (LID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      plate_.Add(other.plate_);
      if (other.awardData_ != null) {
        if (awardData_ == null) {
          AwardData = new global::Jili.Protocols.Tks.AwardData();
        }
        AwardData.MergeFrom(other.AwardData);
      }
      if (other.MGWin != 0D) {
        MGWin = other.MGWin;
      }
      freeGamePackage_.Add(other.freeGamePackage_);
      if (other.NowMode != false) {
        NowMode = other.NowMode;
      }
      if (other.IsHighRateMode != false) {
        IsHighRateMode = other.IsHighRateMode;
      }
      if (other.GameType != 0) {
        GameType = other.GameType;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.AwardType != 0) {
        AwardType = other.AwardType;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            plate_.AddEntriesFrom(input, _repeated_plate_codec);
            break;
          }
          case 18: {
            if (awardData_ == null) {
              AwardData = new global::Jili.Protocols.Tks.AwardData();
            }
            input.ReadMessage(AwardData);
            break;
          }
          case 25: {
            MGWin = input.ReadDouble();
            break;
          }
          case 34: {
            freeGamePackage_.AddEntriesFrom(input, _repeated_freeGamePackage_codec);
            break;
          }
          case 40: {
            NowMode = input.ReadBool();
            break;
          }
          case 48: {
            IsHighRateMode = input.ReadBool();
            break;
          }
          case 56: {
            GameType = input.ReadInt32();
            break;
          }
          case 65: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 72: {
            AwardType = input.ReadInt32();
            break;
          }
          case 82: {
            ShowIndex = input.ReadString();
            break;
          }
          case 89: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 96: {
            AckType = input.ReadInt32();
            break;
          }
          case 105: {
            RTP = input.ReadDouble();
            break;
          }
          case 112: {
            LID = input.ReadInt32();
            break;
          }
          case 120: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            plate_.AddEntriesFrom(ref input, _repeated_plate_codec);
            break;
          }
          case 18: {
            if (awardData_ == null) {
              AwardData = new global::Jili.Protocols.Tks.AwardData();
            }
            input.ReadMessage(AwardData);
            break;
          }
          case 25: {
            MGWin = input.ReadDouble();
            break;
          }
          case 34: {
            freeGamePackage_.AddEntriesFrom(ref input, _repeated_freeGamePackage_codec);
            break;
          }
          case 40: {
            NowMode = input.ReadBool();
            break;
          }
          case 48: {
            IsHighRateMode = input.ReadBool();
            break;
          }
          case 56: {
            GameType = input.ReadInt32();
            break;
          }
          case 65: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 72: {
            AwardType = input.ReadInt32();
            break;
          }
          case 82: {
            ShowIndex = input.ReadString();
            break;
          }
          case 89: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 96: {
            AckType = input.ReadInt32();
            break;
          }
          case 105: {
            RTP = input.ReadDouble();
            break;
          }
          case 112: {
            LID = input.ReadInt32();
            break;
          }
          case 120: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardData : pb::IMessage<AwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardData> _parser = new pb::MessageParser<AwardData>(() => new AwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tks.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData(AwardData other) : this() {
      award_ = other.award_.Clone();
      awardPrize_ = other.awardPrize_;
      isFreeGame_ = other.isFreeGame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData Clone() {
      return new AwardData(this);
    }

    /// <summary>Field number for the "Award" field.</summary>
    public const int AwardFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tks.Award> _repeated_award_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Tks.Award.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tks.Award> award_ = new pbc::RepeatedField<global::Jili.Protocols.Tks.Award>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tks.Award> Award {
      get { return award_; }
    }

    /// <summary>Field number for the "AwardPrize" field.</summary>
    public const int AwardPrizeFieldNumber = 2;
    private double awardPrize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AwardPrize {
      get { return awardPrize_; }
      set {
        awardPrize_ = value;
      }
    }

    /// <summary>Field number for the "IsFreeGame" field.</summary>
    public const int IsFreeGameFieldNumber = 3;
    private bool isFreeGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsFreeGame {
      get { return isFreeGame_; }
      set {
        isFreeGame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!award_.Equals(other.award_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AwardPrize, other.AwardPrize)) return false;
      if (IsFreeGame != other.IsFreeGame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= award_.GetHashCode();
      if (AwardPrize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AwardPrize);
      if (IsFreeGame != false) hash ^= IsFreeGame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      award_.WriteTo(output, _repeated_award_codec);
      if (AwardPrize != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AwardPrize);
      }
      if (IsFreeGame != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFreeGame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      award_.WriteTo(ref output, _repeated_award_codec);
      if (AwardPrize != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AwardPrize);
      }
      if (IsFreeGame != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFreeGame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += award_.CalculateSize(_repeated_award_codec);
      if (AwardPrize != 0D) {
        size += 1 + 8;
      }
      if (IsFreeGame != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardData other) {
      if (other == null) {
        return;
      }
      award_.Add(other.award_);
      if (other.AwardPrize != 0D) {
        AwardPrize = other.AwardPrize;
      }
      if (other.IsFreeGame != false) {
        IsFreeGame = other.IsFreeGame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            award_.AddEntriesFrom(input, _repeated_award_codec);
            break;
          }
          case 17: {
            AwardPrize = input.ReadDouble();
            break;
          }
          case 24: {
            IsFreeGame = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            award_.AddEntriesFrom(ref input, _repeated_award_codec);
            break;
          }
          case 17: {
            AwardPrize = input.ReadDouble();
            break;
          }
          case 24: {
            IsFreeGame = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Award : pb::IMessage<Award>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Award> _parser = new pb::MessageParser<Award>(() => new Award());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Award> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tks.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Award() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Award(Award other) : this() {
      awardMode_ = other.awardMode_;
      awardItem_ = other.awardItem_;
      side_ = other.side_;
      lineIndex_ = other.lineIndex_;
      odds_ = other.odds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Award Clone() {
      return new Award(this);
    }

    /// <summary>Field number for the "AwardMode" field.</summary>
    public const int AwardModeFieldNumber = 1;
    private int awardMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardMode {
      get { return awardMode_; }
      set {
        awardMode_ = value;
      }
    }

    /// <summary>Field number for the "AwardItem" field.</summary>
    public const int AwardItemFieldNumber = 2;
    private int awardItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardItem {
      get { return awardItem_; }
      set {
        awardItem_ = value;
      }
    }

    /// <summary>Field number for the "Side" field.</summary>
    public const int SideFieldNumber = 3;
    private int side_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "LineIndex" field.</summary>
    public const int LineIndexFieldNumber = 4;
    private int lineIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LineIndex {
      get { return lineIndex_; }
      set {
        lineIndex_ = value;
      }
    }

    /// <summary>Field number for the "Odds" field.</summary>
    public const int OddsFieldNumber = 5;
    private double odds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Odds {
      get { return odds_; }
      set {
        odds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Award);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Award other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AwardMode != other.AwardMode) return false;
      if (AwardItem != other.AwardItem) return false;
      if (Side != other.Side) return false;
      if (LineIndex != other.LineIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Odds, other.Odds)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (AwardMode != 0) hash ^= AwardMode.GetHashCode();
      if (AwardItem != 0) hash ^= AwardItem.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (LineIndex != 0) hash ^= LineIndex.GetHashCode();
      if (Odds != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Odds);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AwardMode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AwardMode);
      }
      if (AwardItem != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AwardItem);
      }
      if (Side != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Side);
      }
      if (LineIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LineIndex);
      }
      if (Odds != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Odds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AwardMode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AwardMode);
      }
      if (AwardItem != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AwardItem);
      }
      if (Side != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Side);
      }
      if (LineIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LineIndex);
      }
      if (Odds != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Odds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (AwardMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardMode);
      }
      if (AwardItem != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardItem);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Side);
      }
      if (LineIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineIndex);
      }
      if (Odds != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Award other) {
      if (other == null) {
        return;
      }
      if (other.AwardMode != 0) {
        AwardMode = other.AwardMode;
      }
      if (other.AwardItem != 0) {
        AwardItem = other.AwardItem;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.LineIndex != 0) {
        LineIndex = other.LineIndex;
      }
      if (other.Odds != 0D) {
        Odds = other.Odds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AwardMode = input.ReadInt32();
            break;
          }
          case 16: {
            AwardItem = input.ReadInt32();
            break;
          }
          case 24: {
            Side = input.ReadInt32();
            break;
          }
          case 32: {
            LineIndex = input.ReadInt32();
            break;
          }
          case 41: {
            Odds = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AwardMode = input.ReadInt32();
            break;
          }
          case 16: {
            AwardItem = input.ReadInt32();
            break;
          }
          case 24: {
            Side = input.ReadInt32();
            break;
          }
          case 32: {
            LineIndex = input.ReadInt32();
            break;
          }
          case 41: {
            Odds = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FreeGameData : pb::IMessage<FreeGameData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeGameData> _parser = new pb::MessageParser<FreeGameData>(() => new FreeGameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeGameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tks.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGameData(FreeGameData other) : this() {
      freeGamePlateInfo_ = other.freeGamePlateInfo_.Clone();
      totalPrize_ = other.totalPrize_;
      times_ = other.times_;
      beginTimes_ = other.beginTimes_;
      packageFinish_ = other.packageFinish_;
      logIndex_ = other.logIndex_;
      showIndex_ = other.showIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGameData Clone() {
      return new FreeGameData(this);
    }

    /// <summary>Field number for the "FreeGamePlateInfo" field.</summary>
    public const int FreeGamePlateInfoFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tks.FreeGamePlateInfo> _repeated_freeGamePlateInfo_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Tks.FreeGamePlateInfo.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tks.FreeGamePlateInfo> freeGamePlateInfo_ = new pbc::RepeatedField<global::Jili.Protocols.Tks.FreeGamePlateInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tks.FreeGamePlateInfo> FreeGamePlateInfo {
      get { return freeGamePlateInfo_; }
    }

    /// <summary>Field number for the "TotalPrize" field.</summary>
    public const int TotalPrizeFieldNumber = 2;
    private double totalPrize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalPrize {
      get { return totalPrize_; }
      set {
        totalPrize_ = value;
      }
    }

    /// <summary>Field number for the "Times" field.</summary>
    public const int TimesFieldNumber = 3;
    private int times_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Times {
      get { return times_; }
      set {
        times_ = value;
      }
    }

    /// <summary>Field number for the "BeginTimes" field.</summary>
    public const int BeginTimesFieldNumber = 4;
    private int beginTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BeginTimes {
      get { return beginTimes_; }
      set {
        beginTimes_ = value;
      }
    }

    /// <summary>Field number for the "PackageFinish" field.</summary>
    public const int PackageFinishFieldNumber = 5;
    private bool packageFinish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PackageFinish {
      get { return packageFinish_; }
      set {
        packageFinish_ = value;
      }
    }

    /// <summary>Field number for the "LogIndex" field.</summary>
    public const int LogIndexFieldNumber = 6;
    private string logIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LogIndex {
      get { return logIndex_; }
      set {
        logIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 7;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeGameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeGameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!freeGamePlateInfo_.Equals(other.freeGamePlateInfo_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalPrize, other.TotalPrize)) return false;
      if (Times != other.Times) return false;
      if (BeginTimes != other.BeginTimes) return false;
      if (PackageFinish != other.PackageFinish) return false;
      if (LogIndex != other.LogIndex) return false;
      if (ShowIndex != other.ShowIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= freeGamePlateInfo_.GetHashCode();
      if (TotalPrize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalPrize);
      if (Times != 0) hash ^= Times.GetHashCode();
      if (BeginTimes != 0) hash ^= BeginTimes.GetHashCode();
      if (PackageFinish != false) hash ^= PackageFinish.GetHashCode();
      if (LogIndex.Length != 0) hash ^= LogIndex.GetHashCode();
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      freeGamePlateInfo_.WriteTo(output, _repeated_freeGamePlateInfo_codec);
      if (TotalPrize != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalPrize);
      }
      if (Times != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Times);
      }
      if (BeginTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BeginTimes);
      }
      if (PackageFinish != false) {
        output.WriteRawTag(40);
        output.WriteBool(PackageFinish);
      }
      if (LogIndex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LogIndex);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ShowIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      freeGamePlateInfo_.WriteTo(ref output, _repeated_freeGamePlateInfo_codec);
      if (TotalPrize != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(TotalPrize);
      }
      if (Times != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Times);
      }
      if (BeginTimes != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BeginTimes);
      }
      if (PackageFinish != false) {
        output.WriteRawTag(40);
        output.WriteBool(PackageFinish);
      }
      if (LogIndex.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LogIndex);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ShowIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += freeGamePlateInfo_.CalculateSize(_repeated_freeGamePlateInfo_codec);
      if (TotalPrize != 0D) {
        size += 1 + 8;
      }
      if (Times != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Times);
      }
      if (BeginTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeginTimes);
      }
      if (PackageFinish != false) {
        size += 1 + 1;
      }
      if (LogIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogIndex);
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeGameData other) {
      if (other == null) {
        return;
      }
      freeGamePlateInfo_.Add(other.freeGamePlateInfo_);
      if (other.TotalPrize != 0D) {
        TotalPrize = other.TotalPrize;
      }
      if (other.Times != 0) {
        Times = other.Times;
      }
      if (other.BeginTimes != 0) {
        BeginTimes = other.BeginTimes;
      }
      if (other.PackageFinish != false) {
        PackageFinish = other.PackageFinish;
      }
      if (other.LogIndex.Length != 0) {
        LogIndex = other.LogIndex;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            freeGamePlateInfo_.AddEntriesFrom(input, _repeated_freeGamePlateInfo_codec);
            break;
          }
          case 17: {
            TotalPrize = input.ReadDouble();
            break;
          }
          case 24: {
            Times = input.ReadInt32();
            break;
          }
          case 32: {
            BeginTimes = input.ReadInt32();
            break;
          }
          case 40: {
            PackageFinish = input.ReadBool();
            break;
          }
          case 50: {
            LogIndex = input.ReadString();
            break;
          }
          case 58: {
            ShowIndex = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            freeGamePlateInfo_.AddEntriesFrom(ref input, _repeated_freeGamePlateInfo_codec);
            break;
          }
          case 17: {
            TotalPrize = input.ReadDouble();
            break;
          }
          case 24: {
            Times = input.ReadInt32();
            break;
          }
          case 32: {
            BeginTimes = input.ReadInt32();
            break;
          }
          case 40: {
            PackageFinish = input.ReadBool();
            break;
          }
          case 50: {
            LogIndex = input.ReadString();
            break;
          }
          case 58: {
            ShowIndex = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FreeGamePlateInfo : pb::IMessage<FreeGamePlateInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeGamePlateInfo> _parser = new pb::MessageParser<FreeGamePlateInfo>(() => new FreeGamePlateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeGamePlateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tks.SpinAckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGamePlateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGamePlateInfo(FreeGamePlateInfo other) : this() {
      plate_ = other.plate_.Clone();
      awardData_ = other.awardData_ != null ? other.awardData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGamePlateInfo Clone() {
      return new FreeGamePlateInfo(this);
    }

    /// <summary>Field number for the "Plate" field.</summary>
    public const int PlateFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_plate_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> plate_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Plate {
      get { return plate_; }
    }

    /// <summary>Field number for the "AwardData" field.</summary>
    public const int AwardDataFieldNumber = 2;
    private global::Jili.Protocols.Tks.AwardData awardData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Tks.AwardData AwardData {
      get { return awardData_; }
      set {
        awardData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeGamePlateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeGamePlateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plate_.Equals(other.plate_)) return false;
      if (!object.Equals(AwardData, other.AwardData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plate_.GetHashCode();
      if (awardData_ != null) hash ^= AwardData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plate_.WriteTo(output, _repeated_plate_codec);
      if (awardData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AwardData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plate_.WriteTo(ref output, _repeated_plate_codec);
      if (awardData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AwardData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plate_.CalculateSize(_repeated_plate_codec);
      if (awardData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwardData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeGamePlateInfo other) {
      if (other == null) {
        return;
      }
      plate_.Add(other.plate_);
      if (other.awardData_ != null) {
        if (awardData_ == null) {
          AwardData = new global::Jili.Protocols.Tks.AwardData();
        }
        AwardData.MergeFrom(other.AwardData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            plate_.AddEntriesFrom(input, _repeated_plate_codec);
            break;
          }
          case 18: {
            if (awardData_ == null) {
              AwardData = new global::Jili.Protocols.Tks.AwardData();
            }
            input.ReadMessage(AwardData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            plate_.AddEntriesFrom(ref input, _repeated_plate_codec);
            break;
          }
          case 18: {
            if (awardData_ == null) {
              AwardData = new global::Jili.Protocols.Tks.AwardData();
            }
            input.ReadMessage(AwardData);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
