// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Ols2 {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhNKaWxpLlByb3RvY29scy5PbHMyIuABCgdTcGlu",
            "QWNrEg0KBUF3YXJkGAEgASgFEhMKC1BsYXRlU3ltYm9sGAIgAygFEhMKC1Jl",
            "c3BpblRpbWVzGAMgASgFEgwKBE11bHQYBCABKAESEAoIUGxhdGVXaW4YBSAB",
            "KAESDwoHTXVsdFdpbhgGIAEoARIQCghFeHRyYVdpbhgHIAEoARIRCglSZXNw",
            "aW5XaW4YCCABKAESEAoIVG90YWxXaW4YCSABKAESEQoJU2hvd0luZGV4GAog",
            "ASgJEhAKCE5vd01vbmV5GAsgASgBEg8KB0Fja1R5cGUYDCABKAViBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Ols2.SpinAck), global::Jili.Protocols.Ols2.SpinAck.Parser, new[]{ "Award", "PlateSymbol", "RespinTimes", "Mult", "PlateWin", "MultWin", "ExtraWin", "RespinWin", "TotalWin", "ShowIndex", "NowMoney", "AckType" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Ols2.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      award_ = other.award_;
      plateSymbol_ = other.plateSymbol_.Clone();
      respinTimes_ = other.respinTimes_;
      mult_ = other.mult_;
      plateWin_ = other.plateWin_;
      multWin_ = other.multWin_;
      extraWin_ = other.extraWin_;
      respinWin_ = other.respinWin_;
      totalWin_ = other.totalWin_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "Award" field.</summary>
    public const int AwardFieldNumber = 1;
    private int award_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Award {
      get { return award_; }
      set {
        award_ = value;
      }
    }

    /// <summary>Field number for the "PlateSymbol" field.</summary>
    public const int PlateSymbolFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_plateSymbol_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> plateSymbol_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> PlateSymbol {
      get { return plateSymbol_; }
    }

    /// <summary>Field number for the "RespinTimes" field.</summary>
    public const int RespinTimesFieldNumber = 3;
    private int respinTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RespinTimes {
      get { return respinTimes_; }
      set {
        respinTimes_ = value;
      }
    }

    /// <summary>Field number for the "Mult" field.</summary>
    public const int MultFieldNumber = 4;
    private double mult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Mult {
      get { return mult_; }
      set {
        mult_ = value;
      }
    }

    /// <summary>Field number for the "PlateWin" field.</summary>
    public const int PlateWinFieldNumber = 5;
    private double plateWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PlateWin {
      get { return plateWin_; }
      set {
        plateWin_ = value;
      }
    }

    /// <summary>Field number for the "MultWin" field.</summary>
    public const int MultWinFieldNumber = 6;
    private double multWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MultWin {
      get { return multWin_; }
      set {
        multWin_ = value;
      }
    }

    /// <summary>Field number for the "ExtraWin" field.</summary>
    public const int ExtraWinFieldNumber = 7;
    private double extraWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double ExtraWin {
      get { return extraWin_; }
      set {
        extraWin_ = value;
      }
    }

    /// <summary>Field number for the "RespinWin" field.</summary>
    public const int RespinWinFieldNumber = 8;
    private double respinWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RespinWin {
      get { return respinWin_; }
      set {
        respinWin_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 9;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 10;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 11;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 12;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Award != other.Award) return false;
      if(!plateSymbol_.Equals(other.plateSymbol_)) return false;
      if (RespinTimes != other.RespinTimes) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mult, other.Mult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlateWin, other.PlateWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MultWin, other.MultWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ExtraWin, other.ExtraWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RespinWin, other.RespinWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Award != 0) hash ^= Award.GetHashCode();
      hash ^= plateSymbol_.GetHashCode();
      if (RespinTimes != 0) hash ^= RespinTimes.GetHashCode();
      if (Mult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mult);
      if (PlateWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlateWin);
      if (MultWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MultWin);
      if (ExtraWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ExtraWin);
      if (RespinWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RespinWin);
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Award != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Award);
      }
      plateSymbol_.WriteTo(output, _repeated_plateSymbol_codec);
      if (RespinTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RespinTimes);
      }
      if (Mult != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Mult);
      }
      if (PlateWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PlateWin);
      }
      if (MultWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MultWin);
      }
      if (ExtraWin != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ExtraWin);
      }
      if (RespinWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(RespinWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AckType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Award != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Award);
      }
      plateSymbol_.WriteTo(ref output, _repeated_plateSymbol_codec);
      if (RespinTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RespinTimes);
      }
      if (Mult != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Mult);
      }
      if (PlateWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(PlateWin);
      }
      if (MultWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MultWin);
      }
      if (ExtraWin != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(ExtraWin);
      }
      if (RespinWin != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(RespinWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AckType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Award != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Award);
      }
      size += plateSymbol_.CalculateSize(_repeated_plateSymbol_codec);
      if (RespinTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RespinTimes);
      }
      if (Mult != 0D) {
        size += 1 + 8;
      }
      if (PlateWin != 0D) {
        size += 1 + 8;
      }
      if (MultWin != 0D) {
        size += 1 + 8;
      }
      if (ExtraWin != 0D) {
        size += 1 + 8;
      }
      if (RespinWin != 0D) {
        size += 1 + 8;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      if (other.Award != 0) {
        Award = other.Award;
      }
      plateSymbol_.Add(other.plateSymbol_);
      if (other.RespinTimes != 0) {
        RespinTimes = other.RespinTimes;
      }
      if (other.Mult != 0D) {
        Mult = other.Mult;
      }
      if (other.PlateWin != 0D) {
        PlateWin = other.PlateWin;
      }
      if (other.MultWin != 0D) {
        MultWin = other.MultWin;
      }
      if (other.ExtraWin != 0D) {
        ExtraWin = other.ExtraWin;
      }
      if (other.RespinWin != 0D) {
        RespinWin = other.RespinWin;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Award = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            plateSymbol_.AddEntriesFrom(input, _repeated_plateSymbol_codec);
            break;
          }
          case 24: {
            RespinTimes = input.ReadInt32();
            break;
          }
          case 33: {
            Mult = input.ReadDouble();
            break;
          }
          case 41: {
            PlateWin = input.ReadDouble();
            break;
          }
          case 49: {
            MultWin = input.ReadDouble();
            break;
          }
          case 57: {
            ExtraWin = input.ReadDouble();
            break;
          }
          case 65: {
            RespinWin = input.ReadDouble();
            break;
          }
          case 73: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 82: {
            ShowIndex = input.ReadString();
            break;
          }
          case 89: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 96: {
            AckType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Award = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            plateSymbol_.AddEntriesFrom(ref input, _repeated_plateSymbol_codec);
            break;
          }
          case 24: {
            RespinTimes = input.ReadInt32();
            break;
          }
          case 33: {
            Mult = input.ReadDouble();
            break;
          }
          case 41: {
            PlateWin = input.ReadDouble();
            break;
          }
          case 49: {
            MultWin = input.ReadDouble();
            break;
          }
          case 57: {
            ExtraWin = input.ReadDouble();
            break;
          }
          case 65: {
            RespinWin = input.ReadDouble();
            break;
          }
          case 73: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 82: {
            ShowIndex = input.ReadString();
            break;
          }
          case 89: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 96: {
            AckType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
