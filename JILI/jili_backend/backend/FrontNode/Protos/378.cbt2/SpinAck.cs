// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Cbt2 {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhNKaWxpLlByb3RvY29scy5jYnQyIrEBCgdTcGlu",
            "QWNrEjIKClJvdW5kUXVldWUYASADKAsyHi5KaWxpLlByb3RvY29scy5jYnQy",
            "LlJvdW5kSW5mbxIVCg1Cb251c1RvdGFsV2luGAIgASgBEhEKCUJvbnVzVHlw",
            "ZRgDIAEoBRIQCghUb3RhbFdpbhgEIAEoARIPCgdBY2tUeXBlGAUgASgFEgsK",
            "A1JUUBgGIAEoARILCgNMSUQYByABKAUSCwoDUklEGAggASgFIoICCglSb3Vu",
            "ZEluZm8SKwoGU3ltYm9sGAEgAygLMhsuSmlsaS5Qcm90b2NvbHMuY2J0Mi5D",
            "b2x1bW4SDAoETXVsdBgCIAEoARIQCghSb3VuZFdpbhgDIAEoARIQCghHZXRC",
            "b251cxgEIAEoCBISCgpCb251c1JvdW5kGAUgASgFEhEKCUJvbnVzTG9jaxgG",
            "IAMoCBIQCghCb251c011bBgHIAMoARITCgtCb251c05vd011bBgIIAMoARIV",
            "Cg1Bd2FyZFR5cGVGbGFnGAkgASgFEhAKCFJlZWxUeXBlGAogASgFEg4KBklz",
            "TWFpbhgLIAEoCBIPCgdNYXhGbGFnGAwgASgIIhUKBkNvbHVtbhILCgNSb3cY",
            "ASADKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cbt2.SpinAck), global::Jili.Protocols.Cbt2.SpinAck.Parser, new[]{ "RoundQueue", "BonusTotalWin", "BonusType", "TotalWin", "AckType", "RTP", "LID", "RID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cbt2.RoundInfo), global::Jili.Protocols.Cbt2.RoundInfo.Parser, new[]{ "Symbol", "Mult", "RoundWin", "GetBonus", "BonusRound", "BonusLock", "BonusMul", "BonusNowMul", "AwardTypeFlag", "ReelType", "IsMain", "MaxFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cbt2.Column), global::Jili.Protocols.Cbt2.Column.Parser, new[]{ "Row" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cbt2.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      roundQueue_ = other.roundQueue_.Clone();
      bonusTotalWin_ = other.bonusTotalWin_;
      bonusType_ = other.bonusType_;
      totalWin_ = other.totalWin_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      lID_ = other.lID_;
      rID_ = other.rID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "RoundQueue" field.</summary>
    public const int RoundQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cbt2.RoundInfo> _repeated_roundQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Cbt2.RoundInfo.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cbt2.RoundInfo> roundQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Cbt2.RoundInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cbt2.RoundInfo> RoundQueue {
      get { return roundQueue_; }
    }

    /// <summary>Field number for the "BonusTotalWin" field.</summary>
    public const int BonusTotalWinFieldNumber = 2;
    private double bonusTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BonusTotalWin {
      get { return bonusTotalWin_; }
      set {
        bonusTotalWin_ = value;
      }
    }

    /// <summary>Field number for the "BonusType" field.</summary>
    public const int BonusTypeFieldNumber = 3;
    private int bonusType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BonusType {
      get { return bonusType_; }
      set {
        bonusType_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 4;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 5;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 6;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "LID" field.</summary>
    public const int LIDFieldNumber = 7;
    private int lID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LID {
      get { return lID_; }
      set {
        lID_ = value;
      }
    }

    /// <summary>Field number for the "RID" field.</summary>
    public const int RIDFieldNumber = 8;
    private int rID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RID {
      get { return rID_; }
      set {
        rID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundQueue_.Equals(other.roundQueue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BonusTotalWin, other.BonusTotalWin)) return false;
      if (BonusType != other.BonusType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (LID != other.LID) return false;
      if (RID != other.RID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundQueue_.GetHashCode();
      if (BonusTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BonusTotalWin);
      if (BonusType != 0) hash ^= BonusType.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (LID != 0) hash ^= LID.GetHashCode();
      if (RID != 0) hash ^= RID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundQueue_.WriteTo(output, _repeated_roundQueue_codec);
      if (BonusTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BonusTotalWin);
      }
      if (BonusType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BonusType);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (AckType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundQueue_.WriteTo(ref output, _repeated_roundQueue_codec);
      if (BonusTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(BonusTotalWin);
      }
      if (BonusType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BonusType);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (AckType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RTP);
      }
      if (LID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LID);
      }
      if (RID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(RID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += roundQueue_.CalculateSize(_repeated_roundQueue_codec);
      if (BonusTotalWin != 0D) {
        size += 1 + 8;
      }
      if (BonusType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusType);
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (LID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LID);
      }
      if (RID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      roundQueue_.Add(other.roundQueue_);
      if (other.BonusTotalWin != 0D) {
        BonusTotalWin = other.BonusTotalWin;
      }
      if (other.BonusType != 0) {
        BonusType = other.BonusType;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.LID != 0) {
        LID = other.LID;
      }
      if (other.RID != 0) {
        RID = other.RID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(input, _repeated_roundQueue_codec);
            break;
          }
          case 17: {
            BonusTotalWin = input.ReadDouble();
            break;
          }
          case 24: {
            BonusType = input.ReadInt32();
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 40: {
            AckType = input.ReadInt32();
            break;
          }
          case 49: {
            RTP = input.ReadDouble();
            break;
          }
          case 56: {
            LID = input.ReadInt32();
            break;
          }
          case 64: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(ref input, _repeated_roundQueue_codec);
            break;
          }
          case 17: {
            BonusTotalWin = input.ReadDouble();
            break;
          }
          case 24: {
            BonusType = input.ReadInt32();
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 40: {
            AckType = input.ReadInt32();
            break;
          }
          case 49: {
            RTP = input.ReadDouble();
            break;
          }
          case 56: {
            LID = input.ReadInt32();
            break;
          }
          case 64: {
            RID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RoundInfo : pb::IMessage<RoundInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundInfo> _parser = new pb::MessageParser<RoundInfo>(() => new RoundInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoundInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cbt2.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo(RoundInfo other) : this() {
      symbol_ = other.symbol_.Clone();
      mult_ = other.mult_;
      roundWin_ = other.roundWin_;
      getBonus_ = other.getBonus_;
      bonusRound_ = other.bonusRound_;
      bonusLock_ = other.bonusLock_.Clone();
      bonusMul_ = other.bonusMul_.Clone();
      bonusNowMul_ = other.bonusNowMul_.Clone();
      awardTypeFlag_ = other.awardTypeFlag_;
      reelType_ = other.reelType_;
      isMain_ = other.isMain_;
      maxFlag_ = other.maxFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo Clone() {
      return new RoundInfo(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cbt2.Column> _repeated_symbol_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Cbt2.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cbt2.Column> symbol_ = new pbc::RepeatedField<global::Jili.Protocols.Cbt2.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cbt2.Column> Symbol {
      get { return symbol_; }
    }

    /// <summary>Field number for the "Mult" field.</summary>
    public const int MultFieldNumber = 2;
    private double mult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Mult {
      get { return mult_; }
      set {
        mult_ = value;
      }
    }

    /// <summary>Field number for the "RoundWin" field.</summary>
    public const int RoundWinFieldNumber = 3;
    private double roundWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RoundWin {
      get { return roundWin_; }
      set {
        roundWin_ = value;
      }
    }

    /// <summary>Field number for the "GetBonus" field.</summary>
    public const int GetBonusFieldNumber = 4;
    private bool getBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GetBonus {
      get { return getBonus_; }
      set {
        getBonus_ = value;
      }
    }

    /// <summary>Field number for the "BonusRound" field.</summary>
    public const int BonusRoundFieldNumber = 5;
    private int bonusRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BonusRound {
      get { return bonusRound_; }
      set {
        bonusRound_ = value;
      }
    }

    /// <summary>Field number for the "BonusLock" field.</summary>
    public const int BonusLockFieldNumber = 6;
    private static readonly pb::FieldCodec<bool> _repeated_bonusLock_codec
        = pb::FieldCodec.ForBool(50);
    private readonly pbc::RepeatedField<bool> bonusLock_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<bool> BonusLock {
      get { return bonusLock_; }
    }

    /// <summary>Field number for the "BonusMul" field.</summary>
    public const int BonusMulFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_bonusMul_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> bonusMul_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> BonusMul {
      get { return bonusMul_; }
    }

    /// <summary>Field number for the "BonusNowMul" field.</summary>
    public const int BonusNowMulFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_bonusNowMul_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> bonusNowMul_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> BonusNowMul {
      get { return bonusNowMul_; }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 9;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "ReelType" field.</summary>
    public const int ReelTypeFieldNumber = 10;
    private int reelType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReelType {
      get { return reelType_; }
      set {
        reelType_ = value;
      }
    }

    /// <summary>Field number for the "IsMain" field.</summary>
    public const int IsMainFieldNumber = 11;
    private bool isMain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMain {
      get { return isMain_; }
      set {
        isMain_ = value;
      }
    }

    /// <summary>Field number for the "MaxFlag" field.</summary>
    public const int MaxFlagFieldNumber = 12;
    private bool maxFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MaxFlag {
      get { return maxFlag_; }
      set {
        maxFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoundInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoundInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbol_.Equals(other.symbol_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mult, other.Mult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RoundWin, other.RoundWin)) return false;
      if (GetBonus != other.GetBonus) return false;
      if (BonusRound != other.BonusRound) return false;
      if(!bonusLock_.Equals(other.bonusLock_)) return false;
      if(!bonusMul_.Equals(other.bonusMul_)) return false;
      if(!bonusNowMul_.Equals(other.bonusNowMul_)) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (ReelType != other.ReelType) return false;
      if (IsMain != other.IsMain) return false;
      if (MaxFlag != other.MaxFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbol_.GetHashCode();
      if (Mult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mult);
      if (RoundWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RoundWin);
      if (GetBonus != false) hash ^= GetBonus.GetHashCode();
      if (BonusRound != 0) hash ^= BonusRound.GetHashCode();
      hash ^= bonusLock_.GetHashCode();
      hash ^= bonusMul_.GetHashCode();
      hash ^= bonusNowMul_.GetHashCode();
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (ReelType != 0) hash ^= ReelType.GetHashCode();
      if (IsMain != false) hash ^= IsMain.GetHashCode();
      if (MaxFlag != false) hash ^= MaxFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbol_.WriteTo(output, _repeated_symbol_codec);
      if (Mult != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Mult);
      }
      if (RoundWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(RoundWin);
      }
      if (GetBonus != false) {
        output.WriteRawTag(32);
        output.WriteBool(GetBonus);
      }
      if (BonusRound != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BonusRound);
      }
      bonusLock_.WriteTo(output, _repeated_bonusLock_codec);
      bonusMul_.WriteTo(output, _repeated_bonusMul_codec);
      bonusNowMul_.WriteTo(output, _repeated_bonusNowMul_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AwardTypeFlag);
      }
      if (ReelType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ReelType);
      }
      if (IsMain != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsMain);
      }
      if (MaxFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbol_.WriteTo(ref output, _repeated_symbol_codec);
      if (Mult != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Mult);
      }
      if (RoundWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(RoundWin);
      }
      if (GetBonus != false) {
        output.WriteRawTag(32);
        output.WriteBool(GetBonus);
      }
      if (BonusRound != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BonusRound);
      }
      bonusLock_.WriteTo(ref output, _repeated_bonusLock_codec);
      bonusMul_.WriteTo(ref output, _repeated_bonusMul_codec);
      bonusNowMul_.WriteTo(ref output, _repeated_bonusNowMul_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AwardTypeFlag);
      }
      if (ReelType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ReelType);
      }
      if (IsMain != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsMain);
      }
      if (MaxFlag != false) {
        output.WriteRawTag(96);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += symbol_.CalculateSize(_repeated_symbol_codec);
      if (Mult != 0D) {
        size += 1 + 8;
      }
      if (RoundWin != 0D) {
        size += 1 + 8;
      }
      if (GetBonus != false) {
        size += 1 + 1;
      }
      if (BonusRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusRound);
      }
      size += bonusLock_.CalculateSize(_repeated_bonusLock_codec);
      size += bonusMul_.CalculateSize(_repeated_bonusMul_codec);
      size += bonusNowMul_.CalculateSize(_repeated_bonusNowMul_codec);
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (ReelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReelType);
      }
      if (IsMain != false) {
        size += 1 + 1;
      }
      if (MaxFlag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoundInfo other) {
      if (other == null) {
        return;
      }
      symbol_.Add(other.symbol_);
      if (other.Mult != 0D) {
        Mult = other.Mult;
      }
      if (other.RoundWin != 0D) {
        RoundWin = other.RoundWin;
      }
      if (other.GetBonus != false) {
        GetBonus = other.GetBonus;
      }
      if (other.BonusRound != 0) {
        BonusRound = other.BonusRound;
      }
      bonusLock_.Add(other.bonusLock_);
      bonusMul_.Add(other.bonusMul_);
      bonusNowMul_.Add(other.bonusNowMul_);
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.ReelType != 0) {
        ReelType = other.ReelType;
      }
      if (other.IsMain != false) {
        IsMain = other.IsMain;
      }
      if (other.MaxFlag != false) {
        MaxFlag = other.MaxFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            symbol_.AddEntriesFrom(input, _repeated_symbol_codec);
            break;
          }
          case 17: {
            Mult = input.ReadDouble();
            break;
          }
          case 25: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 32: {
            GetBonus = input.ReadBool();
            break;
          }
          case 40: {
            BonusRound = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            bonusLock_.AddEntriesFrom(input, _repeated_bonusLock_codec);
            break;
          }
          case 58:
          case 57: {
            bonusMul_.AddEntriesFrom(input, _repeated_bonusMul_codec);
            break;
          }
          case 66:
          case 65: {
            bonusNowMul_.AddEntriesFrom(input, _repeated_bonusNowMul_codec);
            break;
          }
          case 72: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 80: {
            ReelType = input.ReadInt32();
            break;
          }
          case 88: {
            IsMain = input.ReadBool();
            break;
          }
          case 96: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            symbol_.AddEntriesFrom(ref input, _repeated_symbol_codec);
            break;
          }
          case 17: {
            Mult = input.ReadDouble();
            break;
          }
          case 25: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 32: {
            GetBonus = input.ReadBool();
            break;
          }
          case 40: {
            BonusRound = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            bonusLock_.AddEntriesFrom(ref input, _repeated_bonusLock_codec);
            break;
          }
          case 58:
          case 57: {
            bonusMul_.AddEntriesFrom(ref input, _repeated_bonusMul_codec);
            break;
          }
          case 66:
          case 65: {
            bonusNowMul_.AddEntriesFrom(ref input, _repeated_bonusNowMul_codec);
            break;
          }
          case 72: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 80: {
            ReelType = input.ReadInt32();
            break;
          }
          case 88: {
            IsMain = input.ReadBool();
            break;
          }
          case 96: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cbt2.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      row_ = other.row_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Row" field.</summary>
    public const int RowFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_row_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> row_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Row {
      get { return row_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!row_.Equals(other.row_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= row_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      row_.WriteTo(output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      row_.WriteTo(ref output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += row_.CalculateSize(_repeated_row_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      row_.Add(other.row_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(input, _repeated_row_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(ref input, _repeated_row_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
