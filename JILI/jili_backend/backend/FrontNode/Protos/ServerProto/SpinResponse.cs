// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinResponse.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Common {

  /// <summary>Holder for reflection information generated from SpinResponse.proto</summary>
  public static partial class SpinResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinResponse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJTcGluUmVzcG9uc2UucHJvdG8SFUppbGkuUHJvdG9jb2xzLkNvbW1vbhof",
            "Z29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoSZnJlZVNwaW5MaXN0",
            "LnByb3RvIscDCgxTcGluUmVzcG9uc2USDAoEZGF0YRgBIAEoDBIzCgdzZXJ2",
            "aWNlGAIgASgLMiIuSmlsaS5Qcm90b2NvbHMuQ29tbW9uLlNlcnZpY2VEYXRh",
            "EhAKCHRvdGFsV2luGAMgASgBEhIKCnJvdW5kSW5kZXgYBCABKAMSEQoJc2tp",
            "cEZpZWxkGAUgASgFEhEKCXBvc3RNb25leRgGIAEoARISCgpTdGFydFJvdW5k",
            "GAcgASgFEg8KB2hhc3NwaW4YCCABKAgSDgoGQkRUeXBlGAkgASgFEg8KB0JC",
            "VGltZXMYCiABKAUSDwoHTWFsbEJldBgLIAEoARITCgtBY2N1TWFsbEJldBgM",
            "IAEoARIOCgZJdGVtSUQYDSABKAUSEAoISXRlbUljb24YDiABKAUSEgoKSXRl",
            "bUFtb3VudBgPIAEoBRIPCgdCYXNlQmV0GBAgASgBEg8KB1JlYWxCZXQYESAB",
            "KAESEAoIU3BpblR5cGUYEiABKAUSEQoJSXRlbUxldmVsGBMgASgFEhQKDHJv",
            "dW5kSW5kZXhWMhgUIAEoAxITCgtHYW1lTWFsbEJldBgVIAEoARIUCgxHYW1l",
            "TWFsbFR5cGUYFiABKAUihgMKC1NlcnZpY2VEYXRhEhUKDW1pc3Npb25SZXdh",
            "cmQYASABKA0SDgoGanBUeXBlGAIgASgFEg0KBWpwV2luGAMgASgBEhEKCWZ1",
            "bGxKcFdpbhgEIAEoARITCgt0cmlhbGZpbmlzaBgFIAEoBRISCgp0cmlhbGF3",
            "YXJkGAYgASgFEhIKCmZyZWVyZW1haW4YByABKAUSEAoIY2FyZGxpc3QYCCAB",
            "KAwSDAoEYnVmZhgJIAEoDBISCgpza2lwRmllbGQxGAogASgFEhIKCnNraXBG",
            "aWVsZDIYCyABKAUSEgoKc2tpcEZpZWxkMxgMIAEoBRITCgttaXNzaW9ubGlz",
            "dBgNIAEoDBISCgpza2lwRmllbGQ0GA4gASgFEiMKDGZyZWVSZW1haW5WMhgP",
            "IAEoCzINLmZyZWVTcGluTGlzdBIQCghtaXNzaW9uMhgQIAEoDBI1CgpqaWxp",
            "SnBPcGVuGBEgASgLMiEuSmlsaS5Qcm90b2NvbHMuQ29tbW9uLkppbGlKcE9w",
            "ZW4ipAEKCkppbGlKcE9wZW4SCgoCaWQYASABKAUSDgoGZ2FtZUlEGAIgASgN",
            "EhEKCWFjY291bnRJRBgDIAEoAxIMCgRuYW1lGAQgASgJEg4KBmpwVHlwZRgF",
            "IAEoBRILCgN3aW4YBiABKAESLgoKY3JlYXRlVGltZRgHIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASDAoEb2RkcxgIIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Jili.Protocols.Common.FreeSpinListReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Common.SpinResponse), global::Jili.Protocols.Common.SpinResponse.Parser, new[]{ "Data", "Service", "TotalWin", "RoundIndex", "SkipField", "PostMoney", "StartRound", "Hasspin", "BDType", "BBTimes", "MallBet", "AccuMallBet", "ItemID", "ItemIcon", "ItemAmount", "BaseBet", "RealBet", "SpinType", "ItemLevel", "RoundIndexV2", "GameMallBet", "GameMallType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Common.ServiceData), global::Jili.Protocols.Common.ServiceData.Parser, new[]{ "MissionReward", "JpType", "JpWin", "FullJpWin", "Trialfinish", "Trialaward", "Freeremain", "Cardlist", "Buff", "SkipField1", "SkipField2", "SkipField3", "Missionlist", "SkipField4", "FreeRemainV2", "Mission2", "JiliJpOpen" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Common.JiliJpOpen), global::Jili.Protocols.Common.JiliJpOpen.Parser, new[]{ "Id", "GameID", "AccountID", "Name", "JpType", "Win", "CreateTime", "Odds" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinResponse : pb::IMessage<SpinResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinResponse> _parser = new pb::MessageParser<SpinResponse>(() => new SpinResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Common.SpinResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinResponse(SpinResponse other) : this() {
      data_ = other.data_;
      service_ = other.service_ != null ? other.service_.Clone() : null;
      totalWin_ = other.totalWin_;
      roundIndex_ = other.roundIndex_;
      skipField_ = other.skipField_;
      postMoney_ = other.postMoney_;
      startRound_ = other.startRound_;
      hasspin_ = other.hasspin_;
      bDType_ = other.bDType_;
      bBTimes_ = other.bBTimes_;
      mallBet_ = other.mallBet_;
      accuMallBet_ = other.accuMallBet_;
      itemID_ = other.itemID_;
      itemIcon_ = other.itemIcon_;
      itemAmount_ = other.itemAmount_;
      baseBet_ = other.baseBet_;
      realBet_ = other.realBet_;
      spinType_ = other.spinType_;
      itemLevel_ = other.itemLevel_;
      roundIndexV2_ = other.roundIndexV2_;
      gameMallBet_ = other.gameMallBet_;
      gameMallType_ = other.gameMallType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinResponse Clone() {
      return new SpinResponse(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private global::Jili.Protocols.Common.ServiceData service_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Common.ServiceData Service {
      get { return service_; }
      set {
        service_ = value;
      }
    }

    /// <summary>Field number for the "totalWin" field.</summary>
    public const int TotalWinFieldNumber = 3;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "roundIndex" field.</summary>
    public const int RoundIndexFieldNumber = 4;
    private long roundIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RoundIndex {
      get { return roundIndex_; }
      set {
        roundIndex_ = value;
      }
    }

    /// <summary>Field number for the "skipField" field.</summary>
    public const int SkipFieldFieldNumber = 5;
    private int skipField_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipField {
      get { return skipField_; }
      set {
        skipField_ = value;
      }
    }

    /// <summary>Field number for the "postMoney" field.</summary>
    public const int PostMoneyFieldNumber = 6;
    private double postMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PostMoney {
      get { return postMoney_; }
      set {
        postMoney_ = value;
      }
    }

    /// <summary>Field number for the "StartRound" field.</summary>
    public const int StartRoundFieldNumber = 7;
    private int startRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartRound {
      get { return startRound_; }
      set {
        startRound_ = value;
      }
    }

    /// <summary>Field number for the "hasspin" field.</summary>
    public const int HasspinFieldNumber = 8;
    private bool hasspin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Hasspin {
      get { return hasspin_; }
      set {
        hasspin_ = value;
      }
    }

    /// <summary>Field number for the "BDType" field.</summary>
    public const int BDTypeFieldNumber = 9;
    private int bDType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BDType {
      get { return bDType_; }
      set {
        bDType_ = value;
      }
    }

    /// <summary>Field number for the "BBTimes" field.</summary>
    public const int BBTimesFieldNumber = 10;
    private int bBTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BBTimes {
      get { return bBTimes_; }
      set {
        bBTimes_ = value;
      }
    }

    /// <summary>Field number for the "MallBet" field.</summary>
    public const int MallBetFieldNumber = 11;
    private double mallBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double MallBet {
      get { return mallBet_; }
      set {
        mallBet_ = value;
      }
    }

    /// <summary>Field number for the "AccuMallBet" field.</summary>
    public const int AccuMallBetFieldNumber = 12;
    private double accuMallBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AccuMallBet {
      get { return accuMallBet_; }
      set {
        accuMallBet_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 13;
    private int itemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "ItemIcon" field.</summary>
    public const int ItemIconFieldNumber = 14;
    private int itemIcon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItemIcon {
      get { return itemIcon_; }
      set {
        itemIcon_ = value;
      }
    }

    /// <summary>Field number for the "ItemAmount" field.</summary>
    public const int ItemAmountFieldNumber = 15;
    private int itemAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItemAmount {
      get { return itemAmount_; }
      set {
        itemAmount_ = value;
      }
    }

    /// <summary>Field number for the "BaseBet" field.</summary>
    public const int BaseBetFieldNumber = 16;
    private double baseBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double BaseBet {
      get { return baseBet_; }
      set {
        baseBet_ = value;
      }
    }

    /// <summary>Field number for the "RealBet" field.</summary>
    public const int RealBetFieldNumber = 17;
    private double realBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RealBet {
      get { return realBet_; }
      set {
        realBet_ = value;
      }
    }

    /// <summary>Field number for the "SpinType" field.</summary>
    public const int SpinTypeFieldNumber = 18;
    private int spinType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpinType {
      get { return spinType_; }
      set {
        spinType_ = value;
      }
    }

    /// <summary>Field number for the "ItemLevel" field.</summary>
    public const int ItemLevelFieldNumber = 19;
    private int itemLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ItemLevel {
      get { return itemLevel_; }
      set {
        itemLevel_ = value;
      }
    }

    /// <summary>Field number for the "roundIndexV2" field.</summary>
    public const int RoundIndexV2FieldNumber = 20;
    private long roundIndexV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long RoundIndexV2 {
      get { return roundIndexV2_; }
      set {
        roundIndexV2_ = value;
      }
    }

    /// <summary>Field number for the "GameMallBet" field.</summary>
    public const int GameMallBetFieldNumber = 21;
    private double gameMallBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double GameMallBet {
      get { return gameMallBet_; }
      set {
        gameMallBet_ = value;
      }
    }

    /// <summary>Field number for the "GameMallType" field.</summary>
    public const int GameMallTypeFieldNumber = 22;
    private int gameMallType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameMallType {
      get { return gameMallType_; }
      set {
        gameMallType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (!object.Equals(Service, other.Service)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (RoundIndex != other.RoundIndex) return false;
      if (SkipField != other.SkipField) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PostMoney, other.PostMoney)) return false;
      if (StartRound != other.StartRound) return false;
      if (Hasspin != other.Hasspin) return false;
      if (BDType != other.BDType) return false;
      if (BBTimes != other.BBTimes) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MallBet, other.MallBet)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AccuMallBet, other.AccuMallBet)) return false;
      if (ItemID != other.ItemID) return false;
      if (ItemIcon != other.ItemIcon) return false;
      if (ItemAmount != other.ItemAmount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(BaseBet, other.BaseBet)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RealBet, other.RealBet)) return false;
      if (SpinType != other.SpinType) return false;
      if (ItemLevel != other.ItemLevel) return false;
      if (RoundIndexV2 != other.RoundIndexV2) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GameMallBet, other.GameMallBet)) return false;
      if (GameMallType != other.GameMallType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (service_ != null) hash ^= Service.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (RoundIndex != 0L) hash ^= RoundIndex.GetHashCode();
      if (SkipField != 0) hash ^= SkipField.GetHashCode();
      if (PostMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PostMoney);
      if (StartRound != 0) hash ^= StartRound.GetHashCode();
      if (Hasspin != false) hash ^= Hasspin.GetHashCode();
      if (BDType != 0) hash ^= BDType.GetHashCode();
      if (BBTimes != 0) hash ^= BBTimes.GetHashCode();
      if (MallBet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MallBet);
      if (AccuMallBet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AccuMallBet);
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (ItemIcon != 0) hash ^= ItemIcon.GetHashCode();
      if (ItemAmount != 0) hash ^= ItemAmount.GetHashCode();
      if (BaseBet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(BaseBet);
      if (RealBet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RealBet);
      if (SpinType != 0) hash ^= SpinType.GetHashCode();
      if (ItemLevel != 0) hash ^= ItemLevel.GetHashCode();
      if (RoundIndexV2 != 0L) hash ^= RoundIndexV2.GetHashCode();
      if (GameMallBet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GameMallBet);
      if (GameMallType != 0) hash ^= GameMallType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (service_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Service);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      if (RoundIndex != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RoundIndex);
      }
      if (SkipField != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkipField);
      }
      if (PostMoney != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PostMoney);
      }
      if (StartRound != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StartRound);
      }
      if (Hasspin != false) {
        output.WriteRawTag(64);
        output.WriteBool(Hasspin);
      }
      if (BDType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BDType);
      }
      if (BBTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BBTimes);
      }
      if (MallBet != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(MallBet);
      }
      if (AccuMallBet != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(AccuMallBet);
      }
      if (ItemID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ItemID);
      }
      if (ItemIcon != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ItemIcon);
      }
      if (ItemAmount != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ItemAmount);
      }
      if (BaseBet != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(BaseBet);
      }
      if (RealBet != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(RealBet);
      }
      if (SpinType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SpinType);
      }
      if (ItemLevel != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ItemLevel);
      }
      if (RoundIndexV2 != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(RoundIndexV2);
      }
      if (GameMallBet != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(GameMallBet);
      }
      if (GameMallType != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(GameMallType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (service_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Service);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      if (RoundIndex != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RoundIndex);
      }
      if (SkipField != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkipField);
      }
      if (PostMoney != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(PostMoney);
      }
      if (StartRound != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(StartRound);
      }
      if (Hasspin != false) {
        output.WriteRawTag(64);
        output.WriteBool(Hasspin);
      }
      if (BDType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BDType);
      }
      if (BBTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(BBTimes);
      }
      if (MallBet != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(MallBet);
      }
      if (AccuMallBet != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(AccuMallBet);
      }
      if (ItemID != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ItemID);
      }
      if (ItemIcon != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ItemIcon);
      }
      if (ItemAmount != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ItemAmount);
      }
      if (BaseBet != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(BaseBet);
      }
      if (RealBet != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(RealBet);
      }
      if (SpinType != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(SpinType);
      }
      if (ItemLevel != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ItemLevel);
      }
      if (RoundIndexV2 != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(RoundIndexV2);
      }
      if (GameMallBet != 0D) {
        output.WriteRawTag(169, 1);
        output.WriteDouble(GameMallBet);
      }
      if (GameMallType != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(GameMallType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (service_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Service);
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (RoundIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundIndex);
      }
      if (SkipField != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipField);
      }
      if (PostMoney != 0D) {
        size += 1 + 8;
      }
      if (StartRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartRound);
      }
      if (Hasspin != false) {
        size += 1 + 1;
      }
      if (BDType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BDType);
      }
      if (BBTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BBTimes);
      }
      if (MallBet != 0D) {
        size += 1 + 8;
      }
      if (AccuMallBet != 0D) {
        size += 1 + 8;
      }
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (ItemIcon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemIcon);
      }
      if (ItemAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemAmount);
      }
      if (BaseBet != 0D) {
        size += 2 + 8;
      }
      if (RealBet != 0D) {
        size += 2 + 8;
      }
      if (SpinType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpinType);
      }
      if (ItemLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ItemLevel);
      }
      if (RoundIndexV2 != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RoundIndexV2);
      }
      if (GameMallBet != 0D) {
        size += 2 + 8;
      }
      if (GameMallType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GameMallType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinResponse other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.service_ != null) {
        if (service_ == null) {
          Service = new global::Jili.Protocols.Common.ServiceData();
        }
        Service.MergeFrom(other.Service);
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.RoundIndex != 0L) {
        RoundIndex = other.RoundIndex;
      }
      if (other.SkipField != 0) {
        SkipField = other.SkipField;
      }
      if (other.PostMoney != 0D) {
        PostMoney = other.PostMoney;
      }
      if (other.StartRound != 0) {
        StartRound = other.StartRound;
      }
      if (other.Hasspin != false) {
        Hasspin = other.Hasspin;
      }
      if (other.BDType != 0) {
        BDType = other.BDType;
      }
      if (other.BBTimes != 0) {
        BBTimes = other.BBTimes;
      }
      if (other.MallBet != 0D) {
        MallBet = other.MallBet;
      }
      if (other.AccuMallBet != 0D) {
        AccuMallBet = other.AccuMallBet;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.ItemIcon != 0) {
        ItemIcon = other.ItemIcon;
      }
      if (other.ItemAmount != 0) {
        ItemAmount = other.ItemAmount;
      }
      if (other.BaseBet != 0D) {
        BaseBet = other.BaseBet;
      }
      if (other.RealBet != 0D) {
        RealBet = other.RealBet;
      }
      if (other.SpinType != 0) {
        SpinType = other.SpinType;
      }
      if (other.ItemLevel != 0) {
        ItemLevel = other.ItemLevel;
      }
      if (other.RoundIndexV2 != 0L) {
        RoundIndexV2 = other.RoundIndexV2;
      }
      if (other.GameMallBet != 0D) {
        GameMallBet = other.GameMallBet;
      }
      if (other.GameMallType != 0) {
        GameMallType = other.GameMallType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 18: {
            if (service_ == null) {
              Service = new global::Jili.Protocols.Common.ServiceData();
            }
            input.ReadMessage(Service);
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 32: {
            RoundIndex = input.ReadInt64();
            break;
          }
          case 40: {
            SkipField = input.ReadInt32();
            break;
          }
          case 49: {
            PostMoney = input.ReadDouble();
            break;
          }
          case 56: {
            StartRound = input.ReadInt32();
            break;
          }
          case 64: {
            Hasspin = input.ReadBool();
            break;
          }
          case 72: {
            BDType = input.ReadInt32();
            break;
          }
          case 80: {
            BBTimes = input.ReadInt32();
            break;
          }
          case 89: {
            MallBet = input.ReadDouble();
            break;
          }
          case 97: {
            AccuMallBet = input.ReadDouble();
            break;
          }
          case 104: {
            ItemID = input.ReadInt32();
            break;
          }
          case 112: {
            ItemIcon = input.ReadInt32();
            break;
          }
          case 120: {
            ItemAmount = input.ReadInt32();
            break;
          }
          case 129: {
            BaseBet = input.ReadDouble();
            break;
          }
          case 137: {
            RealBet = input.ReadDouble();
            break;
          }
          case 144: {
            SpinType = input.ReadInt32();
            break;
          }
          case 152: {
            ItemLevel = input.ReadInt32();
            break;
          }
          case 160: {
            RoundIndexV2 = input.ReadInt64();
            break;
          }
          case 169: {
            GameMallBet = input.ReadDouble();
            break;
          }
          case 176: {
            GameMallType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 18: {
            if (service_ == null) {
              Service = new global::Jili.Protocols.Common.ServiceData();
            }
            input.ReadMessage(Service);
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 32: {
            RoundIndex = input.ReadInt64();
            break;
          }
          case 40: {
            SkipField = input.ReadInt32();
            break;
          }
          case 49: {
            PostMoney = input.ReadDouble();
            break;
          }
          case 56: {
            StartRound = input.ReadInt32();
            break;
          }
          case 64: {
            Hasspin = input.ReadBool();
            break;
          }
          case 72: {
            BDType = input.ReadInt32();
            break;
          }
          case 80: {
            BBTimes = input.ReadInt32();
            break;
          }
          case 89: {
            MallBet = input.ReadDouble();
            break;
          }
          case 97: {
            AccuMallBet = input.ReadDouble();
            break;
          }
          case 104: {
            ItemID = input.ReadInt32();
            break;
          }
          case 112: {
            ItemIcon = input.ReadInt32();
            break;
          }
          case 120: {
            ItemAmount = input.ReadInt32();
            break;
          }
          case 129: {
            BaseBet = input.ReadDouble();
            break;
          }
          case 137: {
            RealBet = input.ReadDouble();
            break;
          }
          case 144: {
            SpinType = input.ReadInt32();
            break;
          }
          case 152: {
            ItemLevel = input.ReadInt32();
            break;
          }
          case 160: {
            RoundIndexV2 = input.ReadInt64();
            break;
          }
          case 169: {
            GameMallBet = input.ReadDouble();
            break;
          }
          case 176: {
            GameMallType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ServiceData : pb::IMessage<ServiceData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServiceData> _parser = new pb::MessageParser<ServiceData>(() => new ServiceData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ServiceData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Common.SpinResponseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ServiceData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ServiceData(ServiceData other) : this() {
      missionReward_ = other.missionReward_;
      jpType_ = other.jpType_;
      jpWin_ = other.jpWin_;
      fullJpWin_ = other.fullJpWin_;
      trialfinish_ = other.trialfinish_;
      trialaward_ = other.trialaward_;
      freeremain_ = other.freeremain_;
      cardlist_ = other.cardlist_;
      buff_ = other.buff_;
      skipField1_ = other.skipField1_;
      skipField2_ = other.skipField2_;
      skipField3_ = other.skipField3_;
      missionlist_ = other.missionlist_;
      skipField4_ = other.skipField4_;
      freeRemainV2_ = other.freeRemainV2_ != null ? other.freeRemainV2_.Clone() : null;
      mission2_ = other.mission2_;
      jiliJpOpen_ = other.jiliJpOpen_ != null ? other.jiliJpOpen_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ServiceData Clone() {
      return new ServiceData(this);
    }

    /// <summary>Field number for the "missionReward" field.</summary>
    public const int MissionRewardFieldNumber = 1;
    private uint missionReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MissionReward {
      get { return missionReward_; }
      set {
        missionReward_ = value;
      }
    }

    /// <summary>Field number for the "jpType" field.</summary>
    public const int JpTypeFieldNumber = 2;
    private int jpType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JpType {
      get { return jpType_; }
      set {
        jpType_ = value;
      }
    }

    /// <summary>Field number for the "jpWin" field.</summary>
    public const int JpWinFieldNumber = 3;
    private double jpWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double JpWin {
      get { return jpWin_; }
      set {
        jpWin_ = value;
      }
    }

    /// <summary>Field number for the "fullJpWin" field.</summary>
    public const int FullJpWinFieldNumber = 4;
    private double fullJpWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FullJpWin {
      get { return fullJpWin_; }
      set {
        fullJpWin_ = value;
      }
    }

    /// <summary>Field number for the "trialfinish" field.</summary>
    public const int TrialfinishFieldNumber = 5;
    private int trialfinish_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Trialfinish {
      get { return trialfinish_; }
      set {
        trialfinish_ = value;
      }
    }

    /// <summary>Field number for the "trialaward" field.</summary>
    public const int TrialawardFieldNumber = 6;
    private int trialaward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Trialaward {
      get { return trialaward_; }
      set {
        trialaward_ = value;
      }
    }

    /// <summary>Field number for the "freeremain" field.</summary>
    public const int FreeremainFieldNumber = 7;
    private int freeremain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Freeremain {
      get { return freeremain_; }
      set {
        freeremain_ = value;
      }
    }

    /// <summary>Field number for the "cardlist" field.</summary>
    public const int CardlistFieldNumber = 8;
    private pb::ByteString cardlist_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Cardlist {
      get { return cardlist_; }
      set {
        cardlist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "buff" field.</summary>
    public const int BuffFieldNumber = 9;
    private pb::ByteString buff_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Buff {
      get { return buff_; }
      set {
        buff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skipField1" field.</summary>
    public const int SkipField1FieldNumber = 10;
    private int skipField1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipField1 {
      get { return skipField1_; }
      set {
        skipField1_ = value;
      }
    }

    /// <summary>Field number for the "skipField2" field.</summary>
    public const int SkipField2FieldNumber = 11;
    private int skipField2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipField2 {
      get { return skipField2_; }
      set {
        skipField2_ = value;
      }
    }

    /// <summary>Field number for the "skipField3" field.</summary>
    public const int SkipField3FieldNumber = 12;
    private int skipField3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipField3 {
      get { return skipField3_; }
      set {
        skipField3_ = value;
      }
    }

    /// <summary>Field number for the "missionlist" field.</summary>
    public const int MissionlistFieldNumber = 13;
    private pb::ByteString missionlist_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Missionlist {
      get { return missionlist_; }
      set {
        missionlist_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "skipField4" field.</summary>
    public const int SkipField4FieldNumber = 14;
    private int skipField4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkipField4 {
      get { return skipField4_; }
      set {
        skipField4_ = value;
      }
    }

    /// <summary>Field number for the "freeRemainV2" field.</summary>
    public const int FreeRemainV2FieldNumber = 15;
    private global::Jili.Protocols.Common.freeSpinList freeRemainV2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Common.freeSpinList FreeRemainV2 {
      get { return freeRemainV2_; }
      set {
        freeRemainV2_ = value;
      }
    }

    /// <summary>Field number for the "mission2" field.</summary>
    public const int Mission2FieldNumber = 16;
    private pb::ByteString mission2_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Mission2 {
      get { return mission2_; }
      set {
        mission2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jiliJpOpen" field.</summary>
    public const int JiliJpOpenFieldNumber = 17;
    private global::Jili.Protocols.Common.JiliJpOpen jiliJpOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Common.JiliJpOpen JiliJpOpen {
      get { return jiliJpOpen_; }
      set {
        jiliJpOpen_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ServiceData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ServiceData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissionReward != other.MissionReward) return false;
      if (JpType != other.JpType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(JpWin, other.JpWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FullJpWin, other.FullJpWin)) return false;
      if (Trialfinish != other.Trialfinish) return false;
      if (Trialaward != other.Trialaward) return false;
      if (Freeremain != other.Freeremain) return false;
      if (Cardlist != other.Cardlist) return false;
      if (Buff != other.Buff) return false;
      if (SkipField1 != other.SkipField1) return false;
      if (SkipField2 != other.SkipField2) return false;
      if (SkipField3 != other.SkipField3) return false;
      if (Missionlist != other.Missionlist) return false;
      if (SkipField4 != other.SkipField4) return false;
      if (!object.Equals(FreeRemainV2, other.FreeRemainV2)) return false;
      if (Mission2 != other.Mission2) return false;
      if (!object.Equals(JiliJpOpen, other.JiliJpOpen)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MissionReward != 0) hash ^= MissionReward.GetHashCode();
      if (JpType != 0) hash ^= JpType.GetHashCode();
      if (JpWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(JpWin);
      if (FullJpWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FullJpWin);
      if (Trialfinish != 0) hash ^= Trialfinish.GetHashCode();
      if (Trialaward != 0) hash ^= Trialaward.GetHashCode();
      if (Freeremain != 0) hash ^= Freeremain.GetHashCode();
      if (Cardlist.Length != 0) hash ^= Cardlist.GetHashCode();
      if (Buff.Length != 0) hash ^= Buff.GetHashCode();
      if (SkipField1 != 0) hash ^= SkipField1.GetHashCode();
      if (SkipField2 != 0) hash ^= SkipField2.GetHashCode();
      if (SkipField3 != 0) hash ^= SkipField3.GetHashCode();
      if (Missionlist.Length != 0) hash ^= Missionlist.GetHashCode();
      if (SkipField4 != 0) hash ^= SkipField4.GetHashCode();
      if (freeRemainV2_ != null) hash ^= FreeRemainV2.GetHashCode();
      if (Mission2.Length != 0) hash ^= Mission2.GetHashCode();
      if (jiliJpOpen_ != null) hash ^= JiliJpOpen.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MissionReward != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MissionReward);
      }
      if (JpType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JpType);
      }
      if (JpWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(JpWin);
      }
      if (FullJpWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FullJpWin);
      }
      if (Trialfinish != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Trialfinish);
      }
      if (Trialaward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Trialaward);
      }
      if (Freeremain != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Freeremain);
      }
      if (Cardlist.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Cardlist);
      }
      if (Buff.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Buff);
      }
      if (SkipField1 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SkipField1);
      }
      if (SkipField2 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SkipField2);
      }
      if (SkipField3 != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SkipField3);
      }
      if (Missionlist.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(Missionlist);
      }
      if (SkipField4 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SkipField4);
      }
      if (freeRemainV2_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FreeRemainV2);
      }
      if (Mission2.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(Mission2);
      }
      if (jiliJpOpen_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(JiliJpOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MissionReward != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(MissionReward);
      }
      if (JpType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(JpType);
      }
      if (JpWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(JpWin);
      }
      if (FullJpWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FullJpWin);
      }
      if (Trialfinish != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Trialfinish);
      }
      if (Trialaward != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Trialaward);
      }
      if (Freeremain != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Freeremain);
      }
      if (Cardlist.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Cardlist);
      }
      if (Buff.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Buff);
      }
      if (SkipField1 != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SkipField1);
      }
      if (SkipField2 != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SkipField2);
      }
      if (SkipField3 != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(SkipField3);
      }
      if (Missionlist.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(Missionlist);
      }
      if (SkipField4 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SkipField4);
      }
      if (freeRemainV2_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FreeRemainV2);
      }
      if (Mission2.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(Mission2);
      }
      if (jiliJpOpen_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(JiliJpOpen);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MissionReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MissionReward);
      }
      if (JpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JpType);
      }
      if (JpWin != 0D) {
        size += 1 + 8;
      }
      if (FullJpWin != 0D) {
        size += 1 + 8;
      }
      if (Trialfinish != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trialfinish);
      }
      if (Trialaward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trialaward);
      }
      if (Freeremain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Freeremain);
      }
      if (Cardlist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cardlist);
      }
      if (Buff.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Buff);
      }
      if (SkipField1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipField1);
      }
      if (SkipField2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipField2);
      }
      if (SkipField3 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipField3);
      }
      if (Missionlist.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Missionlist);
      }
      if (SkipField4 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkipField4);
      }
      if (freeRemainV2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FreeRemainV2);
      }
      if (Mission2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Mission2);
      }
      if (jiliJpOpen_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(JiliJpOpen);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ServiceData other) {
      if (other == null) {
        return;
      }
      if (other.MissionReward != 0) {
        MissionReward = other.MissionReward;
      }
      if (other.JpType != 0) {
        JpType = other.JpType;
      }
      if (other.JpWin != 0D) {
        JpWin = other.JpWin;
      }
      if (other.FullJpWin != 0D) {
        FullJpWin = other.FullJpWin;
      }
      if (other.Trialfinish != 0) {
        Trialfinish = other.Trialfinish;
      }
      if (other.Trialaward != 0) {
        Trialaward = other.Trialaward;
      }
      if (other.Freeremain != 0) {
        Freeremain = other.Freeremain;
      }
      if (other.Cardlist.Length != 0) {
        Cardlist = other.Cardlist;
      }
      if (other.Buff.Length != 0) {
        Buff = other.Buff;
      }
      if (other.SkipField1 != 0) {
        SkipField1 = other.SkipField1;
      }
      if (other.SkipField2 != 0) {
        SkipField2 = other.SkipField2;
      }
      if (other.SkipField3 != 0) {
        SkipField3 = other.SkipField3;
      }
      if (other.Missionlist.Length != 0) {
        Missionlist = other.Missionlist;
      }
      if (other.SkipField4 != 0) {
        SkipField4 = other.SkipField4;
      }
      if (other.freeRemainV2_ != null) {
        if (freeRemainV2_ == null) {
          FreeRemainV2 = new global::Jili.Protocols.Common.freeSpinList();
        }
        FreeRemainV2.MergeFrom(other.FreeRemainV2);
      }
      if (other.Mission2.Length != 0) {
        Mission2 = other.Mission2;
      }
      if (other.jiliJpOpen_ != null) {
        if (jiliJpOpen_ == null) {
          JiliJpOpen = new global::Jili.Protocols.Common.JiliJpOpen();
        }
        JiliJpOpen.MergeFrom(other.JiliJpOpen);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissionReward = input.ReadUInt32();
            break;
          }
          case 16: {
            JpType = input.ReadInt32();
            break;
          }
          case 25: {
            JpWin = input.ReadDouble();
            break;
          }
          case 33: {
            FullJpWin = input.ReadDouble();
            break;
          }
          case 40: {
            Trialfinish = input.ReadInt32();
            break;
          }
          case 48: {
            Trialaward = input.ReadInt32();
            break;
          }
          case 56: {
            Freeremain = input.ReadInt32();
            break;
          }
          case 66: {
            Cardlist = input.ReadBytes();
            break;
          }
          case 74: {
            Buff = input.ReadBytes();
            break;
          }
          case 80: {
            SkipField1 = input.ReadInt32();
            break;
          }
          case 88: {
            SkipField2 = input.ReadInt32();
            break;
          }
          case 96: {
            SkipField3 = input.ReadInt32();
            break;
          }
          case 106: {
            Missionlist = input.ReadBytes();
            break;
          }
          case 112: {
            SkipField4 = input.ReadInt32();
            break;
          }
          case 122: {
            if (freeRemainV2_ == null) {
              FreeRemainV2 = new global::Jili.Protocols.Common.freeSpinList();
            }
            input.ReadMessage(FreeRemainV2);
            break;
          }
          case 130: {
            Mission2 = input.ReadBytes();
            break;
          }
          case 138: {
            if (jiliJpOpen_ == null) {
              JiliJpOpen = new global::Jili.Protocols.Common.JiliJpOpen();
            }
            input.ReadMessage(JiliJpOpen);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MissionReward = input.ReadUInt32();
            break;
          }
          case 16: {
            JpType = input.ReadInt32();
            break;
          }
          case 25: {
            JpWin = input.ReadDouble();
            break;
          }
          case 33: {
            FullJpWin = input.ReadDouble();
            break;
          }
          case 40: {
            Trialfinish = input.ReadInt32();
            break;
          }
          case 48: {
            Trialaward = input.ReadInt32();
            break;
          }
          case 56: {
            Freeremain = input.ReadInt32();
            break;
          }
          case 66: {
            Cardlist = input.ReadBytes();
            break;
          }
          case 74: {
            Buff = input.ReadBytes();
            break;
          }
          case 80: {
            SkipField1 = input.ReadInt32();
            break;
          }
          case 88: {
            SkipField2 = input.ReadInt32();
            break;
          }
          case 96: {
            SkipField3 = input.ReadInt32();
            break;
          }
          case 106: {
            Missionlist = input.ReadBytes();
            break;
          }
          case 112: {
            SkipField4 = input.ReadInt32();
            break;
          }
          case 122: {
            if (freeRemainV2_ == null) {
              FreeRemainV2 = new global::Jili.Protocols.Common.freeSpinList();
            }
            input.ReadMessage(FreeRemainV2);
            break;
          }
          case 130: {
            Mission2 = input.ReadBytes();
            break;
          }
          case 138: {
            if (jiliJpOpen_ == null) {
              JiliJpOpen = new global::Jili.Protocols.Common.JiliJpOpen();
            }
            input.ReadMessage(JiliJpOpen);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class JiliJpOpen : pb::IMessage<JiliJpOpen>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JiliJpOpen> _parser = new pb::MessageParser<JiliJpOpen>(() => new JiliJpOpen());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JiliJpOpen> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Common.SpinResponseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JiliJpOpen() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JiliJpOpen(JiliJpOpen other) : this() {
      id_ = other.id_;
      gameID_ = other.gameID_;
      accountID_ = other.accountID_;
      name_ = other.name_;
      jpType_ = other.jpType_;
      win_ = other.win_;
      createTime_ = other.createTime_ != null ? other.createTime_.Clone() : null;
      odds_ = other.odds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JiliJpOpen Clone() {
      return new JiliJpOpen(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "gameID" field.</summary>
    public const int GameIDFieldNumber = 2;
    private uint gameID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GameID {
      get { return gameID_; }
      set {
        gameID_ = value;
      }
    }

    /// <summary>Field number for the "accountID" field.</summary>
    public const int AccountIDFieldNumber = 3;
    private long accountID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AccountID {
      get { return accountID_; }
      set {
        accountID_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jpType" field.</summary>
    public const int JpTypeFieldNumber = 5;
    private int jpType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JpType {
      get { return jpType_; }
      set {
        jpType_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 6;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "createTime" field.</summary>
    public const int CreateTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateTime {
      get { return createTime_; }
      set {
        createTime_ = value;
      }
    }

    /// <summary>Field number for the "odds" field.</summary>
    public const int OddsFieldNumber = 8;
    private double odds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Odds {
      get { return odds_; }
      set {
        odds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JiliJpOpen);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JiliJpOpen other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (GameID != other.GameID) return false;
      if (AccountID != other.AccountID) return false;
      if (Name != other.Name) return false;
      if (JpType != other.JpType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      if (!object.Equals(CreateTime, other.CreateTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Odds, other.Odds)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (GameID != 0) hash ^= GameID.GetHashCode();
      if (AccountID != 0L) hash ^= AccountID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (JpType != 0) hash ^= JpType.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (createTime_ != null) hash ^= CreateTime.GetHashCode();
      if (Odds != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Odds);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (GameID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameID);
      }
      if (AccountID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AccountID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (JpType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(JpType);
      }
      if (Win != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Win);
      }
      if (createTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateTime);
      }
      if (Odds != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Odds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (GameID != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GameID);
      }
      if (AccountID != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AccountID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (JpType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(JpType);
      }
      if (Win != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Win);
      }
      if (createTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CreateTime);
      }
      if (Odds != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Odds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (GameID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GameID);
      }
      if (AccountID != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AccountID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (JpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JpType);
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (createTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateTime);
      }
      if (Odds != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JiliJpOpen other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.GameID != 0) {
        GameID = other.GameID;
      }
      if (other.AccountID != 0L) {
        AccountID = other.AccountID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.JpType != 0) {
        JpType = other.JpType;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      if (other.createTime_ != null) {
        if (createTime_ == null) {
          CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateTime.MergeFrom(other.CreateTime);
      }
      if (other.Odds != 0D) {
        Odds = other.Odds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            GameID = input.ReadUInt32();
            break;
          }
          case 24: {
            AccountID = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            JpType = input.ReadInt32();
            break;
          }
          case 49: {
            Win = input.ReadDouble();
            break;
          }
          case 58: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 65: {
            Odds = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            GameID = input.ReadUInt32();
            break;
          }
          case 24: {
            AccountID = input.ReadInt64();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            JpType = input.ReadInt32();
            break;
          }
          case 49: {
            Win = input.ReadDouble();
            break;
          }
          case 58: {
            if (createTime_ == null) {
              CreateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateTime);
            break;
          }
          case 65: {
            Odds = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
