// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Bfs2 {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhNKaWxpLlByb3RvY29scy5iZnMyIssBCgdTcGlu",
            "QWNrEjIKClJvdW5kUXVldWUYASADKAsyHi5KaWxpLlByb3RvY29scy5iZnMy",
            "LlJvdW5kSW5mbxIUCgxIaXRGR1gzWDVDb2wYAiADKAgSFAoMRnJlZVRvdGFs",
            "V2luGAMgASgBEhAKCFRvdGFsV2luGAQgASgBEhEKCVNob3dJbmRleBgFIAEo",
            "CRIQCghOb3dNb25leRgGIAEoARIPCgdBY2tUeXBlGAcgASgFEgsKA0JldBgI",
            "IAEoARILCgNSVFAYCSABKAEirwMKCVJvdW5kSW5mbxI2ChFQbGF0ZVN5bWJv",
            "bEV4dGVuZBgBIAMoCzIbLkppbGkuUHJvdG9jb2xzLmJmczIuQ29sdW1uEjQK",
            "DEF3YXJkRGF0YVZlYxgCIAMoCzIeLkppbGkuUHJvdG9jb2xzLmJmczIuQXdh",
            "cmREYXRhEhUKDUF3YXJkVHlwZUZsYWcYAyABKAUSFwoPRnJlZVJlbWFpblJv",
            "dW5kGAQgASgFEhQKDEZyZWVOb3dSb3VuZBgFIAEoBRIWCg5GcmVlVG90YWxS",
            "b3VuZBgGIAEoBRIQCghSb3VuZFdpbhgHIAEoARIUCgxDb2x1bW5MZW5ndGgY",
            "CCADKAUSEAoIQXJyb3dUYWcYCSADKAgSFAoMR29sZEFycm93VGFnGAogAygI",
            "EhMKC0hpdFN0YW1wQ29sGAsgASgFEhcKD1N0YW1wZWRlU3ltYm9scxgMIAMo",
            "BRIzCg5QbGF0ZVN5bWJvbExvZxgNIAMoCzIbLkppbGkuUHJvdG9jb2xzLmJm",
            "czIuQ29sdW1uEhIKCkxhc3RMZW5ndGgYDiADKAUSDwoHTWF4RmxhZxgPIAEo",
            "CCIVCgZDb2x1bW4SCwoDUm93GAEgAygFIlMKCUF3YXJkRGF0YRIOCgZTeW1i",
            "b2wYASABKAUSDQoFQ291bnQYAiABKAUSDAoETGluZRgDIAEoBRIMCgRNdWx0",
            "GAQgASgBEgsKA1dpbhgFIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bfs2.SpinAck), global::Jili.Protocols.Bfs2.SpinAck.Parser, new[]{ "RoundQueue", "HitFGX3X5Col", "FreeTotalWin", "TotalWin", "ShowIndex", "NowMoney", "AckType", "Bet", "RTP" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bfs2.RoundInfo), global::Jili.Protocols.Bfs2.RoundInfo.Parser, new[]{ "PlateSymbolExtend", "AwardDataVec", "AwardTypeFlag", "FreeRemainRound", "FreeNowRound", "FreeTotalRound", "RoundWin", "ColumnLength", "ArrowTag", "GoldArrowTag", "HitStampCol", "StampedeSymbols", "PlateSymbolLog", "LastLength", "MaxFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bfs2.Column), global::Jili.Protocols.Bfs2.Column.Parser, new[]{ "Row" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Bfs2.AwardData), global::Jili.Protocols.Bfs2.AwardData.Parser, new[]{ "Symbol", "Count", "Line", "Mult", "Win" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bfs2.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      roundQueue_ = other.roundQueue_.Clone();
      hitFGX3X5Col_ = other.hitFGX3X5Col_.Clone();
      freeTotalWin_ = other.freeTotalWin_;
      totalWin_ = other.totalWin_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      bet_ = other.bet_;
      rTP_ = other.rTP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "RoundQueue" field.</summary>
    public const int RoundQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Bfs2.RoundInfo> _repeated_roundQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Bfs2.RoundInfo.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Bfs2.RoundInfo> roundQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Bfs2.RoundInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Bfs2.RoundInfo> RoundQueue {
      get { return roundQueue_; }
    }

    /// <summary>Field number for the "HitFGX3X5Col" field.</summary>
    public const int HitFGX3X5ColFieldNumber = 2;
    private static readonly pb::FieldCodec<bool> _repeated_hitFGX3X5Col_codec
        = pb::FieldCodec.ForBool(18);
    private readonly pbc::RepeatedField<bool> hitFGX3X5Col_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<bool> HitFGX3X5Col {
      get { return hitFGX3X5Col_; }
    }

    /// <summary>Field number for the "FreeTotalWin" field.</summary>
    public const int FreeTotalWinFieldNumber = 3;
    private double freeTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeTotalWin {
      get { return freeTotalWin_; }
      set {
        freeTotalWin_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 4;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 5;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 6;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 7;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "Bet" field.</summary>
    public const int BetFieldNumber = 8;
    private double bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 9;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundQueue_.Equals(other.roundQueue_)) return false;
      if(!hitFGX3X5Col_.Equals(other.hitFGX3X5Col_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeTotalWin, other.FreeTotalWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bet, other.Bet)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundQueue_.GetHashCode();
      hash ^= hitFGX3X5Col_.GetHashCode();
      if (FreeTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeTotalWin);
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (Bet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bet);
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundQueue_.WriteTo(output, _repeated_roundQueue_codec);
      hitFGX3X5Col_.WriteTo(output, _repeated_hitFGX3X5Col_codec);
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FreeTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AckType);
      }
      if (Bet != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Bet);
      }
      if (RTP != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(RTP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundQueue_.WriteTo(ref output, _repeated_roundQueue_codec);
      hitFGX3X5Col_.WriteTo(ref output, _repeated_hitFGX3X5Col_codec);
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FreeTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AckType);
      }
      if (Bet != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Bet);
      }
      if (RTP != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(RTP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += roundQueue_.CalculateSize(_repeated_roundQueue_codec);
      size += hitFGX3X5Col_.CalculateSize(_repeated_hitFGX3X5Col_codec);
      if (FreeTotalWin != 0D) {
        size += 1 + 8;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (Bet != 0D) {
        size += 1 + 8;
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      roundQueue_.Add(other.roundQueue_);
      hitFGX3X5Col_.Add(other.hitFGX3X5Col_);
      if (other.FreeTotalWin != 0D) {
        FreeTotalWin = other.FreeTotalWin;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.Bet != 0D) {
        Bet = other.Bet;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(input, _repeated_roundQueue_codec);
            break;
          }
          case 18:
          case 16: {
            hitFGX3X5Col_.AddEntriesFrom(input, _repeated_hitFGX3X5Col_codec);
            break;
          }
          case 25: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 42: {
            ShowIndex = input.ReadString();
            break;
          }
          case 49: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 56: {
            AckType = input.ReadInt32();
            break;
          }
          case 65: {
            Bet = input.ReadDouble();
            break;
          }
          case 73: {
            RTP = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(ref input, _repeated_roundQueue_codec);
            break;
          }
          case 18:
          case 16: {
            hitFGX3X5Col_.AddEntriesFrom(ref input, _repeated_hitFGX3X5Col_codec);
            break;
          }
          case 25: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 42: {
            ShowIndex = input.ReadString();
            break;
          }
          case 49: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 56: {
            AckType = input.ReadInt32();
            break;
          }
          case 65: {
            Bet = input.ReadDouble();
            break;
          }
          case 73: {
            RTP = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RoundInfo : pb::IMessage<RoundInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundInfo> _parser = new pb::MessageParser<RoundInfo>(() => new RoundInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoundInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bfs2.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo(RoundInfo other) : this() {
      plateSymbolExtend_ = other.plateSymbolExtend_.Clone();
      awardDataVec_ = other.awardDataVec_.Clone();
      awardTypeFlag_ = other.awardTypeFlag_;
      freeRemainRound_ = other.freeRemainRound_;
      freeNowRound_ = other.freeNowRound_;
      freeTotalRound_ = other.freeTotalRound_;
      roundWin_ = other.roundWin_;
      columnLength_ = other.columnLength_.Clone();
      arrowTag_ = other.arrowTag_.Clone();
      goldArrowTag_ = other.goldArrowTag_.Clone();
      hitStampCol_ = other.hitStampCol_;
      stampedeSymbols_ = other.stampedeSymbols_.Clone();
      plateSymbolLog_ = other.plateSymbolLog_.Clone();
      lastLength_ = other.lastLength_.Clone();
      maxFlag_ = other.maxFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo Clone() {
      return new RoundInfo(this);
    }

    /// <summary>Field number for the "PlateSymbolExtend" field.</summary>
    public const int PlateSymbolExtendFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Bfs2.Column> _repeated_plateSymbolExtend_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Bfs2.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Bfs2.Column> plateSymbolExtend_ = new pbc::RepeatedField<global::Jili.Protocols.Bfs2.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Bfs2.Column> PlateSymbolExtend {
      get { return plateSymbolExtend_; }
    }

    /// <summary>Field number for the "AwardDataVec" field.</summary>
    public const int AwardDataVecFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Bfs2.AwardData> _repeated_awardDataVec_codec
        = pb::FieldCodec.ForMessage(18, global::Jili.Protocols.Bfs2.AwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Bfs2.AwardData> awardDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Bfs2.AwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Bfs2.AwardData> AwardDataVec {
      get { return awardDataVec_; }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 3;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "FreeRemainRound" field.</summary>
    public const int FreeRemainRoundFieldNumber = 4;
    private int freeRemainRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeRemainRound {
      get { return freeRemainRound_; }
      set {
        freeRemainRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeNowRound" field.</summary>
    public const int FreeNowRoundFieldNumber = 5;
    private int freeNowRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeNowRound {
      get { return freeNowRound_; }
      set {
        freeNowRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeTotalRound" field.</summary>
    public const int FreeTotalRoundFieldNumber = 6;
    private int freeTotalRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeTotalRound {
      get { return freeTotalRound_; }
      set {
        freeTotalRound_ = value;
      }
    }

    /// <summary>Field number for the "RoundWin" field.</summary>
    public const int RoundWinFieldNumber = 7;
    private double roundWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RoundWin {
      get { return roundWin_; }
      set {
        roundWin_ = value;
      }
    }

    /// <summary>Field number for the "ColumnLength" field.</summary>
    public const int ColumnLengthFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_columnLength_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> columnLength_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> ColumnLength {
      get { return columnLength_; }
    }

    /// <summary>Field number for the "ArrowTag" field.</summary>
    public const int ArrowTagFieldNumber = 9;
    private static readonly pb::FieldCodec<bool> _repeated_arrowTag_codec
        = pb::FieldCodec.ForBool(74);
    private readonly pbc::RepeatedField<bool> arrowTag_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<bool> ArrowTag {
      get { return arrowTag_; }
    }

    /// <summary>Field number for the "GoldArrowTag" field.</summary>
    public const int GoldArrowTagFieldNumber = 10;
    private static readonly pb::FieldCodec<bool> _repeated_goldArrowTag_codec
        = pb::FieldCodec.ForBool(82);
    private readonly pbc::RepeatedField<bool> goldArrowTag_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<bool> GoldArrowTag {
      get { return goldArrowTag_; }
    }

    /// <summary>Field number for the "HitStampCol" field.</summary>
    public const int HitStampColFieldNumber = 11;
    private int hitStampCol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitStampCol {
      get { return hitStampCol_; }
      set {
        hitStampCol_ = value;
      }
    }

    /// <summary>Field number for the "StampedeSymbols" field.</summary>
    public const int StampedeSymbolsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_stampedeSymbols_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> stampedeSymbols_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> StampedeSymbols {
      get { return stampedeSymbols_; }
    }

    /// <summary>Field number for the "PlateSymbolLog" field.</summary>
    public const int PlateSymbolLogFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Bfs2.Column> _repeated_plateSymbolLog_codec
        = pb::FieldCodec.ForMessage(106, global::Jili.Protocols.Bfs2.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Bfs2.Column> plateSymbolLog_ = new pbc::RepeatedField<global::Jili.Protocols.Bfs2.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Bfs2.Column> PlateSymbolLog {
      get { return plateSymbolLog_; }
    }

    /// <summary>Field number for the "LastLength" field.</summary>
    public const int LastLengthFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_lastLength_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> lastLength_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> LastLength {
      get { return lastLength_; }
    }

    /// <summary>Field number for the "MaxFlag" field.</summary>
    public const int MaxFlagFieldNumber = 15;
    private bool maxFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MaxFlag {
      get { return maxFlag_; }
      set {
        maxFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoundInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoundInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateSymbolExtend_.Equals(other.plateSymbolExtend_)) return false;
      if(!awardDataVec_.Equals(other.awardDataVec_)) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (FreeRemainRound != other.FreeRemainRound) return false;
      if (FreeNowRound != other.FreeNowRound) return false;
      if (FreeTotalRound != other.FreeTotalRound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RoundWin, other.RoundWin)) return false;
      if(!columnLength_.Equals(other.columnLength_)) return false;
      if(!arrowTag_.Equals(other.arrowTag_)) return false;
      if(!goldArrowTag_.Equals(other.goldArrowTag_)) return false;
      if (HitStampCol != other.HitStampCol) return false;
      if(!stampedeSymbols_.Equals(other.stampedeSymbols_)) return false;
      if(!plateSymbolLog_.Equals(other.plateSymbolLog_)) return false;
      if(!lastLength_.Equals(other.lastLength_)) return false;
      if (MaxFlag != other.MaxFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateSymbolExtend_.GetHashCode();
      hash ^= awardDataVec_.GetHashCode();
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (FreeRemainRound != 0) hash ^= FreeRemainRound.GetHashCode();
      if (FreeNowRound != 0) hash ^= FreeNowRound.GetHashCode();
      if (FreeTotalRound != 0) hash ^= FreeTotalRound.GetHashCode();
      if (RoundWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RoundWin);
      hash ^= columnLength_.GetHashCode();
      hash ^= arrowTag_.GetHashCode();
      hash ^= goldArrowTag_.GetHashCode();
      if (HitStampCol != 0) hash ^= HitStampCol.GetHashCode();
      hash ^= stampedeSymbols_.GetHashCode();
      hash ^= plateSymbolLog_.GetHashCode();
      hash ^= lastLength_.GetHashCode();
      if (MaxFlag != false) hash ^= MaxFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateSymbolExtend_.WriteTo(output, _repeated_plateSymbolExtend_codec);
      awardDataVec_.WriteTo(output, _repeated_awardDataVec_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AwardTypeFlag);
      }
      if (FreeRemainRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeRemainRound);
      }
      if (FreeNowRound != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeNowRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeTotalRound);
      }
      if (RoundWin != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(RoundWin);
      }
      columnLength_.WriteTo(output, _repeated_columnLength_codec);
      arrowTag_.WriteTo(output, _repeated_arrowTag_codec);
      goldArrowTag_.WriteTo(output, _repeated_goldArrowTag_codec);
      if (HitStampCol != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HitStampCol);
      }
      stampedeSymbols_.WriteTo(output, _repeated_stampedeSymbols_codec);
      plateSymbolLog_.WriteTo(output, _repeated_plateSymbolLog_codec);
      lastLength_.WriteTo(output, _repeated_lastLength_codec);
      if (MaxFlag != false) {
        output.WriteRawTag(120);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateSymbolExtend_.WriteTo(ref output, _repeated_plateSymbolExtend_codec);
      awardDataVec_.WriteTo(ref output, _repeated_awardDataVec_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AwardTypeFlag);
      }
      if (FreeRemainRound != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FreeRemainRound);
      }
      if (FreeNowRound != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FreeNowRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FreeTotalRound);
      }
      if (RoundWin != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(RoundWin);
      }
      columnLength_.WriteTo(ref output, _repeated_columnLength_codec);
      arrowTag_.WriteTo(ref output, _repeated_arrowTag_codec);
      goldArrowTag_.WriteTo(ref output, _repeated_goldArrowTag_codec);
      if (HitStampCol != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HitStampCol);
      }
      stampedeSymbols_.WriteTo(ref output, _repeated_stampedeSymbols_codec);
      plateSymbolLog_.WriteTo(ref output, _repeated_plateSymbolLog_codec);
      lastLength_.WriteTo(ref output, _repeated_lastLength_codec);
      if (MaxFlag != false) {
        output.WriteRawTag(120);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateSymbolExtend_.CalculateSize(_repeated_plateSymbolExtend_codec);
      size += awardDataVec_.CalculateSize(_repeated_awardDataVec_codec);
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (FreeRemainRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeRemainRound);
      }
      if (FreeNowRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeNowRound);
      }
      if (FreeTotalRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTotalRound);
      }
      if (RoundWin != 0D) {
        size += 1 + 8;
      }
      size += columnLength_.CalculateSize(_repeated_columnLength_codec);
      size += arrowTag_.CalculateSize(_repeated_arrowTag_codec);
      size += goldArrowTag_.CalculateSize(_repeated_goldArrowTag_codec);
      if (HitStampCol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitStampCol);
      }
      size += stampedeSymbols_.CalculateSize(_repeated_stampedeSymbols_codec);
      size += plateSymbolLog_.CalculateSize(_repeated_plateSymbolLog_codec);
      size += lastLength_.CalculateSize(_repeated_lastLength_codec);
      if (MaxFlag != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoundInfo other) {
      if (other == null) {
        return;
      }
      plateSymbolExtend_.Add(other.plateSymbolExtend_);
      awardDataVec_.Add(other.awardDataVec_);
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.FreeRemainRound != 0) {
        FreeRemainRound = other.FreeRemainRound;
      }
      if (other.FreeNowRound != 0) {
        FreeNowRound = other.FreeNowRound;
      }
      if (other.FreeTotalRound != 0) {
        FreeTotalRound = other.FreeTotalRound;
      }
      if (other.RoundWin != 0D) {
        RoundWin = other.RoundWin;
      }
      columnLength_.Add(other.columnLength_);
      arrowTag_.Add(other.arrowTag_);
      goldArrowTag_.Add(other.goldArrowTag_);
      if (other.HitStampCol != 0) {
        HitStampCol = other.HitStampCol;
      }
      stampedeSymbols_.Add(other.stampedeSymbols_);
      plateSymbolLog_.Add(other.plateSymbolLog_);
      lastLength_.Add(other.lastLength_);
      if (other.MaxFlag != false) {
        MaxFlag = other.MaxFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateSymbolExtend_.AddEntriesFrom(input, _repeated_plateSymbolExtend_codec);
            break;
          }
          case 18: {
            awardDataVec_.AddEntriesFrom(input, _repeated_awardDataVec_codec);
            break;
          }
          case 24: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 32: {
            FreeRemainRound = input.ReadInt32();
            break;
          }
          case 40: {
            FreeNowRound = input.ReadInt32();
            break;
          }
          case 48: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
          case 57: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 66:
          case 64: {
            columnLength_.AddEntriesFrom(input, _repeated_columnLength_codec);
            break;
          }
          case 74:
          case 72: {
            arrowTag_.AddEntriesFrom(input, _repeated_arrowTag_codec);
            break;
          }
          case 82:
          case 80: {
            goldArrowTag_.AddEntriesFrom(input, _repeated_goldArrowTag_codec);
            break;
          }
          case 88: {
            HitStampCol = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            stampedeSymbols_.AddEntriesFrom(input, _repeated_stampedeSymbols_codec);
            break;
          }
          case 106: {
            plateSymbolLog_.AddEntriesFrom(input, _repeated_plateSymbolLog_codec);
            break;
          }
          case 114:
          case 112: {
            lastLength_.AddEntriesFrom(input, _repeated_lastLength_codec);
            break;
          }
          case 120: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateSymbolExtend_.AddEntriesFrom(ref input, _repeated_plateSymbolExtend_codec);
            break;
          }
          case 18: {
            awardDataVec_.AddEntriesFrom(ref input, _repeated_awardDataVec_codec);
            break;
          }
          case 24: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 32: {
            FreeRemainRound = input.ReadInt32();
            break;
          }
          case 40: {
            FreeNowRound = input.ReadInt32();
            break;
          }
          case 48: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
          case 57: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 66:
          case 64: {
            columnLength_.AddEntriesFrom(ref input, _repeated_columnLength_codec);
            break;
          }
          case 74:
          case 72: {
            arrowTag_.AddEntriesFrom(ref input, _repeated_arrowTag_codec);
            break;
          }
          case 82:
          case 80: {
            goldArrowTag_.AddEntriesFrom(ref input, _repeated_goldArrowTag_codec);
            break;
          }
          case 88: {
            HitStampCol = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            stampedeSymbols_.AddEntriesFrom(ref input, _repeated_stampedeSymbols_codec);
            break;
          }
          case 106: {
            plateSymbolLog_.AddEntriesFrom(ref input, _repeated_plateSymbolLog_codec);
            break;
          }
          case 114:
          case 112: {
            lastLength_.AddEntriesFrom(ref input, _repeated_lastLength_codec);
            break;
          }
          case 120: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bfs2.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      row_ = other.row_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Row" field.</summary>
    public const int RowFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_row_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> row_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Row {
      get { return row_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!row_.Equals(other.row_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= row_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      row_.WriteTo(output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      row_.WriteTo(ref output, _repeated_row_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += row_.CalculateSize(_repeated_row_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      row_.Add(other.row_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(input, _repeated_row_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            row_.AddEntriesFrom(ref input, _repeated_row_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardData : pb::IMessage<AwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardData> _parser = new pb::MessageParser<AwardData>(() => new AwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Bfs2.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData(AwardData other) : this() {
      symbol_ = other.symbol_;
      count_ = other.count_;
      line_ = other.line_;
      mult_ = other.mult_;
      win_ = other.win_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData Clone() {
      return new AwardData(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private int symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Line" field.</summary>
    public const int LineFieldNumber = 3;
    private int line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "Mult" field.</summary>
    public const int MultFieldNumber = 4;
    private double mult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Mult {
      get { return mult_; }
      set {
        mult_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 5;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Count != other.Count) return false;
      if (Line != other.Line) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mult, other.Mult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol != 0) hash ^= Symbol.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      if (Mult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mult);
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Line != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Line);
      }
      if (Mult != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Mult);
      }
      if (Win != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Line != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Line);
      }
      if (Mult != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Mult);
      }
      if (Win != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Symbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Symbol);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      if (Mult != 0D) {
        size += 1 + 8;
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardData other) {
      if (other == null) {
        return;
      }
      if (other.Symbol != 0) {
        Symbol = other.Symbol;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.Mult != 0D) {
        Mult = other.Mult;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Line = input.ReadInt32();
            break;
          }
          case 33: {
            Mult = input.ReadDouble();
            break;
          }
          case 41: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Line = input.ReadInt32();
            break;
          }
          case 33: {
            Mult = input.ReadDouble();
            break;
          }
          case 41: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
