// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Tcb {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhJKaWxpLlByb3RvY29scy5UY2IipQEKB1NwaW5B",
            "Y2sSMQoKUm91bmRRdWV1ZRgBIAMoCzIdLkppbGkuUHJvdG9jb2xzLlRjYi5S",
            "b3VuZEluZm8SCwoDQmV0GAIgASgBEhQKDEZyZWVUb3RhbFdpbhgDIAEoARIQ",
            "CghUb3RhbFdpbhgEIAEoARILCgNSVFAYBSABKAESEAoIR2FtZVR5cGUYBiAB",
            "KAUSEwoLQ3JhY2tMZXZlbHMYByADKAUi1QMKCVJvdW5kSW5mbxI4CgtQbGF0",
            "ZVN5bWJvbBgBIAMoCzIjLkppbGkuUHJvdG9jb2xzLlRjYi5QbGF0ZVN5bWJv",
            "bERhdGESMgoIUGxhdGVOdW0YAiADKAsyIC5KaWxpLlByb3RvY29scy5UY2Iu",
            "UGxhdGVOdW1EYXRhEjoKDEF3YXJkRGF0YVZlYxgDIAMoCzIkLkppbGkuUHJv",
            "dG9jb2xzLlRjYi5Bd2FyZERhdGFWZWNEYXRhEhEKCUNvbGxlY3RlZBgEIAEo",
            "BRIRCglHb2xkTGV2ZWwYBSABKAUSKwoHR29sZFBvcxgGIAMoCzIaLkppbGku",
            "UHJvdG9jb2xzLlRjYi5Db2x1bW4SEgoKQ29sbGVjdFdpbhgHIAMoARIPCgdM",
            "aW5lV2luGAggAygBEhcKD0ZyZWVSZW1haW5Sb3VuZBgJIAEoBRIWCg5GcmVl",
            "VG90YWxSb3VuZBgKIAEoBRIUCgxGcmVlTm93Um91bmQYCyABKAUSEQoJQWRk",
            "Um91bmRzGAwgASgFEhUKDUF3YXJkVHlwZUZsYWcYDSABKAUSEAoIUm91bmRX",
            "aW4YDiABKAESEgoKQWRkQ3JhY2tMdhgPIAMoBRIPCgdNYXhGbGFnGBAgASgI",
            "IjoKD1BsYXRlU3ltYm9sRGF0YRInCgNQU0QYASADKAsyGi5KaWxpLlByb3Rv",
            "Y29scy5UY2IuQ29sdW1uIjwKDFBsYXRlTnVtRGF0YRIsCgNQTkQYAiADKAsy",
            "Hy5KaWxpLlByb3RvY29scy5UY2IuQ29sdW1uRmxvYXQiFQoGQ29sdW1uEgsK",
            "A0NvbBgBIAMoBSIaCgtDb2x1bW5GbG9hdBILCgNDb2wYASADKAEiPgoQQXdh",
            "cmREYXRhVmVjRGF0YRIqCgNBRFYYASADKAsyHS5KaWxpLlByb3RvY29scy5U",
            "Y2IuQXdhcmREYXRhIlMKCUF3YXJkRGF0YRIOCgZTeW1ib2wYASABKAUSDQoF",
            "Q291bnQYAiABKAUSDAoETGluZRgDIAEoBRIMCgRNdWx0GAQgASgBEgsKA1dp",
            "bhgFIAEoAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tcb.SpinAck), global::Jili.Protocols.Tcb.SpinAck.Parser, new[]{ "RoundQueue", "Bet", "FreeTotalWin", "TotalWin", "RTP", "GameType", "CrackLevels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tcb.RoundInfo), global::Jili.Protocols.Tcb.RoundInfo.Parser, new[]{ "PlateSymbol", "PlateNum", "AwardDataVec", "Collected", "GoldLevel", "GoldPos", "CollectWin", "LineWin", "FreeRemainRound", "FreeTotalRound", "FreeNowRound", "AddRounds", "AwardTypeFlag", "RoundWin", "AddCrackLv", "MaxFlag" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tcb.PlateSymbolData), global::Jili.Protocols.Tcb.PlateSymbolData.Parser, new[]{ "PSD" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tcb.PlateNumData), global::Jili.Protocols.Tcb.PlateNumData.Parser, new[]{ "PND" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tcb.Column), global::Jili.Protocols.Tcb.Column.Parser, new[]{ "Col" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tcb.ColumnFloat), global::Jili.Protocols.Tcb.ColumnFloat.Parser, new[]{ "Col" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tcb.AwardDataVecData), global::Jili.Protocols.Tcb.AwardDataVecData.Parser, new[]{ "ADV" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Tcb.AwardData), global::Jili.Protocols.Tcb.AwardData.Parser, new[]{ "Symbol", "Count", "Line", "Mult", "Win" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tcb.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      roundQueue_ = other.roundQueue_.Clone();
      bet_ = other.bet_;
      freeTotalWin_ = other.freeTotalWin_;
      totalWin_ = other.totalWin_;
      rTP_ = other.rTP_;
      gameType_ = other.gameType_;
      crackLevels_ = other.crackLevels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "RoundQueue" field.</summary>
    public const int RoundQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tcb.RoundInfo> _repeated_roundQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Tcb.RoundInfo.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tcb.RoundInfo> roundQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Tcb.RoundInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tcb.RoundInfo> RoundQueue {
      get { return roundQueue_; }
    }

    /// <summary>Field number for the "Bet" field.</summary>
    public const int BetFieldNumber = 2;
    private double bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "FreeTotalWin" field.</summary>
    public const int FreeTotalWinFieldNumber = 3;
    private double freeTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeTotalWin {
      get { return freeTotalWin_; }
      set {
        freeTotalWin_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 4;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 5;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 6;
    private int gameType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    /// <summary>Field number for the "CrackLevels" field.</summary>
    public const int CrackLevelsFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_crackLevels_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> crackLevels_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> CrackLevels {
      get { return crackLevels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundQueue_.Equals(other.roundQueue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bet, other.Bet)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeTotalWin, other.FreeTotalWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (GameType != other.GameType) return false;
      if(!crackLevels_.Equals(other.crackLevels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundQueue_.GetHashCode();
      if (Bet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bet);
      if (FreeTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeTotalWin);
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (GameType != 0) hash ^= GameType.GetHashCode();
      hash ^= crackLevels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundQueue_.WriteTo(output, _repeated_roundQueue_codec);
      if (Bet != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Bet);
      }
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FreeTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (RTP != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RTP);
      }
      if (GameType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GameType);
      }
      crackLevels_.WriteTo(output, _repeated_crackLevels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundQueue_.WriteTo(ref output, _repeated_roundQueue_codec);
      if (Bet != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Bet);
      }
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(FreeTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(TotalWin);
      }
      if (RTP != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(RTP);
      }
      if (GameType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(GameType);
      }
      crackLevels_.WriteTo(ref output, _repeated_crackLevels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += roundQueue_.CalculateSize(_repeated_roundQueue_codec);
      if (Bet != 0D) {
        size += 1 + 8;
      }
      if (FreeTotalWin != 0D) {
        size += 1 + 8;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (GameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      size += crackLevels_.CalculateSize(_repeated_crackLevels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      roundQueue_.Add(other.roundQueue_);
      if (other.Bet != 0D) {
        Bet = other.Bet;
      }
      if (other.FreeTotalWin != 0D) {
        FreeTotalWin = other.FreeTotalWin;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.GameType != 0) {
        GameType = other.GameType;
      }
      crackLevels_.Add(other.crackLevels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(input, _repeated_roundQueue_codec);
            break;
          }
          case 17: {
            Bet = input.ReadDouble();
            break;
          }
          case 25: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 41: {
            RTP = input.ReadDouble();
            break;
          }
          case 48: {
            GameType = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            crackLevels_.AddEntriesFrom(input, _repeated_crackLevels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(ref input, _repeated_roundQueue_codec);
            break;
          }
          case 17: {
            Bet = input.ReadDouble();
            break;
          }
          case 25: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
          case 33: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 41: {
            RTP = input.ReadDouble();
            break;
          }
          case 48: {
            GameType = input.ReadInt32();
            break;
          }
          case 58:
          case 56: {
            crackLevels_.AddEntriesFrom(ref input, _repeated_crackLevels_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RoundInfo : pb::IMessage<RoundInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundInfo> _parser = new pb::MessageParser<RoundInfo>(() => new RoundInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoundInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tcb.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo(RoundInfo other) : this() {
      plateSymbol_ = other.plateSymbol_.Clone();
      plateNum_ = other.plateNum_.Clone();
      awardDataVec_ = other.awardDataVec_.Clone();
      collected_ = other.collected_;
      goldLevel_ = other.goldLevel_;
      goldPos_ = other.goldPos_.Clone();
      collectWin_ = other.collectWin_.Clone();
      lineWin_ = other.lineWin_.Clone();
      freeRemainRound_ = other.freeRemainRound_;
      freeTotalRound_ = other.freeTotalRound_;
      freeNowRound_ = other.freeNowRound_;
      addRounds_ = other.addRounds_;
      awardTypeFlag_ = other.awardTypeFlag_;
      roundWin_ = other.roundWin_;
      addCrackLv_ = other.addCrackLv_.Clone();
      maxFlag_ = other.maxFlag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo Clone() {
      return new RoundInfo(this);
    }

    /// <summary>Field number for the "PlateSymbol" field.</summary>
    public const int PlateSymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tcb.PlateSymbolData> _repeated_plateSymbol_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Tcb.PlateSymbolData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tcb.PlateSymbolData> plateSymbol_ = new pbc::RepeatedField<global::Jili.Protocols.Tcb.PlateSymbolData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tcb.PlateSymbolData> PlateSymbol {
      get { return plateSymbol_; }
    }

    /// <summary>Field number for the "PlateNum" field.</summary>
    public const int PlateNumFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tcb.PlateNumData> _repeated_plateNum_codec
        = pb::FieldCodec.ForMessage(18, global::Jili.Protocols.Tcb.PlateNumData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tcb.PlateNumData> plateNum_ = new pbc::RepeatedField<global::Jili.Protocols.Tcb.PlateNumData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tcb.PlateNumData> PlateNum {
      get { return plateNum_; }
    }

    /// <summary>Field number for the "AwardDataVec" field.</summary>
    public const int AwardDataVecFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tcb.AwardDataVecData> _repeated_awardDataVec_codec
        = pb::FieldCodec.ForMessage(26, global::Jili.Protocols.Tcb.AwardDataVecData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tcb.AwardDataVecData> awardDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Tcb.AwardDataVecData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tcb.AwardDataVecData> AwardDataVec {
      get { return awardDataVec_; }
    }

    /// <summary>Field number for the "Collected" field.</summary>
    public const int CollectedFieldNumber = 4;
    private int collected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Collected {
      get { return collected_; }
      set {
        collected_ = value;
      }
    }

    /// <summary>Field number for the "GoldLevel" field.</summary>
    public const int GoldLevelFieldNumber = 5;
    private int goldLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GoldLevel {
      get { return goldLevel_; }
      set {
        goldLevel_ = value;
      }
    }

    /// <summary>Field number for the "GoldPos" field.</summary>
    public const int GoldPosFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tcb.Column> _repeated_goldPos_codec
        = pb::FieldCodec.ForMessage(50, global::Jili.Protocols.Tcb.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tcb.Column> goldPos_ = new pbc::RepeatedField<global::Jili.Protocols.Tcb.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tcb.Column> GoldPos {
      get { return goldPos_; }
    }

    /// <summary>Field number for the "CollectWin" field.</summary>
    public const int CollectWinFieldNumber = 7;
    private static readonly pb::FieldCodec<double> _repeated_collectWin_codec
        = pb::FieldCodec.ForDouble(58);
    private readonly pbc::RepeatedField<double> collectWin_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> CollectWin {
      get { return collectWin_; }
    }

    /// <summary>Field number for the "LineWin" field.</summary>
    public const int LineWinFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_lineWin_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> lineWin_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> LineWin {
      get { return lineWin_; }
    }

    /// <summary>Field number for the "FreeRemainRound" field.</summary>
    public const int FreeRemainRoundFieldNumber = 9;
    private int freeRemainRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeRemainRound {
      get { return freeRemainRound_; }
      set {
        freeRemainRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeTotalRound" field.</summary>
    public const int FreeTotalRoundFieldNumber = 10;
    private int freeTotalRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeTotalRound {
      get { return freeTotalRound_; }
      set {
        freeTotalRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeNowRound" field.</summary>
    public const int FreeNowRoundFieldNumber = 11;
    private int freeNowRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeNowRound {
      get { return freeNowRound_; }
      set {
        freeNowRound_ = value;
      }
    }

    /// <summary>Field number for the "AddRounds" field.</summary>
    public const int AddRoundsFieldNumber = 12;
    private int addRounds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddRounds {
      get { return addRounds_; }
      set {
        addRounds_ = value;
      }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 13;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "RoundWin" field.</summary>
    public const int RoundWinFieldNumber = 14;
    private double roundWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RoundWin {
      get { return roundWin_; }
      set {
        roundWin_ = value;
      }
    }

    /// <summary>Field number for the "AddCrackLv" field.</summary>
    public const int AddCrackLvFieldNumber = 15;
    private static readonly pb::FieldCodec<int> _repeated_addCrackLv_codec
        = pb::FieldCodec.ForInt32(122);
    private readonly pbc::RepeatedField<int> addCrackLv_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> AddCrackLv {
      get { return addCrackLv_; }
    }

    /// <summary>Field number for the "MaxFlag" field.</summary>
    public const int MaxFlagFieldNumber = 16;
    private bool maxFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MaxFlag {
      get { return maxFlag_; }
      set {
        maxFlag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoundInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoundInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateSymbol_.Equals(other.plateSymbol_)) return false;
      if(!plateNum_.Equals(other.plateNum_)) return false;
      if(!awardDataVec_.Equals(other.awardDataVec_)) return false;
      if (Collected != other.Collected) return false;
      if (GoldLevel != other.GoldLevel) return false;
      if(!goldPos_.Equals(other.goldPos_)) return false;
      if(!collectWin_.Equals(other.collectWin_)) return false;
      if(!lineWin_.Equals(other.lineWin_)) return false;
      if (FreeRemainRound != other.FreeRemainRound) return false;
      if (FreeTotalRound != other.FreeTotalRound) return false;
      if (FreeNowRound != other.FreeNowRound) return false;
      if (AddRounds != other.AddRounds) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RoundWin, other.RoundWin)) return false;
      if(!addCrackLv_.Equals(other.addCrackLv_)) return false;
      if (MaxFlag != other.MaxFlag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateSymbol_.GetHashCode();
      hash ^= plateNum_.GetHashCode();
      hash ^= awardDataVec_.GetHashCode();
      if (Collected != 0) hash ^= Collected.GetHashCode();
      if (GoldLevel != 0) hash ^= GoldLevel.GetHashCode();
      hash ^= goldPos_.GetHashCode();
      hash ^= collectWin_.GetHashCode();
      hash ^= lineWin_.GetHashCode();
      if (FreeRemainRound != 0) hash ^= FreeRemainRound.GetHashCode();
      if (FreeTotalRound != 0) hash ^= FreeTotalRound.GetHashCode();
      if (FreeNowRound != 0) hash ^= FreeNowRound.GetHashCode();
      if (AddRounds != 0) hash ^= AddRounds.GetHashCode();
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (RoundWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RoundWin);
      hash ^= addCrackLv_.GetHashCode();
      if (MaxFlag != false) hash ^= MaxFlag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateSymbol_.WriteTo(output, _repeated_plateSymbol_codec);
      plateNum_.WriteTo(output, _repeated_plateNum_codec);
      awardDataVec_.WriteTo(output, _repeated_awardDataVec_codec);
      if (Collected != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Collected);
      }
      if (GoldLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GoldLevel);
      }
      goldPos_.WriteTo(output, _repeated_goldPos_codec);
      collectWin_.WriteTo(output, _repeated_collectWin_codec);
      lineWin_.WriteTo(output, _repeated_lineWin_codec);
      if (FreeRemainRound != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FreeRemainRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FreeTotalRound);
      }
      if (FreeNowRound != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FreeNowRound);
      }
      if (AddRounds != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AddRounds);
      }
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AwardTypeFlag);
      }
      if (RoundWin != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(RoundWin);
      }
      addCrackLv_.WriteTo(output, _repeated_addCrackLv_codec);
      if (MaxFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateSymbol_.WriteTo(ref output, _repeated_plateSymbol_codec);
      plateNum_.WriteTo(ref output, _repeated_plateNum_codec);
      awardDataVec_.WriteTo(ref output, _repeated_awardDataVec_codec);
      if (Collected != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Collected);
      }
      if (GoldLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GoldLevel);
      }
      goldPos_.WriteTo(ref output, _repeated_goldPos_codec);
      collectWin_.WriteTo(ref output, _repeated_collectWin_codec);
      lineWin_.WriteTo(ref output, _repeated_lineWin_codec);
      if (FreeRemainRound != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FreeRemainRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FreeTotalRound);
      }
      if (FreeNowRound != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FreeNowRound);
      }
      if (AddRounds != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(AddRounds);
      }
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AwardTypeFlag);
      }
      if (RoundWin != 0D) {
        output.WriteRawTag(113);
        output.WriteDouble(RoundWin);
      }
      addCrackLv_.WriteTo(ref output, _repeated_addCrackLv_codec);
      if (MaxFlag != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(MaxFlag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateSymbol_.CalculateSize(_repeated_plateSymbol_codec);
      size += plateNum_.CalculateSize(_repeated_plateNum_codec);
      size += awardDataVec_.CalculateSize(_repeated_awardDataVec_codec);
      if (Collected != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Collected);
      }
      if (GoldLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldLevel);
      }
      size += goldPos_.CalculateSize(_repeated_goldPos_codec);
      size += collectWin_.CalculateSize(_repeated_collectWin_codec);
      size += lineWin_.CalculateSize(_repeated_lineWin_codec);
      if (FreeRemainRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeRemainRound);
      }
      if (FreeTotalRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTotalRound);
      }
      if (FreeNowRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeNowRound);
      }
      if (AddRounds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddRounds);
      }
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (RoundWin != 0D) {
        size += 1 + 8;
      }
      size += addCrackLv_.CalculateSize(_repeated_addCrackLv_codec);
      if (MaxFlag != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoundInfo other) {
      if (other == null) {
        return;
      }
      plateSymbol_.Add(other.plateSymbol_);
      plateNum_.Add(other.plateNum_);
      awardDataVec_.Add(other.awardDataVec_);
      if (other.Collected != 0) {
        Collected = other.Collected;
      }
      if (other.GoldLevel != 0) {
        GoldLevel = other.GoldLevel;
      }
      goldPos_.Add(other.goldPos_);
      collectWin_.Add(other.collectWin_);
      lineWin_.Add(other.lineWin_);
      if (other.FreeRemainRound != 0) {
        FreeRemainRound = other.FreeRemainRound;
      }
      if (other.FreeTotalRound != 0) {
        FreeTotalRound = other.FreeTotalRound;
      }
      if (other.FreeNowRound != 0) {
        FreeNowRound = other.FreeNowRound;
      }
      if (other.AddRounds != 0) {
        AddRounds = other.AddRounds;
      }
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.RoundWin != 0D) {
        RoundWin = other.RoundWin;
      }
      addCrackLv_.Add(other.addCrackLv_);
      if (other.MaxFlag != false) {
        MaxFlag = other.MaxFlag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(input, _repeated_plateSymbol_codec);
            break;
          }
          case 18: {
            plateNum_.AddEntriesFrom(input, _repeated_plateNum_codec);
            break;
          }
          case 26: {
            awardDataVec_.AddEntriesFrom(input, _repeated_awardDataVec_codec);
            break;
          }
          case 32: {
            Collected = input.ReadInt32();
            break;
          }
          case 40: {
            GoldLevel = input.ReadInt32();
            break;
          }
          case 50: {
            goldPos_.AddEntriesFrom(input, _repeated_goldPos_codec);
            break;
          }
          case 58:
          case 57: {
            collectWin_.AddEntriesFrom(input, _repeated_collectWin_codec);
            break;
          }
          case 66:
          case 65: {
            lineWin_.AddEntriesFrom(input, _repeated_lineWin_codec);
            break;
          }
          case 72: {
            FreeRemainRound = input.ReadInt32();
            break;
          }
          case 80: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
          case 88: {
            FreeNowRound = input.ReadInt32();
            break;
          }
          case 96: {
            AddRounds = input.ReadInt32();
            break;
          }
          case 104: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 113: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 122:
          case 120: {
            addCrackLv_.AddEntriesFrom(input, _repeated_addCrackLv_codec);
            break;
          }
          case 128: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(ref input, _repeated_plateSymbol_codec);
            break;
          }
          case 18: {
            plateNum_.AddEntriesFrom(ref input, _repeated_plateNum_codec);
            break;
          }
          case 26: {
            awardDataVec_.AddEntriesFrom(ref input, _repeated_awardDataVec_codec);
            break;
          }
          case 32: {
            Collected = input.ReadInt32();
            break;
          }
          case 40: {
            GoldLevel = input.ReadInt32();
            break;
          }
          case 50: {
            goldPos_.AddEntriesFrom(ref input, _repeated_goldPos_codec);
            break;
          }
          case 58:
          case 57: {
            collectWin_.AddEntriesFrom(ref input, _repeated_collectWin_codec);
            break;
          }
          case 66:
          case 65: {
            lineWin_.AddEntriesFrom(ref input, _repeated_lineWin_codec);
            break;
          }
          case 72: {
            FreeRemainRound = input.ReadInt32();
            break;
          }
          case 80: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
          case 88: {
            FreeNowRound = input.ReadInt32();
            break;
          }
          case 96: {
            AddRounds = input.ReadInt32();
            break;
          }
          case 104: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 113: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 122:
          case 120: {
            addCrackLv_.AddEntriesFrom(ref input, _repeated_addCrackLv_codec);
            break;
          }
          case 128: {
            MaxFlag = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlateSymbolData : pb::IMessage<PlateSymbolData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlateSymbolData> _parser = new pb::MessageParser<PlateSymbolData>(() => new PlateSymbolData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlateSymbolData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tcb.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateSymbolData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateSymbolData(PlateSymbolData other) : this() {
      pSD_ = other.pSD_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateSymbolData Clone() {
      return new PlateSymbolData(this);
    }

    /// <summary>Field number for the "PSD" field.</summary>
    public const int PSDFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tcb.Column> _repeated_pSD_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Tcb.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tcb.Column> pSD_ = new pbc::RepeatedField<global::Jili.Protocols.Tcb.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tcb.Column> PSD {
      get { return pSD_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlateSymbolData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlateSymbolData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pSD_.Equals(other.pSD_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pSD_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pSD_.WriteTo(output, _repeated_pSD_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pSD_.WriteTo(ref output, _repeated_pSD_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += pSD_.CalculateSize(_repeated_pSD_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlateSymbolData other) {
      if (other == null) {
        return;
      }
      pSD_.Add(other.pSD_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            pSD_.AddEntriesFrom(input, _repeated_pSD_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            pSD_.AddEntriesFrom(ref input, _repeated_pSD_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlateNumData : pb::IMessage<PlateNumData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlateNumData> _parser = new pb::MessageParser<PlateNumData>(() => new PlateNumData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlateNumData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tcb.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateNumData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateNumData(PlateNumData other) : this() {
      pND_ = other.pND_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateNumData Clone() {
      return new PlateNumData(this);
    }

    /// <summary>Field number for the "PND" field.</summary>
    public const int PNDFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tcb.ColumnFloat> _repeated_pND_codec
        = pb::FieldCodec.ForMessage(18, global::Jili.Protocols.Tcb.ColumnFloat.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tcb.ColumnFloat> pND_ = new pbc::RepeatedField<global::Jili.Protocols.Tcb.ColumnFloat>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tcb.ColumnFloat> PND {
      get { return pND_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlateNumData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlateNumData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pND_.Equals(other.pND_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pND_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      pND_.WriteTo(output, _repeated_pND_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      pND_.WriteTo(ref output, _repeated_pND_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += pND_.CalculateSize(_repeated_pND_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlateNumData other) {
      if (other == null) {
        return;
      }
      pND_.Add(other.pND_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            pND_.AddEntriesFrom(input, _repeated_pND_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            pND_.AddEntriesFrom(ref input, _repeated_pND_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tcb.SpinAckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      col_ = other.col_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Col" field.</summary>
    public const int ColFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_col_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> col_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Col {
      get { return col_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!col_.Equals(other.col_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= col_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      col_.WriteTo(output, _repeated_col_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      col_.WriteTo(ref output, _repeated_col_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += col_.CalculateSize(_repeated_col_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      col_.Add(other.col_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            col_.AddEntriesFrom(input, _repeated_col_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            col_.AddEntriesFrom(ref input, _repeated_col_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ColumnFloat : pb::IMessage<ColumnFloat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColumnFloat> _parser = new pb::MessageParser<ColumnFloat>(() => new ColumnFloat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColumnFloat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tcb.SpinAckReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColumnFloat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColumnFloat(ColumnFloat other) : this() {
      col_ = other.col_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColumnFloat Clone() {
      return new ColumnFloat(this);
    }

    /// <summary>Field number for the "Col" field.</summary>
    public const int ColFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_col_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> col_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Col {
      get { return col_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColumnFloat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColumnFloat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!col_.Equals(other.col_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= col_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      col_.WriteTo(output, _repeated_col_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      col_.WriteTo(ref output, _repeated_col_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += col_.CalculateSize(_repeated_col_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColumnFloat other) {
      if (other == null) {
        return;
      }
      col_.Add(other.col_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            col_.AddEntriesFrom(input, _repeated_col_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 9: {
            col_.AddEntriesFrom(ref input, _repeated_col_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardDataVecData : pb::IMessage<AwardDataVecData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardDataVecData> _parser = new pb::MessageParser<AwardDataVecData>(() => new AwardDataVecData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardDataVecData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tcb.SpinAckReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardDataVecData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardDataVecData(AwardDataVecData other) : this() {
      aDV_ = other.aDV_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardDataVecData Clone() {
      return new AwardDataVecData(this);
    }

    /// <summary>Field number for the "ADV" field.</summary>
    public const int ADVFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Tcb.AwardData> _repeated_aDV_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Tcb.AwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Tcb.AwardData> aDV_ = new pbc::RepeatedField<global::Jili.Protocols.Tcb.AwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Tcb.AwardData> ADV {
      get { return aDV_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardDataVecData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardDataVecData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!aDV_.Equals(other.aDV_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= aDV_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      aDV_.WriteTo(output, _repeated_aDV_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      aDV_.WriteTo(ref output, _repeated_aDV_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += aDV_.CalculateSize(_repeated_aDV_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardDataVecData other) {
      if (other == null) {
        return;
      }
      aDV_.Add(other.aDV_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            aDV_.AddEntriesFrom(input, _repeated_aDV_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            aDV_.AddEntriesFrom(ref input, _repeated_aDV_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardData : pb::IMessage<AwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardData> _parser = new pb::MessageParser<AwardData>(() => new AwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Tcb.SpinAckReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData(AwardData other) : this() {
      symbol_ = other.symbol_;
      count_ = other.count_;
      line_ = other.line_;
      mult_ = other.mult_;
      win_ = other.win_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData Clone() {
      return new AwardData(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private int symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Line" field.</summary>
    public const int LineFieldNumber = 3;
    private int line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "Mult" field.</summary>
    public const int MultFieldNumber = 4;
    private double mult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Mult {
      get { return mult_; }
      set {
        mult_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 5;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Count != other.Count) return false;
      if (Line != other.Line) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Mult, other.Mult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol != 0) hash ^= Symbol.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      if (Mult != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Mult);
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Line != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Line);
      }
      if (Mult != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Mult);
      }
      if (Win != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (Line != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Line);
      }
      if (Mult != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Mult);
      }
      if (Win != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Symbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Symbol);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      if (Mult != 0D) {
        size += 1 + 8;
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardData other) {
      if (other == null) {
        return;
      }
      if (other.Symbol != 0) {
        Symbol = other.Symbol;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.Mult != 0D) {
        Mult = other.Mult;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Line = input.ReadInt32();
            break;
          }
          case 33: {
            Mult = input.ReadDouble();
            break;
          }
          case 41: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            Line = input.ReadInt32();
            break;
          }
          case 33: {
            Mult = input.ReadDouble();
            break;
          }
          case 41: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
