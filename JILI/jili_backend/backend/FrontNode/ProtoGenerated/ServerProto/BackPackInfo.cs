// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BackPackInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Common {

  /// <summary>Holder for reflection information generated from BackPackInfo.proto</summary>
  public static partial class BackPackInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for BackPackInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BackPackInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJCYWNrUGFja0luZm8ucHJvdG8iQQoMQmFja1BhY2tJbmZvEg4KBnJlc3Vs",
            "dBgBIAEoBRIhCg5wbGF5ZXJpdGVtZGF0YRgCIAMoCzIJLkl0ZW1kYXRhIpUE",
            "CghJdGVtZGF0YRIRCglpdGVtaW5kZXgYASABKAUSDgoGaXRlbWlkGAIgASgF",
            "Eg4KBmFtb3VudBgDIAEoBRIOCgZnYW1laWQYBCABKAUSDQoFbHZtaW4YBSAB",
            "KAUSDQoFbHZtYXgYBiABKAUSEQoJY29pbmxpbWl0GAcgASgBEhgKEGRhaWx5",
            "cmVtYWludGltZXMYCCABKAUSEQoJc3RhcnRUaW1lGAkgASgJEhMKC2V4cGly",
            "ZWR0aW1lGAogASgJEgsKA2JldBgLIAEoARITCgtzcGlucGF5dHlwZRgMIAEo",
            "BRIQCghnaXZldHlwZRgNIAEoARIPCgd3aW50eXBlGA4gASgFEhUKDXdpbm11",
            "bHRpcGxpZXIYDyABKAESEQoJd2lubWF4bWFnGBAgASgBEhEKCXdpbm1hZ3Nl",
            "dBgRIAEoBRIRCglpdGVtdmFsdWUYEiABKAESEAoIaXRlbW5hbWUYEyABKAkS",
            "DAoEaWNvbhgUIAEoBRIRCgliYW5yZWFzb24YFSABKAUSEAoIaXRlbWRlc2MY",
            "FiABKAkSDAoEc3RhchgXIAEoBRIQCghnYW1lbmFtZRgYIAEoCRIWCg5jdXJy",
            "ZW5jeW51bWJlchgZIAEoBRIOCgZzb3VyY2UYGiABKAUSEQoJcGxheXZhbHVl",
            "GBsgASgBEg0KBXN0YXJ0GBwgASgDEg8KB2V4cGlyZWQYHSABKANCGKoCFUpp",
            "bGkuUHJvdG9jb2xzLkNvbW1vbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Common.BackPackInfo), global::Jili.Protocols.Common.BackPackInfo.Parser, new[]{ "Result", "Playeritemdata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Common.Itemdata), global::Jili.Protocols.Common.Itemdata.Parser, new[]{ "Itemindex", "Itemid", "Amount", "Gameid", "Lvmin", "Lvmax", "Coinlimit", "Dailyremaintimes", "StartTime", "Expiredtime", "Bet", "Spinpaytype", "Givetype", "Wintype", "Winmultiplier", "Winmaxmag", "Winmagset", "Itemvalue", "Itemname", "Icon", "Banreason", "Itemdesc", "Star", "Gamename", "Currencynumber", "Source", "Playvalue", "Start", "Expired" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BackPackInfo : pb::IMessage<BackPackInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BackPackInfo> _parser = new pb::MessageParser<BackPackInfo>(() => new BackPackInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BackPackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Common.BackPackInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BackPackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BackPackInfo(BackPackInfo other) : this() {
      result_ = other.result_;
      playeritemdata_ = other.playeritemdata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BackPackInfo Clone() {
      return new BackPackInfo(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "playeritemdata" field.</summary>
    public const int PlayeritemdataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Common.Itemdata> _repeated_playeritemdata_codec
        = pb::FieldCodec.ForMessage(18, global::Jili.Protocols.Common.Itemdata.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Common.Itemdata> playeritemdata_ = new pbc::RepeatedField<global::Jili.Protocols.Common.Itemdata>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Common.Itemdata> Playeritemdata {
      get { return playeritemdata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BackPackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BackPackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!playeritemdata_.Equals(other.playeritemdata_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      hash ^= playeritemdata_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      playeritemdata_.WriteTo(output, _repeated_playeritemdata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      playeritemdata_.WriteTo(ref output, _repeated_playeritemdata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      size += playeritemdata_.CalculateSize(_repeated_playeritemdata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BackPackInfo other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      playeritemdata_.Add(other.playeritemdata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            playeritemdata_.AddEntriesFrom(input, _repeated_playeritemdata_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            playeritemdata_.AddEntriesFrom(ref input, _repeated_playeritemdata_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Itemdata : pb::IMessage<Itemdata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Itemdata> _parser = new pb::MessageParser<Itemdata>(() => new Itemdata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Itemdata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Common.BackPackInfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Itemdata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Itemdata(Itemdata other) : this() {
      itemindex_ = other.itemindex_;
      itemid_ = other.itemid_;
      amount_ = other.amount_;
      gameid_ = other.gameid_;
      lvmin_ = other.lvmin_;
      lvmax_ = other.lvmax_;
      coinlimit_ = other.coinlimit_;
      dailyremaintimes_ = other.dailyremaintimes_;
      startTime_ = other.startTime_;
      expiredtime_ = other.expiredtime_;
      bet_ = other.bet_;
      spinpaytype_ = other.spinpaytype_;
      givetype_ = other.givetype_;
      wintype_ = other.wintype_;
      winmultiplier_ = other.winmultiplier_;
      winmaxmag_ = other.winmaxmag_;
      winmagset_ = other.winmagset_;
      itemvalue_ = other.itemvalue_;
      itemname_ = other.itemname_;
      icon_ = other.icon_;
      banreason_ = other.banreason_;
      itemdesc_ = other.itemdesc_;
      star_ = other.star_;
      gamename_ = other.gamename_;
      currencynumber_ = other.currencynumber_;
      source_ = other.source_;
      playvalue_ = other.playvalue_;
      start_ = other.start_;
      expired_ = other.expired_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Itemdata Clone() {
      return new Itemdata(this);
    }

    /// <summary>Field number for the "itemindex" field.</summary>
    public const int ItemindexFieldNumber = 1;
    private int itemindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Itemindex {
      get { return itemindex_; }
      set {
        itemindex_ = value;
      }
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 2;
    private int itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Itemid {
      get { return itemid_; }
      set {
        itemid_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private int amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "gameid" field.</summary>
    public const int GameidFieldNumber = 4;
    private int gameid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Gameid {
      get { return gameid_; }
      set {
        gameid_ = value;
      }
    }

    /// <summary>Field number for the "lvmin" field.</summary>
    public const int LvminFieldNumber = 5;
    private int lvmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lvmin {
      get { return lvmin_; }
      set {
        lvmin_ = value;
      }
    }

    /// <summary>Field number for the "lvmax" field.</summary>
    public const int LvmaxFieldNumber = 6;
    private int lvmax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lvmax {
      get { return lvmax_; }
      set {
        lvmax_ = value;
      }
    }

    /// <summary>Field number for the "coinlimit" field.</summary>
    public const int CoinlimitFieldNumber = 7;
    private double coinlimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Coinlimit {
      get { return coinlimit_; }
      set {
        coinlimit_ = value;
      }
    }

    /// <summary>Field number for the "dailyremaintimes" field.</summary>
    public const int DailyremaintimesFieldNumber = 8;
    private int dailyremaintimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Dailyremaintimes {
      get { return dailyremaintimes_; }
      set {
        dailyremaintimes_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 9;
    private string startTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string StartTime {
      get { return startTime_; }
      set {
        startTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiredtime" field.</summary>
    public const int ExpiredtimeFieldNumber = 10;
    private string expiredtime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Expiredtime {
      get { return expiredtime_; }
      set {
        expiredtime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 11;
    private double bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "spinpaytype" field.</summary>
    public const int SpinpaytypeFieldNumber = 12;
    private int spinpaytype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Spinpaytype {
      get { return spinpaytype_; }
      set {
        spinpaytype_ = value;
      }
    }

    /// <summary>Field number for the "givetype" field.</summary>
    public const int GivetypeFieldNumber = 13;
    private double givetype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Givetype {
      get { return givetype_; }
      set {
        givetype_ = value;
      }
    }

    /// <summary>Field number for the "wintype" field.</summary>
    public const int WintypeFieldNumber = 14;
    private int wintype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Wintype {
      get { return wintype_; }
      set {
        wintype_ = value;
      }
    }

    /// <summary>Field number for the "winmultiplier" field.</summary>
    public const int WinmultiplierFieldNumber = 15;
    private double winmultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Winmultiplier {
      get { return winmultiplier_; }
      set {
        winmultiplier_ = value;
      }
    }

    /// <summary>Field number for the "winmaxmag" field.</summary>
    public const int WinmaxmagFieldNumber = 16;
    private double winmaxmag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Winmaxmag {
      get { return winmaxmag_; }
      set {
        winmaxmag_ = value;
      }
    }

    /// <summary>Field number for the "winmagset" field.</summary>
    public const int WinmagsetFieldNumber = 17;
    private int winmagset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Winmagset {
      get { return winmagset_; }
      set {
        winmagset_ = value;
      }
    }

    /// <summary>Field number for the "itemvalue" field.</summary>
    public const int ItemvalueFieldNumber = 18;
    private double itemvalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Itemvalue {
      get { return itemvalue_; }
      set {
        itemvalue_ = value;
      }
    }

    /// <summary>Field number for the "itemname" field.</summary>
    public const int ItemnameFieldNumber = 19;
    private string itemname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Itemname {
      get { return itemname_; }
      set {
        itemname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 20;
    private int icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "banreason" field.</summary>
    public const int BanreasonFieldNumber = 21;
    private int banreason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Banreason {
      get { return banreason_; }
      set {
        banreason_ = value;
      }
    }

    /// <summary>Field number for the "itemdesc" field.</summary>
    public const int ItemdescFieldNumber = 22;
    private string itemdesc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Itemdesc {
      get { return itemdesc_; }
      set {
        itemdesc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 23;
    private int star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "gamename" field.</summary>
    public const int GamenameFieldNumber = 24;
    private string gamename_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Gamename {
      get { return gamename_; }
      set {
        gamename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currencynumber" field.</summary>
    public const int CurrencynumberFieldNumber = 25;
    private int currencynumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Currencynumber {
      get { return currencynumber_; }
      set {
        currencynumber_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 26;
    private int source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "playvalue" field.</summary>
    public const int PlayvalueFieldNumber = 27;
    private double playvalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Playvalue {
      get { return playvalue_; }
      set {
        playvalue_ = value;
      }
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 28;
    private long start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "expired" field.</summary>
    public const int ExpiredFieldNumber = 29;
    private long expired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Expired {
      get { return expired_; }
      set {
        expired_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Itemdata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Itemdata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Itemindex != other.Itemindex) return false;
      if (Itemid != other.Itemid) return false;
      if (Amount != other.Amount) return false;
      if (Gameid != other.Gameid) return false;
      if (Lvmin != other.Lvmin) return false;
      if (Lvmax != other.Lvmax) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Coinlimit, other.Coinlimit)) return false;
      if (Dailyremaintimes != other.Dailyremaintimes) return false;
      if (StartTime != other.StartTime) return false;
      if (Expiredtime != other.Expiredtime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bet, other.Bet)) return false;
      if (Spinpaytype != other.Spinpaytype) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Givetype, other.Givetype)) return false;
      if (Wintype != other.Wintype) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Winmultiplier, other.Winmultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Winmaxmag, other.Winmaxmag)) return false;
      if (Winmagset != other.Winmagset) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Itemvalue, other.Itemvalue)) return false;
      if (Itemname != other.Itemname) return false;
      if (Icon != other.Icon) return false;
      if (Banreason != other.Banreason) return false;
      if (Itemdesc != other.Itemdesc) return false;
      if (Star != other.Star) return false;
      if (Gamename != other.Gamename) return false;
      if (Currencynumber != other.Currencynumber) return false;
      if (Source != other.Source) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Playvalue, other.Playvalue)) return false;
      if (Start != other.Start) return false;
      if (Expired != other.Expired) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Itemindex != 0) hash ^= Itemindex.GetHashCode();
      if (Itemid != 0) hash ^= Itemid.GetHashCode();
      if (Amount != 0) hash ^= Amount.GetHashCode();
      if (Gameid != 0) hash ^= Gameid.GetHashCode();
      if (Lvmin != 0) hash ^= Lvmin.GetHashCode();
      if (Lvmax != 0) hash ^= Lvmax.GetHashCode();
      if (Coinlimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Coinlimit);
      if (Dailyremaintimes != 0) hash ^= Dailyremaintimes.GetHashCode();
      if (StartTime.Length != 0) hash ^= StartTime.GetHashCode();
      if (Expiredtime.Length != 0) hash ^= Expiredtime.GetHashCode();
      if (Bet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bet);
      if (Spinpaytype != 0) hash ^= Spinpaytype.GetHashCode();
      if (Givetype != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Givetype);
      if (Wintype != 0) hash ^= Wintype.GetHashCode();
      if (Winmultiplier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Winmultiplier);
      if (Winmaxmag != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Winmaxmag);
      if (Winmagset != 0) hash ^= Winmagset.GetHashCode();
      if (Itemvalue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Itemvalue);
      if (Itemname.Length != 0) hash ^= Itemname.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (Banreason != 0) hash ^= Banreason.GetHashCode();
      if (Itemdesc.Length != 0) hash ^= Itemdesc.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Gamename.Length != 0) hash ^= Gamename.GetHashCode();
      if (Currencynumber != 0) hash ^= Currencynumber.GetHashCode();
      if (Source != 0) hash ^= Source.GetHashCode();
      if (Playvalue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Playvalue);
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (Expired != 0L) hash ^= Expired.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Itemindex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Itemindex);
      }
      if (Itemid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Itemid);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Amount);
      }
      if (Gameid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gameid);
      }
      if (Lvmin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lvmin);
      }
      if (Lvmax != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Lvmax);
      }
      if (Coinlimit != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Coinlimit);
      }
      if (Dailyremaintimes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Dailyremaintimes);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(StartTime);
      }
      if (Expiredtime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Expiredtime);
      }
      if (Bet != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Bet);
      }
      if (Spinpaytype != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Spinpaytype);
      }
      if (Givetype != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Givetype);
      }
      if (Wintype != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Wintype);
      }
      if (Winmultiplier != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Winmultiplier);
      }
      if (Winmaxmag != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(Winmaxmag);
      }
      if (Winmagset != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Winmagset);
      }
      if (Itemvalue != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(Itemvalue);
      }
      if (Itemname.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Itemname);
      }
      if (Icon != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Icon);
      }
      if (Banreason != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Banreason);
      }
      if (Itemdesc.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Itemdesc);
      }
      if (Star != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Star);
      }
      if (Gamename.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Gamename);
      }
      if (Currencynumber != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Currencynumber);
      }
      if (Source != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Source);
      }
      if (Playvalue != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(Playvalue);
      }
      if (Start != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(Start);
      }
      if (Expired != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(Expired);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Itemindex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Itemindex);
      }
      if (Itemid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Itemid);
      }
      if (Amount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Amount);
      }
      if (Gameid != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gameid);
      }
      if (Lvmin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lvmin);
      }
      if (Lvmax != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Lvmax);
      }
      if (Coinlimit != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Coinlimit);
      }
      if (Dailyremaintimes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Dailyremaintimes);
      }
      if (StartTime.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(StartTime);
      }
      if (Expiredtime.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Expiredtime);
      }
      if (Bet != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Bet);
      }
      if (Spinpaytype != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Spinpaytype);
      }
      if (Givetype != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Givetype);
      }
      if (Wintype != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Wintype);
      }
      if (Winmultiplier != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Winmultiplier);
      }
      if (Winmaxmag != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(Winmaxmag);
      }
      if (Winmagset != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Winmagset);
      }
      if (Itemvalue != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(Itemvalue);
      }
      if (Itemname.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Itemname);
      }
      if (Icon != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Icon);
      }
      if (Banreason != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Banreason);
      }
      if (Itemdesc.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(Itemdesc);
      }
      if (Star != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(Star);
      }
      if (Gamename.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Gamename);
      }
      if (Currencynumber != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(Currencynumber);
      }
      if (Source != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Source);
      }
      if (Playvalue != 0D) {
        output.WriteRawTag(217, 1);
        output.WriteDouble(Playvalue);
      }
      if (Start != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(Start);
      }
      if (Expired != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(Expired);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Itemindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itemindex);
      }
      if (Itemid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Itemid);
      }
      if (Amount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
      }
      if (Gameid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gameid);
      }
      if (Lvmin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lvmin);
      }
      if (Lvmax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lvmax);
      }
      if (Coinlimit != 0D) {
        size += 1 + 8;
      }
      if (Dailyremaintimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dailyremaintimes);
      }
      if (StartTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StartTime);
      }
      if (Expiredtime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Expiredtime);
      }
      if (Bet != 0D) {
        size += 1 + 8;
      }
      if (Spinpaytype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spinpaytype);
      }
      if (Givetype != 0D) {
        size += 1 + 8;
      }
      if (Wintype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wintype);
      }
      if (Winmultiplier != 0D) {
        size += 1 + 8;
      }
      if (Winmaxmag != 0D) {
        size += 2 + 8;
      }
      if (Winmagset != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Winmagset);
      }
      if (Itemvalue != 0D) {
        size += 2 + 8;
      }
      if (Itemname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Itemname);
      }
      if (Icon != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Icon);
      }
      if (Banreason != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Banreason);
      }
      if (Itemdesc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Itemdesc);
      }
      if (Star != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Gamename.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Gamename);
      }
      if (Currencynumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Currencynumber);
      }
      if (Source != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Source);
      }
      if (Playvalue != 0D) {
        size += 2 + 8;
      }
      if (Start != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (Expired != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Expired);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Itemdata other) {
      if (other == null) {
        return;
      }
      if (other.Itemindex != 0) {
        Itemindex = other.Itemindex;
      }
      if (other.Itemid != 0) {
        Itemid = other.Itemid;
      }
      if (other.Amount != 0) {
        Amount = other.Amount;
      }
      if (other.Gameid != 0) {
        Gameid = other.Gameid;
      }
      if (other.Lvmin != 0) {
        Lvmin = other.Lvmin;
      }
      if (other.Lvmax != 0) {
        Lvmax = other.Lvmax;
      }
      if (other.Coinlimit != 0D) {
        Coinlimit = other.Coinlimit;
      }
      if (other.Dailyremaintimes != 0) {
        Dailyremaintimes = other.Dailyremaintimes;
      }
      if (other.StartTime.Length != 0) {
        StartTime = other.StartTime;
      }
      if (other.Expiredtime.Length != 0) {
        Expiredtime = other.Expiredtime;
      }
      if (other.Bet != 0D) {
        Bet = other.Bet;
      }
      if (other.Spinpaytype != 0) {
        Spinpaytype = other.Spinpaytype;
      }
      if (other.Givetype != 0D) {
        Givetype = other.Givetype;
      }
      if (other.Wintype != 0) {
        Wintype = other.Wintype;
      }
      if (other.Winmultiplier != 0D) {
        Winmultiplier = other.Winmultiplier;
      }
      if (other.Winmaxmag != 0D) {
        Winmaxmag = other.Winmaxmag;
      }
      if (other.Winmagset != 0) {
        Winmagset = other.Winmagset;
      }
      if (other.Itemvalue != 0D) {
        Itemvalue = other.Itemvalue;
      }
      if (other.Itemname.Length != 0) {
        Itemname = other.Itemname;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.Banreason != 0) {
        Banreason = other.Banreason;
      }
      if (other.Itemdesc.Length != 0) {
        Itemdesc = other.Itemdesc;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Gamename.Length != 0) {
        Gamename = other.Gamename;
      }
      if (other.Currencynumber != 0) {
        Currencynumber = other.Currencynumber;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      if (other.Playvalue != 0D) {
        Playvalue = other.Playvalue;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.Expired != 0L) {
        Expired = other.Expired;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Itemindex = input.ReadInt32();
            break;
          }
          case 16: {
            Itemid = input.ReadInt32();
            break;
          }
          case 24: {
            Amount = input.ReadInt32();
            break;
          }
          case 32: {
            Gameid = input.ReadInt32();
            break;
          }
          case 40: {
            Lvmin = input.ReadInt32();
            break;
          }
          case 48: {
            Lvmax = input.ReadInt32();
            break;
          }
          case 57: {
            Coinlimit = input.ReadDouble();
            break;
          }
          case 64: {
            Dailyremaintimes = input.ReadInt32();
            break;
          }
          case 74: {
            StartTime = input.ReadString();
            break;
          }
          case 82: {
            Expiredtime = input.ReadString();
            break;
          }
          case 89: {
            Bet = input.ReadDouble();
            break;
          }
          case 96: {
            Spinpaytype = input.ReadInt32();
            break;
          }
          case 105: {
            Givetype = input.ReadDouble();
            break;
          }
          case 112: {
            Wintype = input.ReadInt32();
            break;
          }
          case 121: {
            Winmultiplier = input.ReadDouble();
            break;
          }
          case 129: {
            Winmaxmag = input.ReadDouble();
            break;
          }
          case 136: {
            Winmagset = input.ReadInt32();
            break;
          }
          case 145: {
            Itemvalue = input.ReadDouble();
            break;
          }
          case 154: {
            Itemname = input.ReadString();
            break;
          }
          case 160: {
            Icon = input.ReadInt32();
            break;
          }
          case 168: {
            Banreason = input.ReadInt32();
            break;
          }
          case 178: {
            Itemdesc = input.ReadString();
            break;
          }
          case 184: {
            Star = input.ReadInt32();
            break;
          }
          case 194: {
            Gamename = input.ReadString();
            break;
          }
          case 200: {
            Currencynumber = input.ReadInt32();
            break;
          }
          case 208: {
            Source = input.ReadInt32();
            break;
          }
          case 217: {
            Playvalue = input.ReadDouble();
            break;
          }
          case 224: {
            Start = input.ReadInt64();
            break;
          }
          case 232: {
            Expired = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Itemindex = input.ReadInt32();
            break;
          }
          case 16: {
            Itemid = input.ReadInt32();
            break;
          }
          case 24: {
            Amount = input.ReadInt32();
            break;
          }
          case 32: {
            Gameid = input.ReadInt32();
            break;
          }
          case 40: {
            Lvmin = input.ReadInt32();
            break;
          }
          case 48: {
            Lvmax = input.ReadInt32();
            break;
          }
          case 57: {
            Coinlimit = input.ReadDouble();
            break;
          }
          case 64: {
            Dailyremaintimes = input.ReadInt32();
            break;
          }
          case 74: {
            StartTime = input.ReadString();
            break;
          }
          case 82: {
            Expiredtime = input.ReadString();
            break;
          }
          case 89: {
            Bet = input.ReadDouble();
            break;
          }
          case 96: {
            Spinpaytype = input.ReadInt32();
            break;
          }
          case 105: {
            Givetype = input.ReadDouble();
            break;
          }
          case 112: {
            Wintype = input.ReadInt32();
            break;
          }
          case 121: {
            Winmultiplier = input.ReadDouble();
            break;
          }
          case 129: {
            Winmaxmag = input.ReadDouble();
            break;
          }
          case 136: {
            Winmagset = input.ReadInt32();
            break;
          }
          case 145: {
            Itemvalue = input.ReadDouble();
            break;
          }
          case 154: {
            Itemname = input.ReadString();
            break;
          }
          case 160: {
            Icon = input.ReadInt32();
            break;
          }
          case 168: {
            Banreason = input.ReadInt32();
            break;
          }
          case 178: {
            Itemdesc = input.ReadString();
            break;
          }
          case 184: {
            Star = input.ReadInt32();
            break;
          }
          case 194: {
            Gamename = input.ReadString();
            break;
          }
          case 200: {
            Currencynumber = input.ReadInt32();
            break;
          }
          case 208: {
            Source = input.ReadInt32();
            break;
          }
          case 217: {
            Playvalue = input.ReadDouble();
            break;
          }
          case 224: {
            Start = input.ReadInt64();
            break;
          }
          case 232: {
            Expired = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
