// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CheckUseItem.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Common {

  /// <summary>Holder for reflection information generated from CheckUseItem.proto</summary>
  public static partial class CheckUseItemReflection {

    #region Descriptor
    /// <summary>File descriptor for CheckUseItem.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CheckUseItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJDaGVja1VzZUl0ZW0ucHJvdG8iNAoMQ2hlY2tVc2VJdGVtEhcKBGluZm8Y",
            "ASABKAsyCS5JdGVtSW5mbxILCgNyZXQYAiABKAUioAIKCEl0ZW1JbmZvEg4K",
            "BnJlc3VsdBgBIAEoBRILCgNiZXQYAiABKAESEwoLc3BpbnBheXR5cGUYAyAB",
            "KAUSEAoIZ2l2ZXR5cGUYBCABKAUSDwoHd2ludHlwZRgFIAEoBRIVCg13aW5t",
            "dWx0aXBsaWVyGAYgASgBEhEKCXdpbm1heG1hZxgHIAEoARIYChB3aW5tYWd1",
            "cHBlcmJvdW5kGAggASgBEhgKEHdpbm1hZ2xvd2VyYm91bmQYCSABKAESDAoE",
            "c3RhchgKIAEoBRIMCgRpY29uGAsgASgFEg8KB2FsdGVyaWQYDCABKAUSEQoJ",
            "Y29pbmxpbWl0GA0gASgBEg4KBnNvdXJjZRgOIAEoBRIRCglwbGF5dmFsdWUY",
            "DyABKAFCGKoCFUppbGkuUHJvdG9jb2xzLkNvbW1vbmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Common.CheckUseItem), global::Jili.Protocols.Common.CheckUseItem.Parser, new[]{ "Info", "Ret" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Common.ItemInfo), global::Jili.Protocols.Common.ItemInfo.Parser, new[]{ "Result", "Bet", "Spinpaytype", "Givetype", "Wintype", "Winmultiplier", "Winmaxmag", "Winmagupperbound", "Winmaglowerbound", "Star", "Icon", "Alterid", "Coinlimit", "Source", "Playvalue" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class CheckUseItem : pb::IMessage<CheckUseItem>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CheckUseItem> _parser = new pb::MessageParser<CheckUseItem>(() => new CheckUseItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CheckUseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Common.CheckUseItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CheckUseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CheckUseItem(CheckUseItem other) : this() {
      info_ = other.info_ != null ? other.info_.Clone() : null;
      ret_ = other.ret_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CheckUseItem Clone() {
      return new CheckUseItem(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private global::Jili.Protocols.Common.ItemInfo info_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Jili.Protocols.Common.ItemInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "ret" field.</summary>
    public const int RetFieldNumber = 2;
    private int ret_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ret {
      get { return ret_; }
      set {
        ret_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CheckUseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CheckUseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Info, other.Info)) return false;
      if (Ret != other.Ret) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (info_ != null) hash ^= Info.GetHashCode();
      if (Ret != 0) hash ^= Ret.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (Ret != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ret);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (Ret != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ret);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CheckUseItem other) {
      if (other == null) {
        return;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          Info = new global::Jili.Protocols.Common.ItemInfo();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.Ret != 0) {
        Ret = other.Ret;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Jili.Protocols.Common.ItemInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 16: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (info_ == null) {
              Info = new global::Jili.Protocols.Common.ItemInfo();
            }
            input.ReadMessage(Info);
            break;
          }
          case 16: {
            Ret = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ItemInfo : pb::IMessage<ItemInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Common.CheckUseItemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ItemInfo(ItemInfo other) : this() {
      result_ = other.result_;
      bet_ = other.bet_;
      spinpaytype_ = other.spinpaytype_;
      givetype_ = other.givetype_;
      wintype_ = other.wintype_;
      winmultiplier_ = other.winmultiplier_;
      winmaxmag_ = other.winmaxmag_;
      winmagupperbound_ = other.winmagupperbound_;
      winmaglowerbound_ = other.winmaglowerbound_;
      star_ = other.star_;
      icon_ = other.icon_;
      alterid_ = other.alterid_;
      coinlimit_ = other.coinlimit_;
      source_ = other.source_;
      playvalue_ = other.playvalue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ItemInfo Clone() {
      return new ItemInfo(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 2;
    private double bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "spinpaytype" field.</summary>
    public const int SpinpaytypeFieldNumber = 3;
    private int spinpaytype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Spinpaytype {
      get { return spinpaytype_; }
      set {
        spinpaytype_ = value;
      }
    }

    /// <summary>Field number for the "givetype" field.</summary>
    public const int GivetypeFieldNumber = 4;
    private int givetype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Givetype {
      get { return givetype_; }
      set {
        givetype_ = value;
      }
    }

    /// <summary>Field number for the "wintype" field.</summary>
    public const int WintypeFieldNumber = 5;
    private int wintype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Wintype {
      get { return wintype_; }
      set {
        wintype_ = value;
      }
    }

    /// <summary>Field number for the "winmultiplier" field.</summary>
    public const int WinmultiplierFieldNumber = 6;
    private double winmultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Winmultiplier {
      get { return winmultiplier_; }
      set {
        winmultiplier_ = value;
      }
    }

    /// <summary>Field number for the "winmaxmag" field.</summary>
    public const int WinmaxmagFieldNumber = 7;
    private double winmaxmag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Winmaxmag {
      get { return winmaxmag_; }
      set {
        winmaxmag_ = value;
      }
    }

    /// <summary>Field number for the "winmagupperbound" field.</summary>
    public const int WinmagupperboundFieldNumber = 8;
    private double winmagupperbound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Winmagupperbound {
      get { return winmagupperbound_; }
      set {
        winmagupperbound_ = value;
      }
    }

    /// <summary>Field number for the "winmaglowerbound" field.</summary>
    public const int WinmaglowerboundFieldNumber = 9;
    private double winmaglowerbound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Winmaglowerbound {
      get { return winmaglowerbound_; }
      set {
        winmaglowerbound_ = value;
      }
    }

    /// <summary>Field number for the "star" field.</summary>
    public const int StarFieldNumber = 10;
    private int star_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 11;
    private int icon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Icon {
      get { return icon_; }
      set {
        icon_ = value;
      }
    }

    /// <summary>Field number for the "alterid" field.</summary>
    public const int AlteridFieldNumber = 12;
    private int alterid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Alterid {
      get { return alterid_; }
      set {
        alterid_ = value;
      }
    }

    /// <summary>Field number for the "coinlimit" field.</summary>
    public const int CoinlimitFieldNumber = 13;
    private double coinlimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Coinlimit {
      get { return coinlimit_; }
      set {
        coinlimit_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 14;
    private int source_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "playvalue" field.</summary>
    public const int PlayvalueFieldNumber = 15;
    private double playvalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Playvalue {
      get { return playvalue_; }
      set {
        playvalue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bet, other.Bet)) return false;
      if (Spinpaytype != other.Spinpaytype) return false;
      if (Givetype != other.Givetype) return false;
      if (Wintype != other.Wintype) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Winmultiplier, other.Winmultiplier)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Winmaxmag, other.Winmaxmag)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Winmagupperbound, other.Winmagupperbound)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Winmaglowerbound, other.Winmaglowerbound)) return false;
      if (Star != other.Star) return false;
      if (Icon != other.Icon) return false;
      if (Alterid != other.Alterid) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Coinlimit, other.Coinlimit)) return false;
      if (Source != other.Source) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Playvalue, other.Playvalue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Bet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bet);
      if (Spinpaytype != 0) hash ^= Spinpaytype.GetHashCode();
      if (Givetype != 0) hash ^= Givetype.GetHashCode();
      if (Wintype != 0) hash ^= Wintype.GetHashCode();
      if (Winmultiplier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Winmultiplier);
      if (Winmaxmag != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Winmaxmag);
      if (Winmagupperbound != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Winmagupperbound);
      if (Winmaglowerbound != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Winmaglowerbound);
      if (Star != 0) hash ^= Star.GetHashCode();
      if (Icon != 0) hash ^= Icon.GetHashCode();
      if (Alterid != 0) hash ^= Alterid.GetHashCode();
      if (Coinlimit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Coinlimit);
      if (Source != 0) hash ^= Source.GetHashCode();
      if (Playvalue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Playvalue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (Bet != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Bet);
      }
      if (Spinpaytype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Spinpaytype);
      }
      if (Givetype != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Givetype);
      }
      if (Wintype != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Wintype);
      }
      if (Winmultiplier != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Winmultiplier);
      }
      if (Winmaxmag != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Winmaxmag);
      }
      if (Winmagupperbound != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Winmagupperbound);
      }
      if (Winmaglowerbound != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Winmaglowerbound);
      }
      if (Star != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Star);
      }
      if (Icon != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Icon);
      }
      if (Alterid != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Alterid);
      }
      if (Coinlimit != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Coinlimit);
      }
      if (Source != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Source);
      }
      if (Playvalue != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Playvalue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (Bet != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Bet);
      }
      if (Spinpaytype != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Spinpaytype);
      }
      if (Givetype != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Givetype);
      }
      if (Wintype != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Wintype);
      }
      if (Winmultiplier != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Winmultiplier);
      }
      if (Winmaxmag != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Winmaxmag);
      }
      if (Winmagupperbound != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Winmagupperbound);
      }
      if (Winmaglowerbound != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Winmaglowerbound);
      }
      if (Star != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Star);
      }
      if (Icon != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Icon);
      }
      if (Alterid != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Alterid);
      }
      if (Coinlimit != 0D) {
        output.WriteRawTag(105);
        output.WriteDouble(Coinlimit);
      }
      if (Source != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Source);
      }
      if (Playvalue != 0D) {
        output.WriteRawTag(121);
        output.WriteDouble(Playvalue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Bet != 0D) {
        size += 1 + 8;
      }
      if (Spinpaytype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spinpaytype);
      }
      if (Givetype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Givetype);
      }
      if (Wintype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Wintype);
      }
      if (Winmultiplier != 0D) {
        size += 1 + 8;
      }
      if (Winmaxmag != 0D) {
        size += 1 + 8;
      }
      if (Winmagupperbound != 0D) {
        size += 1 + 8;
      }
      if (Winmaglowerbound != 0D) {
        size += 1 + 8;
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      if (Icon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Icon);
      }
      if (Alterid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alterid);
      }
      if (Coinlimit != 0D) {
        size += 1 + 8;
      }
      if (Source != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Source);
      }
      if (Playvalue != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Bet != 0D) {
        Bet = other.Bet;
      }
      if (other.Spinpaytype != 0) {
        Spinpaytype = other.Spinpaytype;
      }
      if (other.Givetype != 0) {
        Givetype = other.Givetype;
      }
      if (other.Wintype != 0) {
        Wintype = other.Wintype;
      }
      if (other.Winmultiplier != 0D) {
        Winmultiplier = other.Winmultiplier;
      }
      if (other.Winmaxmag != 0D) {
        Winmaxmag = other.Winmaxmag;
      }
      if (other.Winmagupperbound != 0D) {
        Winmagupperbound = other.Winmagupperbound;
      }
      if (other.Winmaglowerbound != 0D) {
        Winmaglowerbound = other.Winmaglowerbound;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
      if (other.Icon != 0) {
        Icon = other.Icon;
      }
      if (other.Alterid != 0) {
        Alterid = other.Alterid;
      }
      if (other.Coinlimit != 0D) {
        Coinlimit = other.Coinlimit;
      }
      if (other.Source != 0) {
        Source = other.Source;
      }
      if (other.Playvalue != 0D) {
        Playvalue = other.Playvalue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 17: {
            Bet = input.ReadDouble();
            break;
          }
          case 24: {
            Spinpaytype = input.ReadInt32();
            break;
          }
          case 32: {
            Givetype = input.ReadInt32();
            break;
          }
          case 40: {
            Wintype = input.ReadInt32();
            break;
          }
          case 49: {
            Winmultiplier = input.ReadDouble();
            break;
          }
          case 57: {
            Winmaxmag = input.ReadDouble();
            break;
          }
          case 65: {
            Winmagupperbound = input.ReadDouble();
            break;
          }
          case 73: {
            Winmaglowerbound = input.ReadDouble();
            break;
          }
          case 80: {
            Star = input.ReadInt32();
            break;
          }
          case 88: {
            Icon = input.ReadInt32();
            break;
          }
          case 96: {
            Alterid = input.ReadInt32();
            break;
          }
          case 105: {
            Coinlimit = input.ReadDouble();
            break;
          }
          case 112: {
            Source = input.ReadInt32();
            break;
          }
          case 121: {
            Playvalue = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 17: {
            Bet = input.ReadDouble();
            break;
          }
          case 24: {
            Spinpaytype = input.ReadInt32();
            break;
          }
          case 32: {
            Givetype = input.ReadInt32();
            break;
          }
          case 40: {
            Wintype = input.ReadInt32();
            break;
          }
          case 49: {
            Winmultiplier = input.ReadDouble();
            break;
          }
          case 57: {
            Winmaxmag = input.ReadDouble();
            break;
          }
          case 65: {
            Winmagupperbound = input.ReadDouble();
            break;
          }
          case 73: {
            Winmaglowerbound = input.ReadDouble();
            break;
          }
          case 80: {
            Star = input.ReadInt32();
            break;
          }
          case 88: {
            Icon = input.ReadInt32();
            break;
          }
          case 96: {
            Alterid = input.ReadInt32();
            break;
          }
          case 105: {
            Coinlimit = input.ReadDouble();
            break;
          }
          case 112: {
            Source = input.ReadInt32();
            break;
          }
          case 121: {
            Playvalue = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
