// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: WalletInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Common {

  /// <summary>Holder for reflection information generated from WalletInfo.proto</summary>
  public static partial class WalletInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for WalletInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WalletInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBXYWxsZXRJbmZvLnByb3RvItYBCgpXYWxsZXRJbmZvEhYKDmN1cnJlbmN5",
            "TnVtYmVyGAEgASgFEhQKDGN1cnJlbmN5TmFtZRgCIAEoCRIWCg5jdXJyZW5j",
            "eVN5bWJvbBgDIAEoCRIMCgRjb2luGAQgASgBEgsKA2JldBgFIAMoARIMCgR1",
            "bml0GAYgASgBEg0KBXJhdGlvGAcgASgBEgwKBHJhdGUYCCABKAESDQoFdXBw",
            "ZXIYCSABKAESDQoFbG93ZXIYCiABKAESDQoFY3ljbGUYCyABKAESDwoHZGVj",
            "aW1hbBgMIAEoBUIYqgIVSmlsaS5Qcm90b2NvbHMuQ29tbW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Common.WalletInfo), global::Jili.Protocols.Common.WalletInfo.Parser, new[]{ "CurrencyNumber", "CurrencyName", "CurrencySymbol", "Coin", "Bet", "Unit", "Ratio", "Rate", "Upper", "Lower", "Cycle", "Decimal" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class WalletInfo : pb::IMessage<WalletInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WalletInfo> _parser = new pb::MessageParser<WalletInfo>(() => new WalletInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WalletInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Common.WalletInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WalletInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WalletInfo(WalletInfo other) : this() {
      currencyNumber_ = other.currencyNumber_;
      currencyName_ = other.currencyName_;
      currencySymbol_ = other.currencySymbol_;
      coin_ = other.coin_;
      bet_ = other.bet_.Clone();
      unit_ = other.unit_;
      ratio_ = other.ratio_;
      rate_ = other.rate_;
      upper_ = other.upper_;
      lower_ = other.lower_;
      cycle_ = other.cycle_;
      decimal_ = other.decimal_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WalletInfo Clone() {
      return new WalletInfo(this);
    }

    /// <summary>Field number for the "currencyNumber" field.</summary>
    public const int CurrencyNumberFieldNumber = 1;
    private int currencyNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CurrencyNumber {
      get { return currencyNumber_; }
      set {
        currencyNumber_ = value;
      }
    }

    /// <summary>Field number for the "currencyName" field.</summary>
    public const int CurrencyNameFieldNumber = 2;
    private string currencyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CurrencyName {
      get { return currencyName_; }
      set {
        currencyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currencySymbol" field.</summary>
    public const int CurrencySymbolFieldNumber = 3;
    private string currencySymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CurrencySymbol {
      get { return currencySymbol_; }
      set {
        currencySymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 4;
    private double coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 5;
    private static readonly pb::FieldCodec<double> _repeated_bet_codec
        = pb::FieldCodec.ForDouble(42);
    private readonly pbc::RepeatedField<double> bet_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<double> Bet {
      get { return bet_; }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 6;
    private double unit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "ratio" field.</summary>
    public const int RatioFieldNumber = 7;
    private double ratio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Ratio {
      get { return ratio_; }
      set {
        ratio_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 8;
    private double rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "upper" field.</summary>
    public const int UpperFieldNumber = 9;
    private double upper_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Upper {
      get { return upper_; }
      set {
        upper_ = value;
      }
    }

    /// <summary>Field number for the "lower" field.</summary>
    public const int LowerFieldNumber = 10;
    private double lower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Lower {
      get { return lower_; }
      set {
        lower_ = value;
      }
    }

    /// <summary>Field number for the "cycle" field.</summary>
    public const int CycleFieldNumber = 11;
    private double cycle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Cycle {
      get { return cycle_; }
      set {
        cycle_ = value;
      }
    }

    /// <summary>Field number for the "decimal" field.</summary>
    public const int DecimalFieldNumber = 12;
    private int decimal_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Decimal {
      get { return decimal_; }
      set {
        decimal_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WalletInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WalletInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrencyNumber != other.CurrencyNumber) return false;
      if (CurrencyName != other.CurrencyName) return false;
      if (CurrencySymbol != other.CurrencySymbol) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Coin, other.Coin)) return false;
      if(!bet_.Equals(other.bet_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Unit, other.Unit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Ratio, other.Ratio)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rate, other.Rate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Upper, other.Upper)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Lower, other.Lower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Cycle, other.Cycle)) return false;
      if (Decimal != other.Decimal) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrencyNumber != 0) hash ^= CurrencyNumber.GetHashCode();
      if (CurrencyName.Length != 0) hash ^= CurrencyName.GetHashCode();
      if (CurrencySymbol.Length != 0) hash ^= CurrencySymbol.GetHashCode();
      if (Coin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Coin);
      hash ^= bet_.GetHashCode();
      if (Unit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Unit);
      if (Ratio != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Ratio);
      if (Rate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rate);
      if (Upper != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Upper);
      if (Lower != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Lower);
      if (Cycle != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Cycle);
      if (Decimal != 0) hash ^= Decimal.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurrencyNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrencyNumber);
      }
      if (CurrencyName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrencyName);
      }
      if (CurrencySymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrencySymbol);
      }
      if (Coin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Coin);
      }
      bet_.WriteTo(output, _repeated_bet_codec);
      if (Unit != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Unit);
      }
      if (Ratio != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Ratio);
      }
      if (Rate != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Rate);
      }
      if (Upper != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Upper);
      }
      if (Lower != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Lower);
      }
      if (Cycle != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Cycle);
      }
      if (Decimal != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Decimal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurrencyNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrencyNumber);
      }
      if (CurrencyName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CurrencyName);
      }
      if (CurrencySymbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CurrencySymbol);
      }
      if (Coin != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Coin);
      }
      bet_.WriteTo(ref output, _repeated_bet_codec);
      if (Unit != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Unit);
      }
      if (Ratio != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Ratio);
      }
      if (Rate != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Rate);
      }
      if (Upper != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Upper);
      }
      if (Lower != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Lower);
      }
      if (Cycle != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(Cycle);
      }
      if (Decimal != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Decimal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CurrencyNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrencyNumber);
      }
      if (CurrencyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyName);
      }
      if (CurrencySymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencySymbol);
      }
      if (Coin != 0D) {
        size += 1 + 8;
      }
      size += bet_.CalculateSize(_repeated_bet_codec);
      if (Unit != 0D) {
        size += 1 + 8;
      }
      if (Ratio != 0D) {
        size += 1 + 8;
      }
      if (Rate != 0D) {
        size += 1 + 8;
      }
      if (Upper != 0D) {
        size += 1 + 8;
      }
      if (Lower != 0D) {
        size += 1 + 8;
      }
      if (Cycle != 0D) {
        size += 1 + 8;
      }
      if (Decimal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Decimal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WalletInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurrencyNumber != 0) {
        CurrencyNumber = other.CurrencyNumber;
      }
      if (other.CurrencyName.Length != 0) {
        CurrencyName = other.CurrencyName;
      }
      if (other.CurrencySymbol.Length != 0) {
        CurrencySymbol = other.CurrencySymbol;
      }
      if (other.Coin != 0D) {
        Coin = other.Coin;
      }
      bet_.Add(other.bet_);
      if (other.Unit != 0D) {
        Unit = other.Unit;
      }
      if (other.Ratio != 0D) {
        Ratio = other.Ratio;
      }
      if (other.Rate != 0D) {
        Rate = other.Rate;
      }
      if (other.Upper != 0D) {
        Upper = other.Upper;
      }
      if (other.Lower != 0D) {
        Lower = other.Lower;
      }
      if (other.Cycle != 0D) {
        Cycle = other.Cycle;
      }
      if (other.Decimal != 0) {
        Decimal = other.Decimal;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrencyNumber = input.ReadInt32();
            break;
          }
          case 18: {
            CurrencyName = input.ReadString();
            break;
          }
          case 26: {
            CurrencySymbol = input.ReadString();
            break;
          }
          case 33: {
            Coin = input.ReadDouble();
            break;
          }
          case 42:
          case 41: {
            bet_.AddEntriesFrom(input, _repeated_bet_codec);
            break;
          }
          case 49: {
            Unit = input.ReadDouble();
            break;
          }
          case 57: {
            Ratio = input.ReadDouble();
            break;
          }
          case 65: {
            Rate = input.ReadDouble();
            break;
          }
          case 73: {
            Upper = input.ReadDouble();
            break;
          }
          case 81: {
            Lower = input.ReadDouble();
            break;
          }
          case 89: {
            Cycle = input.ReadDouble();
            break;
          }
          case 96: {
            Decimal = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurrencyNumber = input.ReadInt32();
            break;
          }
          case 18: {
            CurrencyName = input.ReadString();
            break;
          }
          case 26: {
            CurrencySymbol = input.ReadString();
            break;
          }
          case 33: {
            Coin = input.ReadDouble();
            break;
          }
          case 42:
          case 41: {
            bet_.AddEntriesFrom(ref input, _repeated_bet_codec);
            break;
          }
          case 49: {
            Unit = input.ReadDouble();
            break;
          }
          case 57: {
            Ratio = input.ReadDouble();
            break;
          }
          case 65: {
            Rate = input.ReadDouble();
            break;
          }
          case 73: {
            Upper = input.ReadDouble();
            break;
          }
          case 81: {
            Lower = input.ReadDouble();
            break;
          }
          case 89: {
            Cycle = input.ReadDouble();
            break;
          }
          case 96: {
            Decimal = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
