// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Cc {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhFKaWxpLlByb3RvY29scy5jYyK3AQoHU3BpbkFj",
            "axIwCgpSb3VuZFF1ZXVlGAEgAygLMhwuSmlsaS5Qcm90b2NvbHMuY2MuUm91",
            "bmRJbmZvEhQKDEZyZWVUb3RhbFdpbhgCIAEoARIQCghUb3RhbFdpbhgDIAEo",
            "ARIuCghMYXN0SW5mbxgEIAMoCzIcLkppbGkuUHJvdG9jb2xzLmNjLlN0YXRl",
            "SW5mbxIVCg1KUEZyb250QmVmb3JlGAUgASgBEgsKA1JUUBgGIAEoASKHBAoJ",
            "Um91bmRJbmZvEi4KC1BsYXRlU3ltYm9sGAEgAygLMhkuSmlsaS5Qcm90b2Nv",
            "bHMuY2MuQ29sdW1uEhIKCk5ld1dpbGRQb3MYAiADKAUSEgoKTm93V2lsZFBv",
            "cxgDIAMoBRIWCg5SZWRFbnZlbG9wZVBvcxgEIAMoBRIWCg5SZWRFbnZlbG9w",
            "ZVdpbhgFIAEoBRIQCghSb3VuZFdpbhgGIAEoARIqCgdKUFBsYXRlGAcgAygL",
            "MhkuSmlsaS5Qcm90b2NvbHMuY2MuSlBEYXRhEjIKDEF3YXJkRGF0YVZlYxgI",
            "IAMoCzIcLkppbGkuUHJvdG9jb2xzLmNjLkF3YXJkRGF0YRIVCg1Bd2FyZFR5",
            "cGVGbGFnGAkgASgFEhAKCEdhbWVUeXBlGAogASgFEhcKD0ZyZWVSZW1haW5S",
            "b3VuZBgLIAEoBRIUCgxGcmVlTm93Um91bmQYDCABKAUSFgoORnJlZVRvdGFs",
            "Um91bmQYDSABKAUSEgoKV2lsZFN5bWJvbBgOIAEoBRIwCgpGR1JlZENvaW5z",
            "GA8gAygLMhwuSmlsaS5Qcm90b2NvbHMuY2MuRkdSZWRDb2luEhAKCEFkZENy",
            "YWNrGBAgAygIEg8KB01heEZsYWcYESABKAgSEgoKQWRkQ3JhY2tMdhgSIAMo",
            "BRITCgtDcmFja0xldmVscxgTIAMoBSIYCgZDb2x1bW4SDgoGQ29sdW1uGAEg",
            "AygFImIKBkpQRGF0YRIUCgxTeW1ib2xTZXJpYWwYASADKAUSCwoDV2luGAIg",
            "ASgBEhEKCUhpdFN5bWJvbBgDIAEoBRIOCgZKUFR5cGUYBCABKAUSEgoKSXNV",
            "cGdyYWRlZBgFIAEoCCJICglBd2FyZERhdGESDgoGU3ltYm9sGAEgASgFEg0K",
            "BUNvdW50GAIgASgFEg8KB0xpbmVOdW0YAyABKAUSCwoDV2luGAQgASgBIlkK",
            "CVN0YXRlSW5mbxITCgtDcmFja0xldmVscxgBIAMoBRI3Cg1XaWxkUmVjb3Jk",
            "VmVjGAIgAygLMiAuSmlsaS5Qcm90b2NvbHMuY2MuV2lsZFJlY29yZFNldCIp",
            "Cg1XaWxkUmVjb3JkU2V0EgsKA0JldBgBIAEoARILCgNQb3MYAiADKAUiNwoJ",
            "RkdSZWRDb2luEgsKA1BvcxgBIAEoBRIQCghBZGRSb3VuZBgCIAEoBRILCgNX",
            "aW4YAyABKAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cc.SpinAck), global::Jili.Protocols.Cc.SpinAck.Parser, new[]{ "RoundQueue", "FreeTotalWin", "TotalWin", "LastInfo", "JPFrontBefore", "RTP" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cc.RoundInfo), global::Jili.Protocols.Cc.RoundInfo.Parser, new[]{ "PlateSymbol", "NewWildPos", "NowWildPos", "RedEnvelopePos", "RedEnvelopeWin", "RoundWin", "JPPlate", "AwardDataVec", "AwardTypeFlag", "GameType", "FreeRemainRound", "FreeNowRound", "FreeTotalRound", "WildSymbol", "FGRedCoins", "AddCrack", "MaxFlag", "AddCrackLv", "CrackLevels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cc.Column), global::Jili.Protocols.Cc.Column.Parser, new[]{ "Column_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cc.JPData), global::Jili.Protocols.Cc.JPData.Parser, new[]{ "SymbolSerial", "Win", "HitSymbol", "JPType", "IsUpgraded" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cc.AwardData), global::Jili.Protocols.Cc.AwardData.Parser, new[]{ "Symbol", "Count", "LineNum", "Win" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cc.StateInfo), global::Jili.Protocols.Cc.StateInfo.Parser, new[]{ "CrackLevels", "WildRecordVec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cc.WildRecordSet), global::Jili.Protocols.Cc.WildRecordSet.Parser, new[]{ "Bet", "Pos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Cc.FGRedCoin), global::Jili.Protocols.Cc.FGRedCoin.Parser, new[]{ "Pos", "AddRound", "Win" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cc.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      roundQueue_ = other.roundQueue_.Clone();
      freeTotalWin_ = other.freeTotalWin_;
      totalWin_ = other.totalWin_;
      lastInfo_ = other.lastInfo_.Clone();
      jPFrontBefore_ = other.jPFrontBefore_;
      rTP_ = other.rTP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "RoundQueue" field.</summary>
    public const int RoundQueueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cc.RoundInfo> _repeated_roundQueue_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Cc.RoundInfo.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cc.RoundInfo> roundQueue_ = new pbc::RepeatedField<global::Jili.Protocols.Cc.RoundInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cc.RoundInfo> RoundQueue {
      get { return roundQueue_; }
    }

    /// <summary>Field number for the "FreeTotalWin" field.</summary>
    public const int FreeTotalWinFieldNumber = 2;
    private double freeTotalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FreeTotalWin {
      get { return freeTotalWin_; }
      set {
        freeTotalWin_ = value;
      }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 3;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "LastInfo" field.</summary>
    public const int LastInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cc.StateInfo> _repeated_lastInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Jili.Protocols.Cc.StateInfo.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cc.StateInfo> lastInfo_ = new pbc::RepeatedField<global::Jili.Protocols.Cc.StateInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cc.StateInfo> LastInfo {
      get { return lastInfo_; }
    }

    /// <summary>Field number for the "JPFrontBefore" field.</summary>
    public const int JPFrontBeforeFieldNumber = 5;
    private double jPFrontBefore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double JPFrontBefore {
      get { return jPFrontBefore_; }
      set {
        jPFrontBefore_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 6;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roundQueue_.Equals(other.roundQueue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FreeTotalWin, other.FreeTotalWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if(!lastInfo_.Equals(other.lastInfo_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(JPFrontBefore, other.JPFrontBefore)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roundQueue_.GetHashCode();
      if (FreeTotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FreeTotalWin);
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      hash ^= lastInfo_.GetHashCode();
      if (JPFrontBefore != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(JPFrontBefore);
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      roundQueue_.WriteTo(output, _repeated_roundQueue_codec);
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      lastInfo_.WriteTo(output, _repeated_lastInfo_codec);
      if (JPFrontBefore != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(JPFrontBefore);
      }
      if (RTP != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RTP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      roundQueue_.WriteTo(ref output, _repeated_roundQueue_codec);
      if (FreeTotalWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FreeTotalWin);
      }
      if (TotalWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(TotalWin);
      }
      lastInfo_.WriteTo(ref output, _repeated_lastInfo_codec);
      if (JPFrontBefore != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(JPFrontBefore);
      }
      if (RTP != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RTP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += roundQueue_.CalculateSize(_repeated_roundQueue_codec);
      if (FreeTotalWin != 0D) {
        size += 1 + 8;
      }
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      size += lastInfo_.CalculateSize(_repeated_lastInfo_codec);
      if (JPFrontBefore != 0D) {
        size += 1 + 8;
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      roundQueue_.Add(other.roundQueue_);
      if (other.FreeTotalWin != 0D) {
        FreeTotalWin = other.FreeTotalWin;
      }
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      lastInfo_.Add(other.lastInfo_);
      if (other.JPFrontBefore != 0D) {
        JPFrontBefore = other.JPFrontBefore;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(input, _repeated_roundQueue_codec);
            break;
          }
          case 17: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 34: {
            lastInfo_.AddEntriesFrom(input, _repeated_lastInfo_codec);
            break;
          }
          case 41: {
            JPFrontBefore = input.ReadDouble();
            break;
          }
          case 49: {
            RTP = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            roundQueue_.AddEntriesFrom(ref input, _repeated_roundQueue_codec);
            break;
          }
          case 17: {
            FreeTotalWin = input.ReadDouble();
            break;
          }
          case 25: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 34: {
            lastInfo_.AddEntriesFrom(ref input, _repeated_lastInfo_codec);
            break;
          }
          case 41: {
            JPFrontBefore = input.ReadDouble();
            break;
          }
          case 49: {
            RTP = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RoundInfo : pb::IMessage<RoundInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoundInfo> _parser = new pb::MessageParser<RoundInfo>(() => new RoundInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoundInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cc.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo(RoundInfo other) : this() {
      plateSymbol_ = other.plateSymbol_.Clone();
      newWildPos_ = other.newWildPos_.Clone();
      nowWildPos_ = other.nowWildPos_.Clone();
      redEnvelopePos_ = other.redEnvelopePos_.Clone();
      redEnvelopeWin_ = other.redEnvelopeWin_;
      roundWin_ = other.roundWin_;
      jPPlate_ = other.jPPlate_.Clone();
      awardDataVec_ = other.awardDataVec_.Clone();
      awardTypeFlag_ = other.awardTypeFlag_;
      gameType_ = other.gameType_;
      freeRemainRound_ = other.freeRemainRound_;
      freeNowRound_ = other.freeNowRound_;
      freeTotalRound_ = other.freeTotalRound_;
      wildSymbol_ = other.wildSymbol_;
      fGRedCoins_ = other.fGRedCoins_.Clone();
      addCrack_ = other.addCrack_.Clone();
      maxFlag_ = other.maxFlag_;
      addCrackLv_ = other.addCrackLv_.Clone();
      crackLevels_ = other.crackLevels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoundInfo Clone() {
      return new RoundInfo(this);
    }

    /// <summary>Field number for the "PlateSymbol" field.</summary>
    public const int PlateSymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cc.Column> _repeated_plateSymbol_codec
        = pb::FieldCodec.ForMessage(10, global::Jili.Protocols.Cc.Column.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cc.Column> plateSymbol_ = new pbc::RepeatedField<global::Jili.Protocols.Cc.Column>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cc.Column> PlateSymbol {
      get { return plateSymbol_; }
    }

    /// <summary>Field number for the "NewWildPos" field.</summary>
    public const int NewWildPosFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_newWildPos_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> newWildPos_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NewWildPos {
      get { return newWildPos_; }
    }

    /// <summary>Field number for the "NowWildPos" field.</summary>
    public const int NowWildPosFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_nowWildPos_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> nowWildPos_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NowWildPos {
      get { return nowWildPos_; }
    }

    /// <summary>Field number for the "RedEnvelopePos" field.</summary>
    public const int RedEnvelopePosFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_redEnvelopePos_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> redEnvelopePos_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> RedEnvelopePos {
      get { return redEnvelopePos_; }
    }

    /// <summary>Field number for the "RedEnvelopeWin" field.</summary>
    public const int RedEnvelopeWinFieldNumber = 5;
    private int redEnvelopeWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RedEnvelopeWin {
      get { return redEnvelopeWin_; }
      set {
        redEnvelopeWin_ = value;
      }
    }

    /// <summary>Field number for the "RoundWin" field.</summary>
    public const int RoundWinFieldNumber = 6;
    private double roundWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RoundWin {
      get { return roundWin_; }
      set {
        roundWin_ = value;
      }
    }

    /// <summary>Field number for the "JPPlate" field.</summary>
    public const int JPPlateFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cc.JPData> _repeated_jPPlate_codec
        = pb::FieldCodec.ForMessage(58, global::Jili.Protocols.Cc.JPData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cc.JPData> jPPlate_ = new pbc::RepeatedField<global::Jili.Protocols.Cc.JPData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cc.JPData> JPPlate {
      get { return jPPlate_; }
    }

    /// <summary>Field number for the "AwardDataVec" field.</summary>
    public const int AwardDataVecFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cc.AwardData> _repeated_awardDataVec_codec
        = pb::FieldCodec.ForMessage(66, global::Jili.Protocols.Cc.AwardData.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cc.AwardData> awardDataVec_ = new pbc::RepeatedField<global::Jili.Protocols.Cc.AwardData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cc.AwardData> AwardDataVec {
      get { return awardDataVec_; }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 9;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "GameType" field.</summary>
    public const int GameTypeFieldNumber = 10;
    private int gameType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameType {
      get { return gameType_; }
      set {
        gameType_ = value;
      }
    }

    /// <summary>Field number for the "FreeRemainRound" field.</summary>
    public const int FreeRemainRoundFieldNumber = 11;
    private int freeRemainRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeRemainRound {
      get { return freeRemainRound_; }
      set {
        freeRemainRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeNowRound" field.</summary>
    public const int FreeNowRoundFieldNumber = 12;
    private int freeNowRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeNowRound {
      get { return freeNowRound_; }
      set {
        freeNowRound_ = value;
      }
    }

    /// <summary>Field number for the "FreeTotalRound" field.</summary>
    public const int FreeTotalRoundFieldNumber = 13;
    private int freeTotalRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeTotalRound {
      get { return freeTotalRound_; }
      set {
        freeTotalRound_ = value;
      }
    }

    /// <summary>Field number for the "WildSymbol" field.</summary>
    public const int WildSymbolFieldNumber = 14;
    private int wildSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WildSymbol {
      get { return wildSymbol_; }
      set {
        wildSymbol_ = value;
      }
    }

    /// <summary>Field number for the "FGRedCoins" field.</summary>
    public const int FGRedCoinsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cc.FGRedCoin> _repeated_fGRedCoins_codec
        = pb::FieldCodec.ForMessage(122, global::Jili.Protocols.Cc.FGRedCoin.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cc.FGRedCoin> fGRedCoins_ = new pbc::RepeatedField<global::Jili.Protocols.Cc.FGRedCoin>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cc.FGRedCoin> FGRedCoins {
      get { return fGRedCoins_; }
    }

    /// <summary>Field number for the "AddCrack" field.</summary>
    public const int AddCrackFieldNumber = 16;
    private static readonly pb::FieldCodec<bool> _repeated_addCrack_codec
        = pb::FieldCodec.ForBool(130);
    private readonly pbc::RepeatedField<bool> addCrack_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<bool> AddCrack {
      get { return addCrack_; }
    }

    /// <summary>Field number for the "MaxFlag" field.</summary>
    public const int MaxFlagFieldNumber = 17;
    private bool maxFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool MaxFlag {
      get { return maxFlag_; }
      set {
        maxFlag_ = value;
      }
    }

    /// <summary>Field number for the "AddCrackLv" field.</summary>
    public const int AddCrackLvFieldNumber = 18;
    private static readonly pb::FieldCodec<int> _repeated_addCrackLv_codec
        = pb::FieldCodec.ForInt32(146);
    private readonly pbc::RepeatedField<int> addCrackLv_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> AddCrackLv {
      get { return addCrackLv_; }
    }

    /// <summary>Field number for the "CrackLevels" field.</summary>
    public const int CrackLevelsFieldNumber = 19;
    private static readonly pb::FieldCodec<int> _repeated_crackLevels_codec
        = pb::FieldCodec.ForInt32(154);
    private readonly pbc::RepeatedField<int> crackLevels_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> CrackLevels {
      get { return crackLevels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoundInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoundInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateSymbol_.Equals(other.plateSymbol_)) return false;
      if(!newWildPos_.Equals(other.newWildPos_)) return false;
      if(!nowWildPos_.Equals(other.nowWildPos_)) return false;
      if(!redEnvelopePos_.Equals(other.redEnvelopePos_)) return false;
      if (RedEnvelopeWin != other.RedEnvelopeWin) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RoundWin, other.RoundWin)) return false;
      if(!jPPlate_.Equals(other.jPPlate_)) return false;
      if(!awardDataVec_.Equals(other.awardDataVec_)) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (GameType != other.GameType) return false;
      if (FreeRemainRound != other.FreeRemainRound) return false;
      if (FreeNowRound != other.FreeNowRound) return false;
      if (FreeTotalRound != other.FreeTotalRound) return false;
      if (WildSymbol != other.WildSymbol) return false;
      if(!fGRedCoins_.Equals(other.fGRedCoins_)) return false;
      if(!addCrack_.Equals(other.addCrack_)) return false;
      if (MaxFlag != other.MaxFlag) return false;
      if(!addCrackLv_.Equals(other.addCrackLv_)) return false;
      if(!crackLevels_.Equals(other.crackLevels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateSymbol_.GetHashCode();
      hash ^= newWildPos_.GetHashCode();
      hash ^= nowWildPos_.GetHashCode();
      hash ^= redEnvelopePos_.GetHashCode();
      if (RedEnvelopeWin != 0) hash ^= RedEnvelopeWin.GetHashCode();
      if (RoundWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RoundWin);
      hash ^= jPPlate_.GetHashCode();
      hash ^= awardDataVec_.GetHashCode();
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (GameType != 0) hash ^= GameType.GetHashCode();
      if (FreeRemainRound != 0) hash ^= FreeRemainRound.GetHashCode();
      if (FreeNowRound != 0) hash ^= FreeNowRound.GetHashCode();
      if (FreeTotalRound != 0) hash ^= FreeTotalRound.GetHashCode();
      if (WildSymbol != 0) hash ^= WildSymbol.GetHashCode();
      hash ^= fGRedCoins_.GetHashCode();
      hash ^= addCrack_.GetHashCode();
      if (MaxFlag != false) hash ^= MaxFlag.GetHashCode();
      hash ^= addCrackLv_.GetHashCode();
      hash ^= crackLevels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateSymbol_.WriteTo(output, _repeated_plateSymbol_codec);
      newWildPos_.WriteTo(output, _repeated_newWildPos_codec);
      nowWildPos_.WriteTo(output, _repeated_nowWildPos_codec);
      redEnvelopePos_.WriteTo(output, _repeated_redEnvelopePos_codec);
      if (RedEnvelopeWin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RedEnvelopeWin);
      }
      if (RoundWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RoundWin);
      }
      jPPlate_.WriteTo(output, _repeated_jPPlate_codec);
      awardDataVec_.WriteTo(output, _repeated_awardDataVec_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AwardTypeFlag);
      }
      if (GameType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GameType);
      }
      if (FreeRemainRound != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FreeRemainRound);
      }
      if (FreeNowRound != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FreeNowRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(FreeTotalRound);
      }
      if (WildSymbol != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(WildSymbol);
      }
      fGRedCoins_.WriteTo(output, _repeated_fGRedCoins_codec);
      addCrack_.WriteTo(output, _repeated_addCrack_codec);
      if (MaxFlag != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(MaxFlag);
      }
      addCrackLv_.WriteTo(output, _repeated_addCrackLv_codec);
      crackLevels_.WriteTo(output, _repeated_crackLevels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateSymbol_.WriteTo(ref output, _repeated_plateSymbol_codec);
      newWildPos_.WriteTo(ref output, _repeated_newWildPos_codec);
      nowWildPos_.WriteTo(ref output, _repeated_nowWildPos_codec);
      redEnvelopePos_.WriteTo(ref output, _repeated_redEnvelopePos_codec);
      if (RedEnvelopeWin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(RedEnvelopeWin);
      }
      if (RoundWin != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RoundWin);
      }
      jPPlate_.WriteTo(ref output, _repeated_jPPlate_codec);
      awardDataVec_.WriteTo(ref output, _repeated_awardDataVec_codec);
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AwardTypeFlag);
      }
      if (GameType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GameType);
      }
      if (FreeRemainRound != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FreeRemainRound);
      }
      if (FreeNowRound != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(FreeNowRound);
      }
      if (FreeTotalRound != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(FreeTotalRound);
      }
      if (WildSymbol != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(WildSymbol);
      }
      fGRedCoins_.WriteTo(ref output, _repeated_fGRedCoins_codec);
      addCrack_.WriteTo(ref output, _repeated_addCrack_codec);
      if (MaxFlag != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(MaxFlag);
      }
      addCrackLv_.WriteTo(ref output, _repeated_addCrackLv_codec);
      crackLevels_.WriteTo(ref output, _repeated_crackLevels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateSymbol_.CalculateSize(_repeated_plateSymbol_codec);
      size += newWildPos_.CalculateSize(_repeated_newWildPos_codec);
      size += nowWildPos_.CalculateSize(_repeated_nowWildPos_codec);
      size += redEnvelopePos_.CalculateSize(_repeated_redEnvelopePos_codec);
      if (RedEnvelopeWin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RedEnvelopeWin);
      }
      if (RoundWin != 0D) {
        size += 1 + 8;
      }
      size += jPPlate_.CalculateSize(_repeated_jPPlate_codec);
      size += awardDataVec_.CalculateSize(_repeated_awardDataVec_codec);
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (GameType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameType);
      }
      if (FreeRemainRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeRemainRound);
      }
      if (FreeNowRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeNowRound);
      }
      if (FreeTotalRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeTotalRound);
      }
      if (WildSymbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WildSymbol);
      }
      size += fGRedCoins_.CalculateSize(_repeated_fGRedCoins_codec);
      size += addCrack_.CalculateSize(_repeated_addCrack_codec);
      if (MaxFlag != false) {
        size += 2 + 1;
      }
      size += addCrackLv_.CalculateSize(_repeated_addCrackLv_codec);
      size += crackLevels_.CalculateSize(_repeated_crackLevels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoundInfo other) {
      if (other == null) {
        return;
      }
      plateSymbol_.Add(other.plateSymbol_);
      newWildPos_.Add(other.newWildPos_);
      nowWildPos_.Add(other.nowWildPos_);
      redEnvelopePos_.Add(other.redEnvelopePos_);
      if (other.RedEnvelopeWin != 0) {
        RedEnvelopeWin = other.RedEnvelopeWin;
      }
      if (other.RoundWin != 0D) {
        RoundWin = other.RoundWin;
      }
      jPPlate_.Add(other.jPPlate_);
      awardDataVec_.Add(other.awardDataVec_);
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.GameType != 0) {
        GameType = other.GameType;
      }
      if (other.FreeRemainRound != 0) {
        FreeRemainRound = other.FreeRemainRound;
      }
      if (other.FreeNowRound != 0) {
        FreeNowRound = other.FreeNowRound;
      }
      if (other.FreeTotalRound != 0) {
        FreeTotalRound = other.FreeTotalRound;
      }
      if (other.WildSymbol != 0) {
        WildSymbol = other.WildSymbol;
      }
      fGRedCoins_.Add(other.fGRedCoins_);
      addCrack_.Add(other.addCrack_);
      if (other.MaxFlag != false) {
        MaxFlag = other.MaxFlag;
      }
      addCrackLv_.Add(other.addCrackLv_);
      crackLevels_.Add(other.crackLevels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(input, _repeated_plateSymbol_codec);
            break;
          }
          case 18:
          case 16: {
            newWildPos_.AddEntriesFrom(input, _repeated_newWildPos_codec);
            break;
          }
          case 26:
          case 24: {
            nowWildPos_.AddEntriesFrom(input, _repeated_nowWildPos_codec);
            break;
          }
          case 34:
          case 32: {
            redEnvelopePos_.AddEntriesFrom(input, _repeated_redEnvelopePos_codec);
            break;
          }
          case 40: {
            RedEnvelopeWin = input.ReadInt32();
            break;
          }
          case 49: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 58: {
            jPPlate_.AddEntriesFrom(input, _repeated_jPPlate_codec);
            break;
          }
          case 66: {
            awardDataVec_.AddEntriesFrom(input, _repeated_awardDataVec_codec);
            break;
          }
          case 72: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 80: {
            GameType = input.ReadInt32();
            break;
          }
          case 88: {
            FreeRemainRound = input.ReadInt32();
            break;
          }
          case 96: {
            FreeNowRound = input.ReadInt32();
            break;
          }
          case 104: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
          case 112: {
            WildSymbol = input.ReadInt32();
            break;
          }
          case 122: {
            fGRedCoins_.AddEntriesFrom(input, _repeated_fGRedCoins_codec);
            break;
          }
          case 130:
          case 128: {
            addCrack_.AddEntriesFrom(input, _repeated_addCrack_codec);
            break;
          }
          case 136: {
            MaxFlag = input.ReadBool();
            break;
          }
          case 146:
          case 144: {
            addCrackLv_.AddEntriesFrom(input, _repeated_addCrackLv_codec);
            break;
          }
          case 154:
          case 152: {
            crackLevels_.AddEntriesFrom(input, _repeated_crackLevels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            plateSymbol_.AddEntriesFrom(ref input, _repeated_plateSymbol_codec);
            break;
          }
          case 18:
          case 16: {
            newWildPos_.AddEntriesFrom(ref input, _repeated_newWildPos_codec);
            break;
          }
          case 26:
          case 24: {
            nowWildPos_.AddEntriesFrom(ref input, _repeated_nowWildPos_codec);
            break;
          }
          case 34:
          case 32: {
            redEnvelopePos_.AddEntriesFrom(ref input, _repeated_redEnvelopePos_codec);
            break;
          }
          case 40: {
            RedEnvelopeWin = input.ReadInt32();
            break;
          }
          case 49: {
            RoundWin = input.ReadDouble();
            break;
          }
          case 58: {
            jPPlate_.AddEntriesFrom(ref input, _repeated_jPPlate_codec);
            break;
          }
          case 66: {
            awardDataVec_.AddEntriesFrom(ref input, _repeated_awardDataVec_codec);
            break;
          }
          case 72: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 80: {
            GameType = input.ReadInt32();
            break;
          }
          case 88: {
            FreeRemainRound = input.ReadInt32();
            break;
          }
          case 96: {
            FreeNowRound = input.ReadInt32();
            break;
          }
          case 104: {
            FreeTotalRound = input.ReadInt32();
            break;
          }
          case 112: {
            WildSymbol = input.ReadInt32();
            break;
          }
          case 122: {
            fGRedCoins_.AddEntriesFrom(ref input, _repeated_fGRedCoins_codec);
            break;
          }
          case 130:
          case 128: {
            addCrack_.AddEntriesFrom(ref input, _repeated_addCrack_codec);
            break;
          }
          case 136: {
            MaxFlag = input.ReadBool();
            break;
          }
          case 146:
          case 144: {
            addCrackLv_.AddEntriesFrom(ref input, _repeated_addCrackLv_codec);
            break;
          }
          case 154:
          case 152: {
            crackLevels_.AddEntriesFrom(ref input, _repeated_crackLevels_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Column : pb::IMessage<Column>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cc.SpinAckReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column(Column other) : this() {
      column_ = other.column_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Column Clone() {
      return new Column(this);
    }

    /// <summary>Field number for the "Column" field.</summary>
    public const int Column_FieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_column_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> column_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Column_ {
      get { return column_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!column_.Equals(other.column_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= column_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      column_.WriteTo(output, _repeated_column_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      column_.WriteTo(ref output, _repeated_column_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += column_.CalculateSize(_repeated_column_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      column_.Add(other.column_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            column_.AddEntriesFrom(input, _repeated_column_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            column_.AddEntriesFrom(ref input, _repeated_column_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class JPData : pb::IMessage<JPData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JPData> _parser = new pb::MessageParser<JPData>(() => new JPData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JPData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cc.SpinAckReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JPData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JPData(JPData other) : this() {
      symbolSerial_ = other.symbolSerial_.Clone();
      win_ = other.win_;
      hitSymbol_ = other.hitSymbol_;
      jPType_ = other.jPType_;
      isUpgraded_ = other.isUpgraded_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JPData Clone() {
      return new JPData(this);
    }

    /// <summary>Field number for the "SymbolSerial" field.</summary>
    public const int SymbolSerialFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_symbolSerial_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> symbolSerial_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SymbolSerial {
      get { return symbolSerial_; }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 2;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "HitSymbol" field.</summary>
    public const int HitSymbolFieldNumber = 3;
    private int hitSymbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitSymbol {
      get { return hitSymbol_; }
      set {
        hitSymbol_ = value;
      }
    }

    /// <summary>Field number for the "JPType" field.</summary>
    public const int JPTypeFieldNumber = 4;
    private int jPType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int JPType {
      get { return jPType_; }
      set {
        jPType_ = value;
      }
    }

    /// <summary>Field number for the "IsUpgraded" field.</summary>
    public const int IsUpgradedFieldNumber = 5;
    private bool isUpgraded_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUpgraded {
      get { return isUpgraded_; }
      set {
        isUpgraded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JPData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JPData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!symbolSerial_.Equals(other.symbolSerial_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      if (HitSymbol != other.HitSymbol) return false;
      if (JPType != other.JPType) return false;
      if (IsUpgraded != other.IsUpgraded) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= symbolSerial_.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (HitSymbol != 0) hash ^= HitSymbol.GetHashCode();
      if (JPType != 0) hash ^= JPType.GetHashCode();
      if (IsUpgraded != false) hash ^= IsUpgraded.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      symbolSerial_.WriteTo(output, _repeated_symbolSerial_codec);
      if (Win != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Win);
      }
      if (HitSymbol != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitSymbol);
      }
      if (JPType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JPType);
      }
      if (IsUpgraded != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsUpgraded);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      symbolSerial_.WriteTo(ref output, _repeated_symbolSerial_codec);
      if (Win != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Win);
      }
      if (HitSymbol != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(HitSymbol);
      }
      if (JPType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(JPType);
      }
      if (IsUpgraded != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsUpgraded);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += symbolSerial_.CalculateSize(_repeated_symbolSerial_codec);
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (HitSymbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitSymbol);
      }
      if (JPType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(JPType);
      }
      if (IsUpgraded != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JPData other) {
      if (other == null) {
        return;
      }
      symbolSerial_.Add(other.symbolSerial_);
      if (other.Win != 0D) {
        Win = other.Win;
      }
      if (other.HitSymbol != 0) {
        HitSymbol = other.HitSymbol;
      }
      if (other.JPType != 0) {
        JPType = other.JPType;
      }
      if (other.IsUpgraded != false) {
        IsUpgraded = other.IsUpgraded;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            symbolSerial_.AddEntriesFrom(input, _repeated_symbolSerial_codec);
            break;
          }
          case 17: {
            Win = input.ReadDouble();
            break;
          }
          case 24: {
            HitSymbol = input.ReadInt32();
            break;
          }
          case 32: {
            JPType = input.ReadInt32();
            break;
          }
          case 40: {
            IsUpgraded = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            symbolSerial_.AddEntriesFrom(ref input, _repeated_symbolSerial_codec);
            break;
          }
          case 17: {
            Win = input.ReadDouble();
            break;
          }
          case 24: {
            HitSymbol = input.ReadInt32();
            break;
          }
          case 32: {
            JPType = input.ReadInt32();
            break;
          }
          case 40: {
            IsUpgraded = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class AwardData : pb::IMessage<AwardData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AwardData> _parser = new pb::MessageParser<AwardData>(() => new AwardData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AwardData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cc.SpinAckReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData(AwardData other) : this() {
      symbol_ = other.symbol_;
      count_ = other.count_;
      lineNum_ = other.lineNum_;
      win_ = other.win_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AwardData Clone() {
      return new AwardData(this);
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private int symbol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Symbol {
      get { return symbol_; }
      set {
        symbol_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "LineNum" field.</summary>
    public const int LineNumFieldNumber = 3;
    private int lineNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LineNum {
      get { return lineNum_; }
      set {
        lineNum_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 4;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AwardData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AwardData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Count != other.Count) return false;
      if (LineNum != other.LineNum) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol != 0) hash ^= Symbol.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (LineNum != 0) hash ^= LineNum.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (LineNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineNum);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Symbol != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Symbol);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (LineNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LineNum);
      }
      if (Win != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Symbol != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Symbol);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (LineNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineNum);
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AwardData other) {
      if (other == null) {
        return;
      }
      if (other.Symbol != 0) {
        Symbol = other.Symbol;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.LineNum != 0) {
        LineNum = other.LineNum;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            LineNum = input.ReadInt32();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Symbol = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            LineNum = input.ReadInt32();
            break;
          }
          case 33: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class StateInfo : pb::IMessage<StateInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StateInfo> _parser = new pb::MessageParser<StateInfo>(() => new StateInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<StateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cc.SpinAckReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StateInfo(StateInfo other) : this() {
      crackLevels_ = other.crackLevels_.Clone();
      wildRecordVec_ = other.wildRecordVec_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public StateInfo Clone() {
      return new StateInfo(this);
    }

    /// <summary>Field number for the "CrackLevels" field.</summary>
    public const int CrackLevelsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_crackLevels_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> crackLevels_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> CrackLevels {
      get { return crackLevels_; }
    }

    /// <summary>Field number for the "WildRecordVec" field.</summary>
    public const int WildRecordVecFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Cc.WildRecordSet> _repeated_wildRecordVec_codec
        = pb::FieldCodec.ForMessage(18, global::Jili.Protocols.Cc.WildRecordSet.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Cc.WildRecordSet> wildRecordVec_ = new pbc::RepeatedField<global::Jili.Protocols.Cc.WildRecordSet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Cc.WildRecordSet> WildRecordVec {
      get { return wildRecordVec_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as StateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(StateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!crackLevels_.Equals(other.crackLevels_)) return false;
      if(!wildRecordVec_.Equals(other.wildRecordVec_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= crackLevels_.GetHashCode();
      hash ^= wildRecordVec_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      crackLevels_.WriteTo(output, _repeated_crackLevels_codec);
      wildRecordVec_.WriteTo(output, _repeated_wildRecordVec_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      crackLevels_.WriteTo(ref output, _repeated_crackLevels_codec);
      wildRecordVec_.WriteTo(ref output, _repeated_wildRecordVec_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += crackLevels_.CalculateSize(_repeated_crackLevels_codec);
      size += wildRecordVec_.CalculateSize(_repeated_wildRecordVec_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(StateInfo other) {
      if (other == null) {
        return;
      }
      crackLevels_.Add(other.crackLevels_);
      wildRecordVec_.Add(other.wildRecordVec_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            crackLevels_.AddEntriesFrom(input, _repeated_crackLevels_codec);
            break;
          }
          case 18: {
            wildRecordVec_.AddEntriesFrom(input, _repeated_wildRecordVec_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            crackLevels_.AddEntriesFrom(ref input, _repeated_crackLevels_codec);
            break;
          }
          case 18: {
            wildRecordVec_.AddEntriesFrom(ref input, _repeated_wildRecordVec_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class WildRecordSet : pb::IMessage<WildRecordSet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WildRecordSet> _parser = new pb::MessageParser<WildRecordSet>(() => new WildRecordSet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<WildRecordSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cc.SpinAckReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WildRecordSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WildRecordSet(WildRecordSet other) : this() {
      bet_ = other.bet_;
      pos_ = other.pos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public WildRecordSet Clone() {
      return new WildRecordSet(this);
    }

    /// <summary>Field number for the "Bet" field.</summary>
    public const int BetFieldNumber = 1;
    private double bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_pos_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> pos_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Pos {
      get { return pos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as WildRecordSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(WildRecordSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bet, other.Bet)) return false;
      if(!pos_.Equals(other.pos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Bet != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bet);
      hash ^= pos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Bet != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Bet);
      }
      pos_.WriteTo(output, _repeated_pos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Bet != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Bet);
      }
      pos_.WriteTo(ref output, _repeated_pos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Bet != 0D) {
        size += 1 + 8;
      }
      size += pos_.CalculateSize(_repeated_pos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(WildRecordSet other) {
      if (other == null) {
        return;
      }
      if (other.Bet != 0D) {
        Bet = other.Bet;
      }
      pos_.Add(other.pos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Bet = input.ReadDouble();
            break;
          }
          case 18:
          case 16: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Bet = input.ReadDouble();
            break;
          }
          case 18:
          case 16: {
            pos_.AddEntriesFrom(ref input, _repeated_pos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FGRedCoin : pb::IMessage<FGRedCoin>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FGRedCoin> _parser = new pb::MessageParser<FGRedCoin>(() => new FGRedCoin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FGRedCoin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Cc.SpinAckReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FGRedCoin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FGRedCoin(FGRedCoin other) : this() {
      pos_ = other.pos_;
      addRound_ = other.addRound_;
      win_ = other.win_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FGRedCoin Clone() {
      return new FGRedCoin(this);
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 1;
    private int pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "AddRound" field.</summary>
    public const int AddRoundFieldNumber = 2;
    private int addRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AddRound {
      get { return addRound_; }
      set {
        addRound_ = value;
      }
    }

    /// <summary>Field number for the "Win" field.</summary>
    public const int WinFieldNumber = 3;
    private double win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FGRedCoin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FGRedCoin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pos != other.Pos) return false;
      if (AddRound != other.AddRound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Win, other.Win)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Pos != 0) hash ^= Pos.GetHashCode();
      if (AddRound != 0) hash ^= AddRound.GetHashCode();
      if (Win != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Win);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (AddRound != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AddRound);
      }
      if (Win != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Pos != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pos);
      }
      if (AddRound != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AddRound);
      }
      if (Win != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Win);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Pos != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pos);
      }
      if (AddRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddRound);
      }
      if (Win != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FGRedCoin other) {
      if (other == null) {
        return;
      }
      if (other.Pos != 0) {
        Pos = other.Pos;
      }
      if (other.AddRound != 0) {
        AddRound = other.AddRound;
      }
      if (other.Win != 0D) {
        Win = other.Win;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            AddRound = input.ReadInt32();
            break;
          }
          case 25: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pos = input.ReadInt32();
            break;
          }
          case 16: {
            AddRound = input.ReadInt32();
            break;
          }
          case 25: {
            Win = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
