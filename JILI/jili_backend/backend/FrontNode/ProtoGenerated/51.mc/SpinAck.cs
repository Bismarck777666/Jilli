// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SpinAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jili.Protocols.Mc {

  /// <summary>Holder for reflection information generated from SpinAck.proto</summary>
  public static partial class SpinAckReflection {

    #region Descriptor
    /// <summary>File descriptor for SpinAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpinAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TcGluQWNrLnByb3RvEhFKaWxpLlByb3RvY29scy5tYyL0AQoHU3BpbkFj",
            "axIQCghXaGVlbFdpbhgBIAEoARIQCghQbGF0ZVdpbhgCIAEoARIRCglJc05l",
            "YXJXaW4YAyABKAgSNQoJUGxhdGVJbmZvGAQgAygLMiIuSmlsaS5Qcm90b2Nv",
            "bHMubWMuUGxhdGVJbmZvRGV0YWlsEhAKCFRvdGFsV2luGAUgASgBEhUKDUF3",
            "YXJkVHlwZUZsYWcYBiABKAUSEQoJU2hvd0luZGV4GAcgASgJEhAKCE5vd01v",
            "bmV5GAggASgBEg8KB0Fja1R5cGUYCSABKAUSCwoDUlRQGAogASgBEg8KB0lz",
            "Qm9udXMYCyABKAgiRwoPUGxhdGVJbmZvRGV0YWlsEhMKC1BsYXRlU3ltYm9s",
            "GAEgAygFEg0KBU9yZGVyGAIgAygFEhAKCFBsYXRlV2luGAMgASgBYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Mc.SpinAck), global::Jili.Protocols.Mc.SpinAck.Parser, new[]{ "WheelWin", "PlateWin", "IsNearWin", "PlateInfo", "TotalWin", "AwardTypeFlag", "ShowIndex", "NowMoney", "AckType", "RTP", "IsBonus" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jili.Protocols.Mc.PlateInfoDetail), global::Jili.Protocols.Mc.PlateInfoDetail.Parser, new[]{ "PlateSymbol", "Order", "PlateWin" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SpinAck : pb::IMessage<SpinAck>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpinAck> _parser = new pb::MessageParser<SpinAck>(() => new SpinAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpinAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Mc.SpinAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck(SpinAck other) : this() {
      wheelWin_ = other.wheelWin_;
      plateWin_ = other.plateWin_;
      isNearWin_ = other.isNearWin_;
      plateInfo_ = other.plateInfo_.Clone();
      totalWin_ = other.totalWin_;
      awardTypeFlag_ = other.awardTypeFlag_;
      showIndex_ = other.showIndex_;
      nowMoney_ = other.nowMoney_;
      ackType_ = other.ackType_;
      rTP_ = other.rTP_;
      isBonus_ = other.isBonus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpinAck Clone() {
      return new SpinAck(this);
    }

    /// <summary>Field number for the "WheelWin" field.</summary>
    public const int WheelWinFieldNumber = 1;
    private double wheelWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double WheelWin {
      get { return wheelWin_; }
      set {
        wheelWin_ = value;
      }
    }

    /// <summary>Field number for the "PlateWin" field.</summary>
    public const int PlateWinFieldNumber = 2;
    private double plateWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PlateWin {
      get { return plateWin_; }
      set {
        plateWin_ = value;
      }
    }

    /// <summary>Field number for the "IsNearWin" field.</summary>
    public const int IsNearWinFieldNumber = 3;
    private bool isNearWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsNearWin {
      get { return isNearWin_; }
      set {
        isNearWin_ = value;
      }
    }

    /// <summary>Field number for the "PlateInfo" field.</summary>
    public const int PlateInfoFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Jili.Protocols.Mc.PlateInfoDetail> _repeated_plateInfo_codec
        = pb::FieldCodec.ForMessage(34, global::Jili.Protocols.Mc.PlateInfoDetail.Parser);
    private readonly pbc::RepeatedField<global::Jili.Protocols.Mc.PlateInfoDetail> plateInfo_ = new pbc::RepeatedField<global::Jili.Protocols.Mc.PlateInfoDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Jili.Protocols.Mc.PlateInfoDetail> PlateInfo {
      get { return plateInfo_; }
    }

    /// <summary>Field number for the "TotalWin" field.</summary>
    public const int TotalWinFieldNumber = 5;
    private double totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "AwardTypeFlag" field.</summary>
    public const int AwardTypeFlagFieldNumber = 6;
    private int awardTypeFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AwardTypeFlag {
      get { return awardTypeFlag_; }
      set {
        awardTypeFlag_ = value;
      }
    }

    /// <summary>Field number for the "ShowIndex" field.</summary>
    public const int ShowIndexFieldNumber = 7;
    private string showIndex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ShowIndex {
      get { return showIndex_; }
      set {
        showIndex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NowMoney" field.</summary>
    public const int NowMoneyFieldNumber = 8;
    private double nowMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double NowMoney {
      get { return nowMoney_; }
      set {
        nowMoney_ = value;
      }
    }

    /// <summary>Field number for the "AckType" field.</summary>
    public const int AckTypeFieldNumber = 9;
    private int ackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AckType {
      get { return ackType_; }
      set {
        ackType_ = value;
      }
    }

    /// <summary>Field number for the "RTP" field.</summary>
    public const int RTPFieldNumber = 10;
    private double rTP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double RTP {
      get { return rTP_; }
      set {
        rTP_ = value;
      }
    }

    /// <summary>Field number for the "IsBonus" field.</summary>
    public const int IsBonusFieldNumber = 11;
    private bool isBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBonus {
      get { return isBonus_; }
      set {
        isBonus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpinAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpinAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WheelWin, other.WheelWin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlateWin, other.PlateWin)) return false;
      if (IsNearWin != other.IsNearWin) return false;
      if(!plateInfo_.Equals(other.plateInfo_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TotalWin, other.TotalWin)) return false;
      if (AwardTypeFlag != other.AwardTypeFlag) return false;
      if (ShowIndex != other.ShowIndex) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NowMoney, other.NowMoney)) return false;
      if (AckType != other.AckType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RTP, other.RTP)) return false;
      if (IsBonus != other.IsBonus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (WheelWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WheelWin);
      if (PlateWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlateWin);
      if (IsNearWin != false) hash ^= IsNearWin.GetHashCode();
      hash ^= plateInfo_.GetHashCode();
      if (TotalWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TotalWin);
      if (AwardTypeFlag != 0) hash ^= AwardTypeFlag.GetHashCode();
      if (ShowIndex.Length != 0) hash ^= ShowIndex.GetHashCode();
      if (NowMoney != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NowMoney);
      if (AckType != 0) hash ^= AckType.GetHashCode();
      if (RTP != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RTP);
      if (IsBonus != false) hash ^= IsBonus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (WheelWin != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(WheelWin);
      }
      if (PlateWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PlateWin);
      }
      if (IsNearWin != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNearWin);
      }
      plateInfo_.WriteTo(output, _repeated_plateInfo_codec);
      if (TotalWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(TotalWin);
      }
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AwardTypeFlag);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(RTP);
      }
      if (IsBonus != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsBonus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (WheelWin != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(WheelWin);
      }
      if (PlateWin != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(PlateWin);
      }
      if (IsNearWin != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsNearWin);
      }
      plateInfo_.WriteTo(ref output, _repeated_plateInfo_codec);
      if (TotalWin != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(TotalWin);
      }
      if (AwardTypeFlag != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AwardTypeFlag);
      }
      if (ShowIndex.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ShowIndex);
      }
      if (NowMoney != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(NowMoney);
      }
      if (AckType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AckType);
      }
      if (RTP != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(RTP);
      }
      if (IsBonus != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsBonus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (WheelWin != 0D) {
        size += 1 + 8;
      }
      if (PlateWin != 0D) {
        size += 1 + 8;
      }
      if (IsNearWin != false) {
        size += 1 + 1;
      }
      size += plateInfo_.CalculateSize(_repeated_plateInfo_codec);
      if (TotalWin != 0D) {
        size += 1 + 8;
      }
      if (AwardTypeFlag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AwardTypeFlag);
      }
      if (ShowIndex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ShowIndex);
      }
      if (NowMoney != 0D) {
        size += 1 + 8;
      }
      if (AckType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AckType);
      }
      if (RTP != 0D) {
        size += 1 + 8;
      }
      if (IsBonus != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpinAck other) {
      if (other == null) {
        return;
      }
      if (other.WheelWin != 0D) {
        WheelWin = other.WheelWin;
      }
      if (other.PlateWin != 0D) {
        PlateWin = other.PlateWin;
      }
      if (other.IsNearWin != false) {
        IsNearWin = other.IsNearWin;
      }
      plateInfo_.Add(other.plateInfo_);
      if (other.TotalWin != 0D) {
        TotalWin = other.TotalWin;
      }
      if (other.AwardTypeFlag != 0) {
        AwardTypeFlag = other.AwardTypeFlag;
      }
      if (other.ShowIndex.Length != 0) {
        ShowIndex = other.ShowIndex;
      }
      if (other.NowMoney != 0D) {
        NowMoney = other.NowMoney;
      }
      if (other.AckType != 0) {
        AckType = other.AckType;
      }
      if (other.RTP != 0D) {
        RTP = other.RTP;
      }
      if (other.IsBonus != false) {
        IsBonus = other.IsBonus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            WheelWin = input.ReadDouble();
            break;
          }
          case 17: {
            PlateWin = input.ReadDouble();
            break;
          }
          case 24: {
            IsNearWin = input.ReadBool();
            break;
          }
          case 34: {
            plateInfo_.AddEntriesFrom(input, _repeated_plateInfo_codec);
            break;
          }
          case 41: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 48: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 58: {
            ShowIndex = input.ReadString();
            break;
          }
          case 65: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 72: {
            AckType = input.ReadInt32();
            break;
          }
          case 81: {
            RTP = input.ReadDouble();
            break;
          }
          case 88: {
            IsBonus = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            WheelWin = input.ReadDouble();
            break;
          }
          case 17: {
            PlateWin = input.ReadDouble();
            break;
          }
          case 24: {
            IsNearWin = input.ReadBool();
            break;
          }
          case 34: {
            plateInfo_.AddEntriesFrom(ref input, _repeated_plateInfo_codec);
            break;
          }
          case 41: {
            TotalWin = input.ReadDouble();
            break;
          }
          case 48: {
            AwardTypeFlag = input.ReadInt32();
            break;
          }
          case 58: {
            ShowIndex = input.ReadString();
            break;
          }
          case 65: {
            NowMoney = input.ReadDouble();
            break;
          }
          case 72: {
            AckType = input.ReadInt32();
            break;
          }
          case 81: {
            RTP = input.ReadDouble();
            break;
          }
          case 88: {
            IsBonus = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class PlateInfoDetail : pb::IMessage<PlateInfoDetail>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PlateInfoDetail> _parser = new pb::MessageParser<PlateInfoDetail>(() => new PlateInfoDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<PlateInfoDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jili.Protocols.Mc.SpinAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateInfoDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateInfoDetail(PlateInfoDetail other) : this() {
      plateSymbol_ = other.plateSymbol_.Clone();
      order_ = other.order_.Clone();
      plateWin_ = other.plateWin_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public PlateInfoDetail Clone() {
      return new PlateInfoDetail(this);
    }

    /// <summary>Field number for the "PlateSymbol" field.</summary>
    public const int PlateSymbolFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_plateSymbol_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> plateSymbol_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> PlateSymbol {
      get { return plateSymbol_; }
    }

    /// <summary>Field number for the "Order" field.</summary>
    public const int OrderFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_order_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> order_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Order {
      get { return order_; }
    }

    /// <summary>Field number for the "PlateWin" field.</summary>
    public const int PlateWinFieldNumber = 3;
    private double plateWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PlateWin {
      get { return plateWin_; }
      set {
        plateWin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as PlateInfoDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(PlateInfoDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!plateSymbol_.Equals(other.plateSymbol_)) return false;
      if(!order_.Equals(other.order_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PlateWin, other.PlateWin)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= plateSymbol_.GetHashCode();
      hash ^= order_.GetHashCode();
      if (PlateWin != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PlateWin);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      plateSymbol_.WriteTo(output, _repeated_plateSymbol_codec);
      order_.WriteTo(output, _repeated_order_codec);
      if (PlateWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PlateWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      plateSymbol_.WriteTo(ref output, _repeated_plateSymbol_codec);
      order_.WriteTo(ref output, _repeated_order_codec);
      if (PlateWin != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(PlateWin);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += plateSymbol_.CalculateSize(_repeated_plateSymbol_codec);
      size += order_.CalculateSize(_repeated_order_codec);
      if (PlateWin != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(PlateInfoDetail other) {
      if (other == null) {
        return;
      }
      plateSymbol_.Add(other.plateSymbol_);
      order_.Add(other.order_);
      if (other.PlateWin != 0D) {
        PlateWin = other.PlateWin;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            plateSymbol_.AddEntriesFrom(input, _repeated_plateSymbol_codec);
            break;
          }
          case 18:
          case 16: {
            order_.AddEntriesFrom(input, _repeated_order_codec);
            break;
          }
          case 25: {
            PlateWin = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            plateSymbol_.AddEntriesFrom(ref input, _repeated_plateSymbol_codec);
            break;
          }
          case 18:
          case 16: {
            order_.AddEntriesFrom(ref input, _repeated_order_codec);
            break;
          }
          case 25: {
            PlateWin = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
